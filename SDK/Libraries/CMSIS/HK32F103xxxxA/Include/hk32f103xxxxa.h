/*
 * HKMicroChip Limited (HKMicroChip) is supplying this software for use with Cortex-M0!
 * @file          hk32f103xxxxa.h
 * @brief         CMSIS HeaderFile
 * @version       1.9
 * @datatime      2023-12-06 16:47:45(GMT+8:00)
 * @note          Generated by HkSvdFileCon V1.0.4 from hk32f103xxxxa.svd 
 */

#ifndef __HK32F103xxxxA__
#define __HK32F103xxxxA__

#ifdef __cplusplus
extern "C" {
#endif
/*****************************************************************************************
*                              Interrupt Number Definition                               *
*****************************************************************************************/
typedef enum
{
/*********************** Cortex-M3 Processor Exceptions Numbers  ************************/
  NonMaskableInt_IRQn       = -14, /* 2 Non Maskable Interrupt */
  MemoryManagement_IRQn     = -12, /* 4 Cortex-M3 Memory Management Interrupt */
  BusFault_IRQn             = -11, /* 5 Cortex-M3 Bus Fault Interrupt */
  UsageFault_IRQn           = -10, /* 6 Cortex-M3 Usage Fault Interrupt */
  SVCall_IRQn               = -5,  /* 11 Cortex-M3 SV Call Interrupt */
  DebugMonitor_IRQn         = -4,  /* 12 Cortex-M3 SV Call Interrupt */
  PendSV_IRQn               = -2,  /* 14 Cortex-M3 SV Call Interrupt */
  SysTick_IRQn              = -1,  /* 15 Cortex-M3 SV Call Interrupt */

/********************* HK32F103xxxxA specific Interrupt Numbers  ***********************/
  WWDG_IRQn                  = 0,  /* Window Watchdog interrupt */
  PVD_IRQn                   = 1,  /* PVD through EXTI Line16 detection interrupt */
  TAMPER_IRQn                = 2,  /* Tamper interrupt */
  RTC_IRQn                   = 3,  /* RTC global interrupt */
  FLASH_IRQn                 = 4,  /* Flash global interrupt */
  RCC_IRQn                   = 5,  /* RCC global interrupt */
  EXTI0_IRQn                 = 6,  /* EXTI Line0 interrupt */
  EXTI1_IRQn                 = 7,  /* EXTI Line1 interrupt */
  EXTI2_IRQn                 = 8,  /* EXTI Line2 interrupt */
  EXTI3_IRQn                 = 9,  /* EXTI Line3 interrupt */
  EXTI4_IRQn                 = 10, /* EXTI Line4 interrupt */
  DMA1_Channel1_IRQn         = 11, /* DMA Channel1 global interrupt */
  DMA1_Channel2_IRQn         = 12, /* DMA Channel2 global interrupt */
  DMA1_Channel3_IRQn         = 13, /* DMA Channel3 global interrupt */
  DMA1_Channel4_IRQn         = 14, /* DMA Channel4 global interrupt */
  DMA1_Channel5_IRQn         = 15, /* DMA Channel5 global interrupt */
  DMA1_Channel6_IRQn         = 16, /* DMA Channel6 global interrupt */
  DMA1_Channel7_IRQn         = 17, /* DMA Channel7 global interrupt */
  ADC1_2_IRQn                = 18, /* ADC1/ADC2 interrupt, combined with EXTI24/EXTI25 */
  USB_HP_CAN_TX_IRQn         = 19, /* USB high priority/CAN Tx interrupt */
  USB_LP_CAN_RX0_IRQn        = 20, /* USB low priority/CAN Rx0 interrupt */
  CAN_RX1_IRQn               = 21, /* CAN Rx1 interrupt */
  CAN_SCE_IRQn               = 22, /* CAN SCE interrupt */
  EXTI9_5_IRQn               = 23, /* EXTI Line[9:5] interrupt */
  TIM1_BRK_IRQn              = 24, /* TIM1 break interrupt */
  TIM1_UP_IRQn               = 25, /* TIM1 update interrupt */
  TIM1_TRG_COM_IRQn          = 26, /* TIM1 trigger and COM interrupt */
  TIM1_CC_IRQn               = 27, /* TIM1 Capture/Compare interrupt */
  TIM2_IRQn                  = 28, /* TIM2 global interrupt */
  TIM3_IRQn                  = 29, /* TIM3 global interrupt */
  TIM4_IRQn                  = 30, /* TIM4 global interrupt */
  I2C1_EV_IRQn               = 31, /* I2C1 event interrupt */
  I2C1_ER_IRQn               = 32, /* I2C1 fault interrupt */
  I2C2_EV_IRQn               = 33, /* I2C2 event interrupt */
  I2C2_ER_IRQn               = 34, /* I2C2 fault interrupt */
  SPI1_IRQn                  = 35, /* SPI1 global interrupt */
  SPI2_IRQn                  = 36, /* SPI2 global interrupt */
  USART1_IRQn                = 37, /* USART1 global interrupt */
  USART2_IRQn                = 38, /* USART2 global interrupt */
  USART3_IRQn                = 39, /* USART3 global interrupt */
  EXTI15_10_IRQn             = 40, /* EXTI Line[15:10] interrupt */
  RTCAlarm_IRQn              = 41, /* RTC alarm or wakeup timer through EXTI Line 17 interrupt */
  USBWakeUp_IRQn             = 42, /* USB standby wake-up through EXTI Line 18 interrupt */
  TIM8_BRK_IRQn              = 43, /* TIM8 break interrupt */
  TIM8_UP_IRQn               = 44, /* TIM8 update interrupt */
  TIM8_TRG_COM_IRQn          = 45, /* TIM8 trigger and COM interrupt */
  TIM8_CC_IRQn               = 46, /* TIM8 Capture/Compare interrupt */
  ADC3_IRQn                  = 47, /* ADC3 global interrupt */
  FSMC_IRQn                  = 48, /* FSMC global interrupt */
  SDIO_IRQn                  = 49, /* SDIO global interrupt */
  TIM5_IRQn                  = 50, /* TIM5 global interrupt */
  SPI3_IRQn                  = 51, /* SPI3 global interrupt */
  UART4_IRQn                 = 52, /* UART4 global interrupt */
  UART5_IRQn                 = 53, /* UART5 global interrupt */
  TIM6_IRQn                  = 54, /* TIM6 global interrupt */
  TIM7_IRQn                  = 55, /* TIM7 global interrupt */
  DMA2_Channel1_IRQn         = 56, /* DMA2 Channel1 global interrupt */
  DMA2_Channel2_IRQn         = 57, /* DMA2 Channel2 global interrupt */
  DMA2_Channel3_IRQn         = 58, /* DMA2 Channel3 global interrupt */
  DMA2_Channel4_5_IRQn       = 59, /* DMA2 Channel4/5 global interrupt */
}IRQn_Type;
/*****************************************************************************************
*                         Processor and Core Peripheral Section                          *
*****************************************************************************************/
#define __CM3_REV                            0x0000                             /* Core Revision */
#define __NVIC_PRIO_BITS                     3                                  /* Number of Bits used for Priority Levels */
#define __Vendor_SysTickConfig               0                                  /* Set to 1 if different SysTick Config is used */
#define __MPU_PRESENT                        0                                  /* MPU present */
#define __FPU_PRESENT                        0                                  /* FPU present */
#define __MCU_ENDIAN                         little                             /* MCU endian */

#include "core_cm3.h"                        /* ARM Cortex-M3 processor and core peripherals */
#include "system_hk32f103xxxxa.h"           /* hk32f103xxxxa System */

#ifndef __IM                                 /* Fallback for older CMSIS versions */
  #define __IM   __I
#endif
#ifndef __OM                                 /* Fallback for older CMSIS versions */
  #define __OM   __O
#endif
#ifndef __IOM                                /* Fallback for older CMSIS versions */
  #define __IOM  __IO
#endif

/*****************************************************************************************
*                        Start of section using anonymous unions                         *
*****************************************************************************************/
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;

/*****************************************************************************************
*                                    Peripheral FLASH                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t ACR;                    /* ACR */
  __O  uint32_t KEYR;                   /* KEYR */
  __O  uint32_t OPTKEYR;                /* OPTKEYR */
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t CR;                     /* CR */
  __O  uint32_t AR;                     /* AR */
       uint16_t RESERVED1[2];
  __I  uint32_t OBR;                    /* OBR */
  __I  uint32_t WRPR;                   /* WRPR */
       uint16_t RESERVED2[30];
  __IO uint32_t LATENCY_EX;             /* LATENCY_EX */
       uint16_t RESERVED3[6];
  __IO uint32_t ECR;                    /* ECR */
       uint16_t RESERVED4[2];
  __IO uint32_t ENCRY_CFG;              /* ENCRY_CFG */
  __IO uint32_t DECRY_CFG;              /* DECRY_CFG */
  __IO uint32_t UKEYL;                  /* UKEYL */
  __IO uint32_t UKEYH;                  /* UKEYH */
       uint16_t RESERVED5[4];
  __IO uint32_t PW0;                    /* PW0 */
  __IO uint32_t PW1;                    /* PW1 */
  __IO uint32_t PW2;                    /* PW2 */
  __IO uint32_t PW3;                    /* PW3 */
}FLASH_TypeDef;

/************************************* FLASH->ACR  **************************************/
#define FLASH_ACR_PRFTBS_Pos                  ((uint32_t)5)                     /* Prefetch buffer status */
#define FLASH_ACR_PRFTBS_Mask                 (((uint32_t)0x01) << 5)
#define FLASH_ACR_PRFTBS                      FLASH_ACR_PRFTBS_Mask
#define FLASH_ACR_PRFTBE_Pos                  ((uint32_t)4)                     /* Prefetch buffer enable */
#define FLASH_ACR_PRFTBE_Mask                 (((uint32_t)0x01) << 4)
#define FLASH_ACR_PRFTBE                      FLASH_ACR_PRFTBE_Mask
#define FLASH_ACR_HLFCYA_Pos                  ((uint32_t)3)                     /* Flash half cycle access enable */
#define FLASH_ACR_HLFCYA_Mask                 (((uint32_t)0x01) << 3)
#define FLASH_ACR_HLFCYA                      FLASH_ACR_HLFCYA_Mask
#define FLASH_ACR_LATENCY_Pos                 ((uint32_t)0)                     /* Latency */
#define FLASH_ACR_LATENCY_Mask                (((uint32_t)0x07) << 0)
#define FLASH_ACR_LATENCY                     FLASH_ACR_LATENCY_Mask
#define FLASH_ACR_LATENCY_0                   (((uint32_t)0x1))
#define FLASH_ACR_LATENCY_1                   (((uint32_t)0x2))
#define FLASH_ACR_LATENCY_2                   (((uint32_t)0x4))

/************************************ FLASH->KEYR  **************************************/
#define FLASH_KEYR_FKEYR_Pos                  ((uint32_t)0)                     /* Flash key */
#define FLASH_KEYR_FKEYR_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_KEYR_FKEYR                      FLASH_KEYR_FKEYR_Mask

/*********************************** FLASH->OPTKEYR  ************************************/
#define FLASH_OPTKEYR_OPTKEY_Pos              ((uint32_t)0)                     /* Option byte key */
#define FLASH_OPTKEYR_OPTKEY_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_OPTKEYR_OPTKEY                  FLASH_OPTKEYR_OPTKEY_Mask

/************************************* FLASH->SR  ***************************************/
#define FLASH_SR_EOP_Pos                      ((uint32_t)5)                     /* End of operation */
#define FLASH_SR_EOP_Mask                     (((uint32_t)0x01) << 5)
#define FLASH_SR_EOP                          FLASH_SR_EOP_Mask
#define FLASH_SR_WRPRTERR_Pos                 ((uint32_t)4)                     /* Write protection error */
#define FLASH_SR_WRPRTERR_Mask                (((uint32_t)0x01) << 4)
#define FLASH_SR_WRPRTERR                     FLASH_SR_WRPRTERR_Mask
#define FLASH_SR_PGERR_Pos                    ((uint32_t)2)                     /* Programming error */
#define FLASH_SR_PGERR_Mask                   (((uint32_t)0x01) << 2)
#define FLASH_SR_PGERR                        FLASH_SR_PGERR_Mask
#define FLASH_SR_BSY_Pos                      ((uint32_t)0)                     /* Busy */
#define FLASH_SR_BSY_Mask                     (((uint32_t)0x01) << 0)
#define FLASH_SR_BSY                          FLASH_SR_BSY_Mask

/************************************* FLASH->CR  ***************************************/
#define FLASH_CR_EOPIE_Pos                    ((uint32_t)12)                    /* End of operation interrupt enable */
#define FLASH_CR_EOPIE_Mask                   (((uint32_t)0x01) << 12)
#define FLASH_CR_EOPIE                        FLASH_CR_EOPIE_Mask
#define FLASH_CR_ERRIE_Pos                    ((uint32_t)10)                    /* Error interrupt enable */
#define FLASH_CR_ERRIE_Mask                   (((uint32_t)0x01) << 10)
#define FLASH_CR_ERRIE                        FLASH_CR_ERRIE_Mask
#define FLASH_CR_OPTWRE_Pos                   ((uint32_t)9)                     /* Option byte write enable */
#define FLASH_CR_OPTWRE_Mask                  (((uint32_t)0x01) << 9)
#define FLASH_CR_OPTWRE                       FLASH_CR_OPTWRE_Mask
#define FLASH_CR_LOCK_Pos                     ((uint32_t)7)                     /* Lock */
#define FLASH_CR_LOCK_Mask                    (((uint32_t)0x01) << 7)
#define FLASH_CR_LOCK                         FLASH_CR_LOCK_Mask
#define FLASH_CR_STRT_Pos                     ((uint32_t)6)                     /* Start */
#define FLASH_CR_STRT_Mask                    (((uint32_t)0x01) << 6)
#define FLASH_CR_STRT                         FLASH_CR_STRT_Mask
#define FLASH_CR_OPTER_Pos                    ((uint32_t)5)                     /* Option byte page erase */
#define FLASH_CR_OPTER_Mask                   (((uint32_t)0x01) << 5)
#define FLASH_CR_OPTER                        FLASH_CR_OPTER_Mask
#define FLASH_CR_OPTPG_Pos                    ((uint32_t)4)                     /* Option byte programming */
#define FLASH_CR_OPTPG_Mask                   (((uint32_t)0x01) << 4)
#define FLASH_CR_OPTPG                        FLASH_CR_OPTPG_Mask
#define FLASH_CR_MER_Pos                      ((uint32_t)2)                     /* Mass erase */
#define FLASH_CR_MER_Mask                     (((uint32_t)0x01) << 2)
#define FLASH_CR_MER                          FLASH_CR_MER_Mask
#define FLASH_CR_PER_Pos                      ((uint32_t)1)                     /* Page erase */
#define FLASH_CR_PER_Mask                     (((uint32_t)0x01) << 1)
#define FLASH_CR_PER                          FLASH_CR_PER_Mask
#define FLASH_CR_PG_Pos                       ((uint32_t)0)                     /* Half-word programming */
#define FLASH_CR_PG_Mask                      (((uint32_t)0x01) << 0)
#define FLASH_CR_PG                           FLASH_CR_PG_Mask

/************************************* FLASH->AR  ***************************************/
#define FLASH_AR_FAR_Pos                      ((uint32_t)0)                     /* Flash Address */
#define FLASH_AR_FAR_Mask                     (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_AR_FAR                          FLASH_AR_FAR_Mask

/************************************* FLASH->OBR  **************************************/
#define FLASH_OBR_Data1_Pos                   ((uint32_t)18)                    /* User Data */
#define FLASH_OBR_Data1_Mask                  (((uint32_t)0xFF) << 18)
#define FLASH_OBR_Data1                       FLASH_OBR_Data1_Mask
#define FLASH_OBR_Data1_0                     (((uint32_t)0x1 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_1                     (((uint32_t)0x2 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_2                     (((uint32_t)0x4 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_3                     (((uint32_t)0x8 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_4                     (((uint32_t)0x10 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_5                     (((uint32_t)0x20 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_6                     (((uint32_t)0x40 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data1_7                     (((uint32_t)0x80 << FLASH_OBR_Data1_Pos))
#define FLASH_OBR_Data0_Pos                   ((uint32_t)10)                    /* User Data */
#define FLASH_OBR_Data0_Mask                  (((uint32_t)0xFF) << 10)
#define FLASH_OBR_Data0                       FLASH_OBR_Data0_Mask
#define FLASH_OBR_Data0_0                     (((uint32_t)0x1 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_1                     (((uint32_t)0x2 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_2                     (((uint32_t)0x4 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_3                     (((uint32_t)0x8 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_4                     (((uint32_t)0x10 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_5                     (((uint32_t)0x20 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_6                     (((uint32_t)0x40 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_Data0_7                     (((uint32_t)0x80 << FLASH_OBR_Data0_Pos))
#define FLASH_OBR_nRST_STDBY_Pos              ((uint32_t)4)                     /* Generate a reset when entering Standby mode */
#define FLASH_OBR_nRST_STDBY_Mask             (((uint32_t)0x01) << 4)
#define FLASH_OBR_nRST_STDBY                  FLASH_OBR_nRST_STDBY_Mask
#define FLASH_OBR_nRST_STOP_Pos               ((uint32_t)3)                     /* Generate a reset when entering Stop mode */
#define FLASH_OBR_nRST_STOP_Mask              (((uint32_t)0x01) << 3)
#define FLASH_OBR_nRST_STOP                   FLASH_OBR_nRST_STOP_Mask
#define FLASH_OBR_WDG_SW_Pos                  ((uint32_t)2)                     /* Hardware or software watchdog selection */
#define FLASH_OBR_WDG_SW_Mask                 (((uint32_t)0x01) << 2)
#define FLASH_OBR_WDG_SW                      FLASH_OBR_WDG_SW_Mask
#define FLASH_OBR_RDPRT_Pos                   ((uint32_t)1)                     /* Read protection */
#define FLASH_OBR_RDPRT_Mask                  (((uint32_t)0x01) << 1)
#define FLASH_OBR_RDPRT                       FLASH_OBR_RDPRT_Mask
#define FLASH_OBR_OPTERR_Pos                  ((uint32_t)0)                     /* Option byte error */
#define FLASH_OBR_OPTERR_Mask                 (((uint32_t)0x01) << 0)
#define FLASH_OBR_OPTERR                      FLASH_OBR_OPTERR_Mask

/************************************ FLASH->WRPR  **************************************/
#define FLASH_WRPR_WRP_Pos                    ((uint32_t)0)                     /* Write protection */
#define FLASH_WRPR_WRP_Mask                   (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_WRPR_WRP                        FLASH_WRPR_WRP_Mask

/********************************* FLASH->LATENCY_EX  ***********************************/
#define FLASH_LATENCY_EX_LATENCY_Pos          ((uint32_t)0)                     /* Latency control  */
#define FLASH_LATENCY_EX_LATENCY_Mask         (((uint32_t)0x03) << 0)
#define FLASH_LATENCY_EX_LATENCY              FLASH_LATENCY_EX_LATENCY_Mask
#define FLASH_LATENCY_EX_LATENCY_0            (((uint32_t)0x1))
#define FLASH_LATENCY_EX_LATENCY_1            (((uint32_t)0x2))

/************************************* FLASH->ECR  **************************************/
#define FLASH_ECR_4WPG_Pos                    ((uint32_t)3)                     /* 4-Word programming in main Flash memory */
#define FLASH_ECR_4WPG_Mask                   (((uint32_t)0x01) << 3)
#define FLASH_ECR_4WPG                        FLASH_ECR_4WPG_Mask
#define FLASH_ECR_2WPG_Pos                    ((uint32_t)2)                     /* 2-Word programming in main Flash memory */
#define FLASH_ECR_2WPG_Mask                   (((uint32_t)0x01) << 2)
#define FLASH_ECR_2WPG                        FLASH_ECR_2WPG_Mask
#define FLASH_ECR_WPG_Pos                     ((uint32_t)1)                     /* Word programming in main Flash memory */
#define FLASH_ECR_WPG_Mask                    (((uint32_t)0x01) << 1)
#define FLASH_ECR_WPG                         FLASH_ECR_WPG_Mask
#define FLASH_ECR_HPER_Pos                    ((uint32_t)0)                     /* Half-page erasing in main Flash memory */
#define FLASH_ECR_HPER_Mask                   (((uint32_t)0x01) << 0)
#define FLASH_ECR_HPER                        FLASH_ECR_HPER_Mask

/********************************** FLASH->ENCRY_CFG  ***********************************/
#define FLASH_ENCRY_CFG_ENCRY_EN_Pos          ((uint32_t)0)                     /* Encryption enable in main flash memory */
#define FLASH_ENCRY_CFG_ENCRY_EN_Mask         (((uint32_t)0x01) << 0)
#define FLASH_ENCRY_CFG_ENCRY_EN              FLASH_ENCRY_CFG_ENCRY_EN_Mask

/********************************** FLASH->DECRY_CFG  ***********************************/
#define FLASH_DECRY_CFG_DECRY_EN_Pos          ((uint32_t)0)                     /* Decryption enable in main flash memory */
#define FLASH_DECRY_CFG_DECRY_EN_Mask         (((uint32_t)0x01) << 0)
#define FLASH_DECRY_CFG_DECRY_EN              FLASH_DECRY_CFG_DECRY_EN_Mask

/************************************ FLASH->UKEYL  *************************************/
#define FLASH_UKEYL_UKEY_Pos                  ((uint32_t)0)                     /* Low 32-bit user key for Flash data encryption */
#define FLASH_UKEYL_UKEY_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_UKEYL_UKEY                      FLASH_UKEYL_UKEY_Mask

/************************************ FLASH->UKEYH  *************************************/
#define FLASH_UKEYH_UKEY_Pos                  ((uint32_t)0)                     /* High 32-bit user key for Flash data encryption */
#define FLASH_UKEYH_UKEY_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_UKEYH_UKEY                      FLASH_UKEYH_UKEY_Mask

/************************************* FLASH->PW0  **************************************/
#define FLASH_PW0_PW0_Pos                     ((uint32_t)0)                     /* Storing the programmed data when programming in 2-word or 4-word */
#define FLASH_PW0_PW0_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_PW0_PW0                         FLASH_PW0_PW0_Mask

/************************************* FLASH->PW1  **************************************/
#define FLASH_PW1_PW1_Pos                     ((uint32_t)0)                     /* Storing the programmed data when programming in 2-word or 4-word */
#define FLASH_PW1_PW1_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_PW1_PW1                         FLASH_PW1_PW1_Mask

/************************************* FLASH->PW2  **************************************/
#define FLASH_PW2_PW2_Pos                     ((uint32_t)0)                     /* Storing the programmed data when programming in 2-word or 4-word */
#define FLASH_PW2_PW2_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_PW2_PW2                         FLASH_PW2_PW2_Mask

/************************************* FLASH->PW3  **************************************/
#define FLASH_PW3_PW3_Pos                     ((uint32_t)0)                     /* Storing the programmed data when programming in 2-word or 4-word */
#define FLASH_PW3_PW3_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_PW3_PW3                         FLASH_PW3_PW3_Mask

/*****************************************************************************************
*                                    Peripheral CACHE                                    *
*****************************************************************************************/
typedef struct{
       uint16_t RESERVED1[104];
  __IO uint32_t CTL;                    /* CTL */
  __IO uint32_t HIT_CNT_H;              /* HIT_CNT_H */
  __IO uint32_t HIT_CNT_L;              /* HIT_CNT_L */
  __IO uint32_t MISS_CNT_H;             /* MISS_CNT_H */
  __IO uint32_t MISS_CNT_L;             /* MISS_CNT_L */
}CACHE_TypeDef;

/************************************* CACHE->CTL  **************************************/
#define CACHE_CTL_PR_CNT_CLR_Pos              ((uint32_t)13)                    /* Clear the Cache hit counter */
#define CACHE_CTL_PR_CNT_CLR_Mask             (((uint32_t)0x01) << 13)
#define CACHE_CTL_PR_CNT_CLR                  CACHE_CTL_PR_CNT_CLR_Mask
#define CACHE_CTL_PR_CNT_EN_Pos               ((uint32_t)12)                    /* Enable the Cache hit counter */
#define CACHE_CTL_PR_CNT_EN_Mask              (((uint32_t)0x01) << 12)
#define CACHE_CTL_PR_CNT_EN                   CACHE_CTL_PR_CNT_EN_Mask
#define CACHE_CTL_FLUSH_Pos                   ((uint32_t)11)                    /* Clear the content of Cache */
#define CACHE_CTL_FLUSH_Mask                  (((uint32_t)0x01) << 11)
#define CACHE_CTL_FLUSH                       CACHE_CTL_FLUSH_Mask
#define CACHE_CTL_PE_FLUSH_EN_Pos             ((uint32_t)10)                    /* Clear the content of Cache when programming or erasing Flash */
#define CACHE_CTL_PE_FLUSH_EN_Mask            (((uint32_t)0x01) << 10)
#define CACHE_CTL_PE_FLUSH_EN                 CACHE_CTL_PE_FLUSH_EN_Mask
#define CACHE_CTL_IV_CACHE_EN_Pos             ((uint32_t)8)                     /* NVIC table cache enable */
#define CACHE_CTL_IV_CACHE_EN_Mask            (((uint32_t)0x01) << 8)
#define CACHE_CTL_IV_CACHE_EN                 CACHE_CTL_IV_CACHE_EN_Mask
#define CACHE_CTL_FSMC_CACHE_EN_Pos           ((uint32_t)1)                     /* Flash instructions accessed by Cache through the FSMC interface enable */
#define CACHE_CTL_FSMC_CACHE_EN_Mask          (((uint32_t)0x01) << 1)
#define CACHE_CTL_FSMC_CACHE_EN               CACHE_CTL_FSMC_CACHE_EN_Mask
#define CACHE_CTL_ICACHE_EN_Pos               ((uint32_t)0)                     /* Flash instructions accessed by Cache through the I-Bus interface enable */
#define CACHE_CTL_ICACHE_EN_Mask              (((uint32_t)0x01) << 0)
#define CACHE_CTL_ICACHE_EN                   CACHE_CTL_ICACHE_EN_Mask

/********************************** CACHE->HIT_CNT_H  ***********************************/
#define CACHE_HIT_CNT_H_HIT_CNT_Pos           ((uint32_t)0)                     /* Hit counter value 55 to 32 bit */
#define CACHE_HIT_CNT_H_HIT_CNT_Mask          (((uint32_t)0xFFFFFF) << 0)
#define CACHE_HIT_CNT_H_HIT_CNT               CACHE_HIT_CNT_H_HIT_CNT_Mask

/********************************** CACHE->HIT_CNT_L  ***********************************/
#define CACHE_HIT_CNT_L_HIT_CNT_Pos           ((uint32_t)0)                     /* Hit counter value 0 to 31 bit */
#define CACHE_HIT_CNT_L_HIT_CNT_Mask          (((uint32_t)0xFFFFFFFF) << 0)
#define CACHE_HIT_CNT_L_HIT_CNT               CACHE_HIT_CNT_L_HIT_CNT_Mask

/********************************* CACHE->MISS_CNT_H  ***********************************/
#define CACHE_MISS_CNT_H_MISS_CNT_Pos         ((uint32_t)0)                     /* Miss counter value 55 to 32 bit */
#define CACHE_MISS_CNT_H_MISS_CNT_Mask        (((uint32_t)0xFFFFFF) << 0)
#define CACHE_MISS_CNT_H_MISS_CNT             CACHE_MISS_CNT_H_MISS_CNT_Mask

/********************************* CACHE->MISS_CNT_L  ***********************************/
#define CACHE_MISS_CNT_L_MISS_CNT_Pos         ((uint32_t)0)                     /* MISS counter value 0 to 31 bit */
#define CACHE_MISS_CNT_L_MISS_CNT_Mask        (((uint32_t)0xFFFFFFFF) << 0)
#define CACHE_MISS_CNT_L_MISS_CNT             CACHE_MISS_CNT_L_MISS_CNT_Mask

/*****************************************************************************************
*                                     Peripheral CRC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t IDR;                    /* IDR */
  __O  uint32_t CR;                     /* CR */
}CRC_TypeDef;

/************************************** CRC->DR  ****************************************/
#define CRC_DR_DR_Pos                         ((uint32_t)0)                     /* Data register */
#define CRC_DR_DR_Mask                        (((uint32_t)0xFFFFFFFF) << 0)
#define CRC_DR_DR                             CRC_DR_DR_Mask

/************************************** CRC->IDR  ***************************************/
#define CRC_IDR_IDR_Pos                       ((uint32_t)0)                     /* General purpose 8-bit data register */
#define CRC_IDR_IDR_Mask                      (((uint32_t)0xFF) << 0)
#define CRC_IDR_IDR                           CRC_IDR_IDR_Mask
#define CRC_IDR_IDR_0                         (((uint32_t)0x1))
#define CRC_IDR_IDR_1                         (((uint32_t)0x2))
#define CRC_IDR_IDR_2                         (((uint32_t)0x4))
#define CRC_IDR_IDR_3                         (((uint32_t)0x8))
#define CRC_IDR_IDR_4                         (((uint32_t)0x10))
#define CRC_IDR_IDR_5                         (((uint32_t)0x20))
#define CRC_IDR_IDR_6                         (((uint32_t)0x40))
#define CRC_IDR_IDR_7                         (((uint32_t)0x80))

/************************************** CRC->CR  ****************************************/
#define CRC_CR_RESET_Pos                      ((uint32_t)0)                     /* Reset control */
#define CRC_CR_RESET_Mask                     (((uint32_t)0x01) << 0)
#define CRC_CR_RESET                          CRC_CR_RESET_Mask

/*****************************************************************************************
*                                     Peripheral PWR                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CSR;                    /* CSR */
       uint16_t RESERVED1[22];
  __IO uint32_t WUP_POL;                /* WUP_POL */
}PWR_TypeDef;

/************************************** PWR->CR  ****************************************/
#define PWR_CR_DBP_Pos                        ((uint32_t)8)                     /* Disable RTC domain write protection */
#define PWR_CR_DBP_Mask                       (((uint32_t)0x01) << 8)
#define PWR_CR_DBP                            PWR_CR_DBP_Mask
#define PWR_CR_PLS_Pos                        ((uint32_t)5)                     /* PVD level selection */
#define PWR_CR_PLS_Mask                       (((uint32_t)0x07) << 5)
#define PWR_CR_PLS                            PWR_CR_PLS_Mask
#define PWR_CR_PLS_0                          (((uint32_t)0x1 << PWR_CR_PLS_Pos))
#define PWR_CR_PLS_1                          (((uint32_t)0x2 << PWR_CR_PLS_Pos))
#define PWR_CR_PLS_2                          (((uint32_t)0x4 << PWR_CR_PLS_Pos))
#define PWR_CR_PVDE_Pos                       ((uint32_t)4)                     /* Power voltage detector enable */
#define PWR_CR_PVDE_Mask                      (((uint32_t)0x01) << 4)
#define PWR_CR_PVDE                           PWR_CR_PVDE_Mask
#define PWR_CR_CSBF_Pos                       ((uint32_t)3)                     /* Clear standby flag */
#define PWR_CR_CSBF_Mask                      (((uint32_t)0x01) << 3)
#define PWR_CR_CSBF                           PWR_CR_CSBF_Mask
#define PWR_CR_CWUF_Pos                       ((uint32_t)2)                     /* Clear wakeup flag */
#define PWR_CR_CWUF_Mask                      (((uint32_t)0x01) << 2)
#define PWR_CR_CWUF                           PWR_CR_CWUF_Mask
#define PWR_CR_PDDS_Pos                       ((uint32_t)1)                     /* Power down deep sleep */
#define PWR_CR_PDDS_Mask                      (((uint32_t)0x01) << 1)
#define PWR_CR_PDDS                           PWR_CR_PDDS_Mask
#define PWR_CR_LPDS_Pos                       ((uint32_t)0)                     /* Low-power deep sleep */
#define PWR_CR_LPDS_Mask                      (((uint32_t)0x01) << 0)
#define PWR_CR_LPDS                           PWR_CR_LPDS_Mask

/************************************** PWR->CSR  ***************************************/
#define PWR_CSR_EWUP3_Pos                     ((uint32_t)10)                    /* Enable WKUP3 pin */
#define PWR_CSR_EWUP3_Mask                    (((uint32_t)0x01) << 10)
#define PWR_CSR_EWUP3                         PWR_CSR_EWUP3_Mask
#define PWR_CSR_EWUP2_Pos                     ((uint32_t)9)                     /* Enable WKUP2 pin */
#define PWR_CSR_EWUP2_Mask                    (((uint32_t)0x01) << 9)
#define PWR_CSR_EWUP2                         PWR_CSR_EWUP2_Mask
#define PWR_CSR_EWUP1_Pos                     ((uint32_t)8)                     /* Enable WKUP1 pin */
#define PWR_CSR_EWUP1_Mask                    (((uint32_t)0x01) << 8)
#define PWR_CSR_EWUP1                         PWR_CSR_EWUP1_Mask
#define PWR_CSR_LDORDY_Pos                    ((uint32_t)3)                     /* LDO ready flag */
#define PWR_CSR_LDORDY_Mask                   (((uint32_t)0x01) << 3)
#define PWR_CSR_LDORDY                        PWR_CSR_LDORDY_Mask
#define PWR_CSR_PVDO_Pos                      ((uint32_t)2)                     /* PVD output */
#define PWR_CSR_PVDO_Mask                     (((uint32_t)0x01) << 2)
#define PWR_CSR_PVDO                          PWR_CSR_PVDO_Mask
#define PWR_CSR_SBF_Pos                       ((uint32_t)1)                     /* Standby flag */
#define PWR_CSR_SBF_Mask                      (((uint32_t)0x01) << 1)
#define PWR_CSR_SBF                           PWR_CSR_SBF_Mask
#define PWR_CSR_WUF_Pos                       ((uint32_t)0)                     /* Wakeup flag */
#define PWR_CSR_WUF_Mask                      (((uint32_t)0x01) << 0)
#define PWR_CSR_WUF                           PWR_CSR_WUF_Mask

/************************************ PWR->WUP_POL  *************************************/
#define PWR_WUP_POL_WUPOL3_Pos                ((uint32_t)2)                     /* Wakeup pin 3 polarity selection */
#define PWR_WUP_POL_WUPOL3_Mask               (((uint32_t)0x01) << 2)
#define PWR_WUP_POL_WUPOL3                    PWR_WUP_POL_WUPOL3_Mask
#define PWR_WUP_POL_WUPOL2_Pos                ((uint32_t)1)                     /* Wakeup pin 2 polarity selection */
#define PWR_WUP_POL_WUPOL2_Mask               (((uint32_t)0x01) << 1)
#define PWR_WUP_POL_WUPOL2                    PWR_WUP_POL_WUPOL2_Mask
#define PWR_WUP_POL_WUPOL1_Pos                ((uint32_t)0)                     /* Wakeup pin 1 polarity selection */
#define PWR_WUP_POL_WUPOL1_Mask               (((uint32_t)0x01) << 0)
#define PWR_WUP_POL_WUPOL1                    PWR_WUP_POL_WUPOL1_Mask

/*****************************************************************************************
*                                     Peripheral BKP                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t DR0;                    /* DR0 */
  __IO uint32_t DR1;                    /* DR1 */
  __IO uint32_t DR2;                    /* DR2 */
  __IO uint32_t DR3;                    /* DR3 */
  __IO uint32_t DR4;                    /* DR4 */
  __IO uint32_t DR5;                    /* DR5 */
  __IO uint32_t DR6;                    /* DR6 */
  __IO uint32_t DR7;                    /* DR7 */
  __IO uint32_t DR8;                    /* DR8 */
  __IO uint32_t DR9;                    /* DR9 */
  __IO uint32_t DR10;                   /* DR10 */
  __IO uint32_t RTCCR;                  /* RTCCR */
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CSR;                    /* CSR */
  __IO uint32_t WUTCR;                  /* WUTCR */
  __IO uint32_t LSE_CTL;                /* LSE_CTL */
  __IO uint32_t RAM11;                  /* RAM11 */
  __IO uint32_t RAM12;                  /* RAM12 */
  __IO uint32_t RAM13;                  /* RAM13 */
  __IO uint32_t RAM14;                  /* RAM14 */
  __IO uint32_t RAM15;                  /* RAM15 */
  __IO uint32_t RAM16;                  /* RAM16 */
  __IO uint32_t RAM17;                  /* RAM17 */
  __IO uint32_t RAM18;                  /* RAM18 */
  __IO uint32_t RAM19;                  /* RAM19 */
  __IO uint32_t RAM20;                  /* RAM20 */
  __IO uint32_t RAM21;                  /* RAM21 */
  __IO uint32_t RAM22;                  /* RAM22 */
  __IO uint32_t RAM23;                  /* RAM23 */
  __IO uint32_t RAM24;                  /* RAM24 */
  __IO uint32_t RAM25;                  /* RAM25 */
  __IO uint32_t RAM26;                  /* RAM26 */
  __IO uint32_t RAM27;                  /* RAM27 */
  __IO uint32_t RAM28;                  /* RAM28 */
  __IO uint32_t RAM29;                  /* RAM29 */
  __IO uint32_t RAM30;                  /* RAM30 */
  __IO uint32_t RAM31;                  /* RAM31 */
  __IO uint32_t RAM32;                  /* RAM32 */
  __IO uint32_t RAM33;                  /* RAM33 */
  __IO uint32_t RAM34;                  /* RAM34 */
  __IO uint32_t RAM35;                  /* RAM35 */
  __IO uint32_t RAM36;                  /* RAM36 */
  __IO uint32_t RAM37;                  /* RAM37 */
  __IO uint32_t RAM38;                  /* RAM38 */
  __IO uint32_t RAM39;                  /* RAM39 */
  __IO uint32_t RAM40;                  /* RAM40 */
  __IO uint32_t RAM41;                  /* RAM41 */
  __IO uint32_t RAM42;                  /* RAM42 */
}BKP_TypeDef;

/************************************** BKP->DR0  ***************************************/
#define BKP_DR0_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR0_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR0_D                             BKP_DR0_D_Mask

/************************************** BKP->DR1  ***************************************/
#define BKP_DR1_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR1_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR1_D                             BKP_DR1_D_Mask

/************************************** BKP->DR2  ***************************************/
#define BKP_DR2_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR2_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR2_D                             BKP_DR2_D_Mask

/************************************** BKP->DR3  ***************************************/
#define BKP_DR3_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR3_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR3_D                             BKP_DR3_D_Mask

/************************************** BKP->DR4  ***************************************/
#define BKP_DR4_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR4_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR4_D                             BKP_DR4_D_Mask

/************************************** BKP->DR5  ***************************************/
#define BKP_DR5_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR5_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR5_D                             BKP_DR5_D_Mask

/************************************** BKP->DR6  ***************************************/
#define BKP_DR6_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR6_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR6_D                             BKP_DR6_D_Mask

/************************************** BKP->DR7  ***************************************/
#define BKP_DR7_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR7_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR7_D                             BKP_DR7_D_Mask

/************************************** BKP->DR8  ***************************************/
#define BKP_DR8_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR8_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR8_D                             BKP_DR8_D_Mask

/************************************** BKP->DR9  ***************************************/
#define BKP_DR9_D_Pos                         ((uint32_t)0)                     /* Backup data */
#define BKP_DR9_D_Mask                        (((uint32_t)0xFFFF) << 0)
#define BKP_DR9_D                             BKP_DR9_D_Mask

/************************************* BKP->DR10  ***************************************/
#define BKP_DR10_D_Pos                        ((uint32_t)0)                     /* Backup data */
#define BKP_DR10_D_Mask                       (((uint32_t)0xFFFF) << 0)
#define BKP_DR10_D                            BKP_DR10_D_Mask

/************************************* BKP->RTCCR  **************************************/
#define BKP_RTCCR_ASOS_Pos                    ((uint32_t)9)                     /* Alarm or second output selection */
#define BKP_RTCCR_ASOS_Mask                   (((uint32_t)0x01) << 9)
#define BKP_RTCCR_ASOS                        BKP_RTCCR_ASOS_Mask
#define BKP_RTCCR_ASOE_Pos                    ((uint32_t)8)                     /* Alarm or second output enable */
#define BKP_RTCCR_ASOE_Mask                   (((uint32_t)0x01) << 8)
#define BKP_RTCCR_ASOE                        BKP_RTCCR_ASOE_Mask
#define BKP_RTCCR_CCO_Pos                     ((uint32_t)7)                     /* Calibrated clock output */
#define BKP_RTCCR_CCO_Mask                    (((uint32_t)0x01) << 7)
#define BKP_RTCCR_CCO                         BKP_RTCCR_CCO_Mask
#define BKP_RTCCR_CAL_Pos                     ((uint32_t)0)                     /* Calibration value */
#define BKP_RTCCR_CAL_Mask                    (((uint32_t)0x7F) << 0)
#define BKP_RTCCR_CAL                         BKP_RTCCR_CAL_Mask
#define BKP_RTCCR_CAL_0                       (((uint32_t)0x1))
#define BKP_RTCCR_CAL_1                       (((uint32_t)0x2))
#define BKP_RTCCR_CAL_2                       (((uint32_t)0x4))
#define BKP_RTCCR_CAL_3                       (((uint32_t)0x8))
#define BKP_RTCCR_CAL_4                       (((uint32_t)0x10))
#define BKP_RTCCR_CAL_5                       (((uint32_t)0x20))
#define BKP_RTCCR_CAL_6                       (((uint32_t)0x40))

/************************************** BKP->CR  ****************************************/
#define BKP_CR_TPAL_Pos                       ((uint32_t)1)                     /* Effective level on the TAMPER pin */
#define BKP_CR_TPAL_Mask                      (((uint32_t)0x01) << 1)
#define BKP_CR_TPAL                           BKP_CR_TPAL_Mask
#define BKP_CR_TPE_Pos                        ((uint32_t)0)                     /* Enable the Tamper function on the TAMPER pin */
#define BKP_CR_TPE_Mask                       (((uint32_t)0x01) << 0)
#define BKP_CR_TPE                            BKP_CR_TPE_Mask

/************************************** BKP->CSR  ***************************************/
#define BKP_CSR_TIF_Pos                       ((uint32_t)9)                     /* Tamper interrupt flag */
#define BKP_CSR_TIF_Mask                      (((uint32_t)0x01) << 9)
#define BKP_CSR_TIF                           BKP_CSR_TIF_Mask
#define BKP_CSR_TEF_Pos                       ((uint32_t)8)                     /* Tamper event flag */
#define BKP_CSR_TEF_Mask                      (((uint32_t)0x01) << 8)
#define BKP_CSR_TEF                           BKP_CSR_TEF_Mask
#define BKP_CSR_TPIE_Pos                      ((uint32_t)2)                     /* TAMPER interrupt detection enable */
#define BKP_CSR_TPIE_Mask                     (((uint32_t)0x01) << 2)
#define BKP_CSR_TPIE                          BKP_CSR_TPIE_Mask
#define BKP_CSR_CTI_Pos                       ((uint32_t)1)                     /* TAMPER interrupt detection flag clear */
#define BKP_CSR_CTI_Mask                      (((uint32_t)0x01) << 1)
#define BKP_CSR_CTI                           BKP_CSR_CTI_Mask
#define BKP_CSR_CTE_Pos                       ((uint32_t)0)                     /* TAMPER event detection flag clear */
#define BKP_CSR_CTE_Mask                      (((uint32_t)0x01) << 0)
#define BKP_CSR_CTE                           BKP_CSR_CTE_Mask

/************************************* BKP->WUTCR  **************************************/
#define BKP_WUTCR_WUTE_Pos                    ((uint32_t)15)                    /* Wakeup timer enable */
#define BKP_WUTCR_WUTE_Mask                   (((uint32_t)0x01) << 15)
#define BKP_WUTCR_WUTE                        BKP_WUTCR_WUTE_Mask
#define BKP_WUTCR_WUTO_Pos                    ((uint32_t)8)                     /* The output of wakeup timer selection */
#define BKP_WUTCR_WUTO_Mask                   (((uint32_t)0x0F) << 8)
#define BKP_WUTCR_WUTO                        BKP_WUTCR_WUTO_Mask
#define BKP_WUTCR_WUTO_0                      (((uint32_t)0x1 << BKP_WUTCR_WUTO_Pos))
#define BKP_WUTCR_WUTO_1                      (((uint32_t)0x2 << BKP_WUTCR_WUTO_Pos))
#define BKP_WUTCR_WUTO_2                      (((uint32_t)0x4 << BKP_WUTCR_WUTO_Pos))
#define BKP_WUTCR_WUTO_3                      (((uint32_t)0x8 << BKP_WUTCR_WUTO_Pos))
#define BKP_WUTCR_WUCKSEL_Pos                 ((uint32_t)0)                     /* The clock of wakeup timer selection */
#define BKP_WUTCR_WUCKSEL_Mask                (((uint32_t)0x07) << 0)
#define BKP_WUTCR_WUCKSEL                     BKP_WUTCR_WUCKSEL_Mask
#define BKP_WUTCR_WUCKSEL_0                   (((uint32_t)0x1))
#define BKP_WUTCR_WUCKSEL_1                   (((uint32_t)0x2))
#define BKP_WUTCR_WUCKSEL_2                   (((uint32_t)0x4))

/************************************ BKP->LSE_CTL  *************************************/
#define BKP_LSE_CTL_AGC_EN_Pos                ((uint32_t)15)                    /* LSE AGC automatic gain circuit enable */
#define BKP_LSE_CTL_AGC_EN_Mask               (((uint32_t)0x01) << 15)
#define BKP_LSE_CTL_AGC_EN                    BKP_LSE_CTL_AGC_EN_Mask
#define BKP_LSE_CTL_SEL_AGC_Pos               ((uint32_t)8)                     /* The gain capacity of AGC automatic gain circuit */
#define BKP_LSE_CTL_SEL_AGC_Mask              (((uint32_t)0x03) << 8)
#define BKP_LSE_CTL_SEL_AGC                   BKP_LSE_CTL_SEL_AGC_Mask
#define BKP_LSE_CTL_SEL_AGC_0                 (((uint32_t)0x1 << BKP_LSE_CTL_SEL_AGC_Pos))
#define BKP_LSE_CTL_SEL_AGC_1                 (((uint32_t)0x2 << BKP_LSE_CTL_SEL_AGC_Pos))
#define BKP_LSE_CTL_AUTO_IOP_Pos              ((uint32_t)7)                     /* LSE driven capacity setting  */
#define BKP_LSE_CTL_AUTO_IOP_Mask             (((uint32_t)0x01) << 7)
#define BKP_LSE_CTL_AUTO_IOP                  BKP_LSE_CTL_AUTO_IOP_Mask
#define BKP_LSE_CTL_NFBYP_Pos                 ((uint32_t)6)                     /* LSE signal handled by the on-chip noise filter */
#define BKP_LSE_CTL_NFBYP_Mask                (((uint32_t)0x01) << 6)
#define BKP_LSE_CTL_NFBYP                     BKP_LSE_CTL_NFBYP_Mask
#define BKP_LSE_CTL_IOP_MON_Pos               ((uint32_t)3)                     /* IOP detector */
#define BKP_LSE_CTL_IOP_MON_Mask              (((uint32_t)0x03) << 3)
#define BKP_LSE_CTL_IOP_MON                   BKP_LSE_CTL_IOP_MON_Mask
#define BKP_LSE_CTL_IOP_MON_0                 (((uint32_t)0x1 << BKP_LSE_CTL_IOP_MON_Pos))
#define BKP_LSE_CTL_IOP_MON_1                 (((uint32_t)0x2 << BKP_LSE_CTL_IOP_MON_Pos))
#define BKP_LSE_CTL_IOP_Pos                   ((uint32_t)0)                     /* LSE driven capacity selection */
#define BKP_LSE_CTL_IOP_Mask                  (((uint32_t)0x03) << 0)
#define BKP_LSE_CTL_IOP                       BKP_LSE_CTL_IOP_Mask
#define BKP_LSE_CTL_IOP_0                     (((uint32_t)0x1))
#define BKP_LSE_CTL_IOP_1                     (((uint32_t)0x2))

/************************************* BKP->RAM11  **************************************/
#define BKP_RAM11_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM11_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM11_D                           BKP_RAM11_D_Mask

/************************************* BKP->RAM12  **************************************/
#define BKP_RAM12_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM12_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM12_D                           BKP_RAM12_D_Mask

/************************************* BKP->RAM13  **************************************/
#define BKP_RAM13_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM13_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM13_D                           BKP_RAM13_D_Mask

/************************************* BKP->RAM14  **************************************/
#define BKP_RAM14_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM14_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM14_D                           BKP_RAM14_D_Mask

/************************************* BKP->RAM15  **************************************/
#define BKP_RAM15_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM15_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM15_D                           BKP_RAM15_D_Mask

/************************************* BKP->RAM16  **************************************/
#define BKP_RAM16_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM16_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM16_D                           BKP_RAM16_D_Mask

/************************************* BKP->RAM17  **************************************/
#define BKP_RAM17_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM17_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM17_D                           BKP_RAM17_D_Mask

/************************************* BKP->RAM18  **************************************/
#define BKP_RAM18_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM18_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM18_D                           BKP_RAM18_D_Mask

/************************************* BKP->RAM19  **************************************/
#define BKP_RAM19_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM19_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM19_D                           BKP_RAM19_D_Mask

/************************************* BKP->RAM20  **************************************/
#define BKP_RAM20_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM20_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM20_D                           BKP_RAM20_D_Mask

/************************************* BKP->RAM21  **************************************/
#define BKP_RAM21_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM21_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM21_D                           BKP_RAM21_D_Mask

/************************************* BKP->RAM22  **************************************/
#define BKP_RAM22_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM22_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM22_D                           BKP_RAM22_D_Mask

/************************************* BKP->RAM23  **************************************/
#define BKP_RAM23_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM23_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM23_D                           BKP_RAM23_D_Mask

/************************************* BKP->RAM24  **************************************/
#define BKP_RAM24_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM24_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM24_D                           BKP_RAM24_D_Mask

/************************************* BKP->RAM25  **************************************/
#define BKP_RAM25_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM25_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM25_D                           BKP_RAM25_D_Mask

/************************************* BKP->RAM26  **************************************/
#define BKP_RAM26_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM26_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM26_D                           BKP_RAM26_D_Mask

/************************************* BKP->RAM27  **************************************/
#define BKP_RAM27_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM27_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM27_D                           BKP_RAM27_D_Mask

/************************************* BKP->RAM28  **************************************/
#define BKP_RAM28_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM28_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM28_D                           BKP_RAM28_D_Mask

/************************************* BKP->RAM29  **************************************/
#define BKP_RAM29_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM29_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM29_D                           BKP_RAM29_D_Mask

/************************************* BKP->RAM30  **************************************/
#define BKP_RAM30_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM30_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM30_D                           BKP_RAM30_D_Mask

/************************************* BKP->RAM31  **************************************/
#define BKP_RAM31_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM31_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM31_D                           BKP_RAM31_D_Mask

/************************************* BKP->RAM32  **************************************/
#define BKP_RAM32_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM32_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM32_D                           BKP_RAM32_D_Mask

/************************************* BKP->RAM33  **************************************/
#define BKP_RAM33_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM33_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM33_D                           BKP_RAM33_D_Mask

/************************************* BKP->RAM34  **************************************/
#define BKP_RAM34_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM34_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM34_D                           BKP_RAM34_D_Mask

/************************************* BKP->RAM35  **************************************/
#define BKP_RAM35_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM35_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM35_D                           BKP_RAM35_D_Mask

/************************************* BKP->RAM36  **************************************/
#define BKP_RAM36_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM36_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM36_D                           BKP_RAM36_D_Mask

/************************************* BKP->RAM37  **************************************/
#define BKP_RAM37_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM37_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM37_D                           BKP_RAM37_D_Mask

/************************************* BKP->RAM38  **************************************/
#define BKP_RAM38_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM38_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM38_D                           BKP_RAM38_D_Mask

/************************************* BKP->RAM39  **************************************/
#define BKP_RAM39_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM39_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM39_D                           BKP_RAM39_D_Mask

/************************************* BKP->RAM40  **************************************/
#define BKP_RAM40_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM40_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM40_D                           BKP_RAM40_D_Mask

/************************************* BKP->RAM41  **************************************/
#define BKP_RAM41_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM41_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM41_D                           BKP_RAM41_D_Mask

/************************************* BKP->RAM42  **************************************/
#define BKP_RAM42_D_Pos                       ((uint32_t)0)                     /* Backup data */
#define BKP_RAM42_D_Mask                      (((uint32_t)0xFFFF) << 0)
#define BKP_RAM42_D                           BKP_RAM42_D_Mask

/*****************************************************************************************
*                                     Peripheral RCC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CFGR;                   /* CFGR */
  __IO uint32_t CIR;                    /* CIR */
  __IO uint32_t APB2RSTR;               /* APB2RSTR */
  __IO uint32_t APB1RSTR;               /* APB1RSTR */
  __IO uint32_t AHBENR;                 /* AHBENR */
  __IO uint32_t APB2ENR;                /* APB2ENR */
  __IO uint32_t APB1ENR;                /* APB1ENR */
  __IO uint32_t BDCR;                   /* BDCR */
  __IO uint32_t CSR;                    /* CSR */
       uint16_t RESERVED1[2];
  __IO uint32_t CFGR2;                  /* CFGR2 */
  __IO uint32_t CFGR3;                  /* CFGR3 */
  __IO uint32_t CR2;                    /* CR2 */
       uint16_t RESERVED2[84];
  __IO uint32_t HSECTL;                 /* HSECTL */
  __IO uint32_t PLLCTL;                 /* PLLCTL */
  __IO uint32_t CFGR4;                  /* CFGR4 */
  __IO uint32_t CFGR5;                  /* CFGR5 */
       uint16_t RESERVED3[14];
  __IO uint32_t AHBRST2;                /* AHBRST2 */
  __IO uint32_t AHBRST3;                /* AHBRST3 */
       uint16_t RESERVED4[4];
  __IO uint32_t LSICTL;                 /* LSICTL */
}RCC_TypeDef;

/************************************** RCC->CR  ****************************************/
#define RCC_CR_PLLRDY_Pos                     ((uint32_t)25)                    /* PLL clock ready flag */
#define RCC_CR_PLLRDY_Mask                    (((uint32_t)0x01) << 25)
#define RCC_CR_PLLRDY                         RCC_CR_PLLRDY_Mask
#define RCC_CR_PLLON_Pos                      ((uint32_t)24)                    /* PLL enable */
#define RCC_CR_PLLON_Mask                     (((uint32_t)0x01) << 24)
#define RCC_CR_PLLON                          RCC_CR_PLLON_Mask
#define RCC_CR_CSSON_Pos                      ((uint32_t)19)                    /* Clock security system enable */
#define RCC_CR_CSSON_Mask                     (((uint32_t)0x01) << 19)
#define RCC_CR_CSSON                          RCC_CR_CSSON_Mask
#define RCC_CR_HSEBYP_Pos                     ((uint32_t)18)                    /* HSE crystal oscillator bypass */
#define RCC_CR_HSEBYP_Mask                    (((uint32_t)0x01) << 18)
#define RCC_CR_HSEBYP                         RCC_CR_HSEBYP_Mask
#define RCC_CR_HSERDY_Pos                     ((uint32_t)17)                    /* HSE clock ready flag */
#define RCC_CR_HSERDY_Mask                    (((uint32_t)0x01) << 17)
#define RCC_CR_HSERDY                         RCC_CR_HSERDY_Mask
#define RCC_CR_HSEON_Pos                      ((uint32_t)16)                    /* HSE clock enable */
#define RCC_CR_HSEON_Mask                     (((uint32_t)0x01) << 16)
#define RCC_CR_HSEON                          RCC_CR_HSEON_Mask
#define RCC_CR_HSICAL_Pos                     ((uint32_t)8)                     /* HSI clock calibration */
#define RCC_CR_HSICAL_Mask                    (((uint32_t)0xFF) << 8)
#define RCC_CR_HSICAL                         RCC_CR_HSICAL_Mask
#define RCC_CR_HSICAL_0                       (((uint32_t)0x1 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_1                       (((uint32_t)0x2 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_2                       (((uint32_t)0x4 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_3                       (((uint32_t)0x8 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_4                       (((uint32_t)0x10 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_5                       (((uint32_t)0x20 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_6                       (((uint32_t)0x40 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_7                       (((uint32_t)0x80 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSITRIM_Pos                    ((uint32_t)3)                     /* HSI clock trimming */
#define RCC_CR_HSITRIM_Mask                   (((uint32_t)0x1F) << 3)
#define RCC_CR_HSITRIM                        RCC_CR_HSITRIM_Mask
#define RCC_CR_HSITRIM_0                      (((uint32_t)0x1 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_1                      (((uint32_t)0x2 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_2                      (((uint32_t)0x4 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_3                      (((uint32_t)0x8 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_4                      (((uint32_t)0x10 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSIRDY_Pos                     ((uint32_t)1)                     /* HSI clock ready flag */
#define RCC_CR_HSIRDY_Mask                    (((uint32_t)0x01) << 1)
#define RCC_CR_HSIRDY                         RCC_CR_HSIRDY_Mask
#define RCC_CR_HSION_Pos                      ((uint32_t)0)                     /* HSI clock enable */
#define RCC_CR_HSION_Mask                     (((uint32_t)0x01) << 0)
#define RCC_CR_HSION                          RCC_CR_HSION_Mask

/************************************* RCC->CFGR  ***************************************/
#define RCC_CFGR_MCO_Pos                      ((uint32_t)24)                    /* Microcontroller clock output */
#define RCC_CFGR_MCO_Mask                     (((uint32_t)0x07) << 24)
#define RCC_CFGR_MCO                          RCC_CFGR_MCO_Mask
#define RCC_CFGR_MCO_0                        (((uint32_t)0x1 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_1                        (((uint32_t)0x2 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_2                        (((uint32_t)0x4 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_USBPRE_Pos                   ((uint32_t)22)                    /* USB prescaler */
#define RCC_CFGR_USBPRE_Mask                  (((uint32_t)0x01) << 22)
#define RCC_CFGR_USBPRE                       RCC_CFGR_USBPRE_Mask
#define RCC_CFGR_PLLMULL_Pos                  ((uint32_t)18)                    /* PLL multiplication factor */
#define RCC_CFGR_PLLMULL_Mask                 (((uint32_t)0x0F) << 18)
#define RCC_CFGR_PLLMULL                      RCC_CFGR_PLLMULL_Mask
#define RCC_CFGR_PLLMULL_0                    (((uint32_t)0x1 << RCC_CFGR_PLLMULL_Pos))
#define RCC_CFGR_PLLMULL_1                    (((uint32_t)0x2 << RCC_CFGR_PLLMULL_Pos))
#define RCC_CFGR_PLLMULL_2                    (((uint32_t)0x4 << RCC_CFGR_PLLMULL_Pos))
#define RCC_CFGR_PLLMULL_3                    (((uint32_t)0x8 << RCC_CFGR_PLLMULL_Pos))
#define RCC_CFGR_PLLXTPRE_Pos                 ((uint32_t)17)                    /* HSE divider for PLL input clock */
#define RCC_CFGR_PLLXTPRE_Mask                (((uint32_t)0x01) << 17)
#define RCC_CFGR_PLLXTPRE                     RCC_CFGR_PLLXTPRE_Mask
#define RCC_CFGR_PLLSRC_Pos                   ((uint32_t)16)                    /* PLL input clock source */
#define RCC_CFGR_PLLSRC_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CFGR_PLLSRC                       RCC_CFGR_PLLSRC_Mask
#define RCC_CFGR_ADCPRE_Pos                   ((uint32_t)14)                    /* ADC prescaler */
#define RCC_CFGR_ADCPRE_Mask                  (((uint32_t)0x03) << 14)
#define RCC_CFGR_ADCPRE                       RCC_CFGR_ADCPRE_Mask
#define RCC_CFGR_ADCPRE_0                     (((uint32_t)0x1 << RCC_CFGR_ADCPRE_Pos))
#define RCC_CFGR_ADCPRE_1                     (((uint32_t)0x2 << RCC_CFGR_ADCPRE_Pos))
#define RCC_CFGR_PPRE2_Pos                    ((uint32_t)11)                    /* APB2 prescaler */
#define RCC_CFGR_PPRE2_Mask                   (((uint32_t)0x07) << 11)
#define RCC_CFGR_PPRE2                        RCC_CFGR_PPRE2_Mask
#define RCC_CFGR_PPRE2_0                      (((uint32_t)0x1 << RCC_CFGR_PPRE2_Pos))
#define RCC_CFGR_PPRE2_1                      (((uint32_t)0x2 << RCC_CFGR_PPRE2_Pos))
#define RCC_CFGR_PPRE2_2                      (((uint32_t)0x4 << RCC_CFGR_PPRE2_Pos))
#define RCC_CFGR_PPRE1_Pos                    ((uint32_t)8)                     /* APB1 prescaler */
#define RCC_CFGR_PPRE1_Mask                   (((uint32_t)0x07) << 8)
#define RCC_CFGR_PPRE1                        RCC_CFGR_PPRE1_Mask
#define RCC_CFGR_PPRE1_0                      (((uint32_t)0x1 << RCC_CFGR_PPRE1_Pos))
#define RCC_CFGR_PPRE1_1                      (((uint32_t)0x2 << RCC_CFGR_PPRE1_Pos))
#define RCC_CFGR_PPRE1_2                      (((uint32_t)0x4 << RCC_CFGR_PPRE1_Pos))
#define RCC_CFGR_HPRE_Pos                     ((uint32_t)4)                     /* HCLK prescaler factor */
#define RCC_CFGR_HPRE_Mask                    (((uint32_t)0x0F) << 4)
#define RCC_CFGR_HPRE                         RCC_CFGR_HPRE_Mask
#define RCC_CFGR_HPRE_0                       (((uint32_t)0x1 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_1                       (((uint32_t)0x2 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_2                       (((uint32_t)0x4 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_3                       (((uint32_t)0x8 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_SWS_Pos                      ((uint32_t)2)                     /* System clock source status */
#define RCC_CFGR_SWS_Mask                     (((uint32_t)0x03) << 2)
#define RCC_CFGR_SWS                          RCC_CFGR_SWS_Mask
#define RCC_CFGR_SWS_0                        (((uint32_t)0x1 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SWS_1                        (((uint32_t)0x2 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SW_Pos                       ((uint32_t)0)                     /* System clock switch */
#define RCC_CFGR_SW_Mask                      (((uint32_t)0x03) << 0)
#define RCC_CFGR_SW                           RCC_CFGR_SW_Mask
#define RCC_CFGR_SW_0                         (((uint32_t)0x1))
#define RCC_CFGR_SW_1                         (((uint32_t)0x2))

/************************************** RCC->CIR  ***************************************/
#define RCC_CIR_CSSC_Pos                      ((uint32_t)23)                    /* Clock security system interrupt flag clear */
#define RCC_CIR_CSSC_Mask                     (((uint32_t)0x01) << 23)
#define RCC_CIR_CSSC                          RCC_CIR_CSSC_Mask
#define RCC_CIR_PLLRDYC_Pos                   ((uint32_t)20)                    /* PLL ready interrupt clear */
#define RCC_CIR_PLLRDYC_Mask                  (((uint32_t)0x01) << 20)
#define RCC_CIR_PLLRDYC                       RCC_CIR_PLLRDYC_Mask
#define RCC_CIR_HSERDYC_Pos                   ((uint32_t)19)                    /* HSE ready interrupt clear */
#define RCC_CIR_HSERDYC_Mask                  (((uint32_t)0x01) << 19)
#define RCC_CIR_HSERDYC                       RCC_CIR_HSERDYC_Mask
#define RCC_CIR_HSIRDYC_Pos                   ((uint32_t)18)                    /* HSI ready interrupt clear */
#define RCC_CIR_HSIRDYC_Mask                  (((uint32_t)0x01) << 18)
#define RCC_CIR_HSIRDYC                       RCC_CIR_HSIRDYC_Mask
#define RCC_CIR_LSERDYC_Pos                   ((uint32_t)17)                    /* LSE ready interrupt clear */
#define RCC_CIR_LSERDYC_Mask                  (((uint32_t)0x01) << 17)
#define RCC_CIR_LSERDYC                       RCC_CIR_LSERDYC_Mask
#define RCC_CIR_LSIRDYC_Pos                   ((uint32_t)16)                    /* LSI ready interrupt clear */
#define RCC_CIR_LSIRDYC_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CIR_LSIRDYC                       RCC_CIR_LSIRDYC_Mask
#define RCC_CIR_PLLRDYIE_Pos                  ((uint32_t)12)                    /* PLL ready interrupt enable */
#define RCC_CIR_PLLRDYIE_Mask                 (((uint32_t)0x01) << 12)
#define RCC_CIR_PLLRDYIE                      RCC_CIR_PLLRDYIE_Mask
#define RCC_CIR_HSERDYIE_Pos                  ((uint32_t)11)                    /* HSE ready interrupt enable */
#define RCC_CIR_HSERDYIE_Mask                 (((uint32_t)0x01) << 11)
#define RCC_CIR_HSERDYIE                      RCC_CIR_HSERDYIE_Mask
#define RCC_CIR_HSIRDYIE_Pos                  ((uint32_t)10)                    /* HSI ready interrupt enable */
#define RCC_CIR_HSIRDYIE_Mask                 (((uint32_t)0x01) << 10)
#define RCC_CIR_HSIRDYIE                      RCC_CIR_HSIRDYIE_Mask
#define RCC_CIR_LSERDYIE_Pos                  ((uint32_t)9)                     /* LSE ready interrupt enable */
#define RCC_CIR_LSERDYIE_Mask                 (((uint32_t)0x01) << 9)
#define RCC_CIR_LSERDYIE                      RCC_CIR_LSERDYIE_Mask
#define RCC_CIR_LSIRDYIE_Pos                  ((uint32_t)8)                     /* LSI ready interrupt enable */
#define RCC_CIR_LSIRDYIE_Mask                 (((uint32_t)0x01) << 8)
#define RCC_CIR_LSIRDYIE                      RCC_CIR_LSIRDYIE_Mask
#define RCC_CIR_CSSF_Pos                      ((uint32_t)7)                     /* Clock security system interrupt flag */
#define RCC_CIR_CSSF_Mask                     (((uint32_t)0x01) << 7)
#define RCC_CIR_CSSF                          RCC_CIR_CSSF_Mask
#define RCC_CIR_PLLRDYF_Pos                   ((uint32_t)4)                     /* PLL ready interrupt flag */
#define RCC_CIR_PLLRDYF_Mask                  (((uint32_t)0x01) << 4)
#define RCC_CIR_PLLRDYF                       RCC_CIR_PLLRDYF_Mask
#define RCC_CIR_HSERDYF_Pos                   ((uint32_t)3)                     /* HSE ready interrupt flag */
#define RCC_CIR_HSERDYF_Mask                  (((uint32_t)0x01) << 3)
#define RCC_CIR_HSERDYF                       RCC_CIR_HSERDYF_Mask
#define RCC_CIR_HSIRDYF_Pos                   ((uint32_t)2)                     /* HSI ready interrupt flag */
#define RCC_CIR_HSIRDYF_Mask                  (((uint32_t)0x01) << 2)
#define RCC_CIR_HSIRDYF                       RCC_CIR_HSIRDYF_Mask
#define RCC_CIR_LSERDYF_Pos                   ((uint32_t)1)                     /* LSE ready interrupt flag */
#define RCC_CIR_LSERDYF_Mask                  (((uint32_t)0x01) << 1)
#define RCC_CIR_LSERDYF                       RCC_CIR_LSERDYF_Mask
#define RCC_CIR_LSIRDYF_Pos                   ((uint32_t)0)                     /* LSI ready interrupt flag */
#define RCC_CIR_LSIRDYF_Mask                  (((uint32_t)0x01) << 0)
#define RCC_CIR_LSIRDYF                       RCC_CIR_LSIRDYF_Mask

/*********************************** RCC->APB2RSTR  *************************************/
#define RCC_APB2RSTR_ADC3RST_Pos              ((uint32_t)15)                    /* Reset ADC3 interface */
#define RCC_APB2RSTR_ADC3RST_Mask             (((uint32_t)0x01) << 15)
#define RCC_APB2RSTR_ADC3RST                  RCC_APB2RSTR_ADC3RST_Mask
#define RCC_APB2RSTR_USART1RST_Pos            ((uint32_t)14)                    /* Reset USART1 */
#define RCC_APB2RSTR_USART1RST_Mask           (((uint32_t)0x01) << 14)
#define RCC_APB2RSTR_USART1RST                RCC_APB2RSTR_USART1RST_Mask
#define RCC_APB2RSTR_TIM8RST_Pos              ((uint32_t)13)                    /* Reset TIM8 */
#define RCC_APB2RSTR_TIM8RST_Mask             (((uint32_t)0x01) << 13)
#define RCC_APB2RSTR_TIM8RST                  RCC_APB2RSTR_TIM8RST_Mask
#define RCC_APB2RSTR_SPI1RST_Pos              ((uint32_t)12)                    /* Reset SPI1 */
#define RCC_APB2RSTR_SPI1RST_Mask             (((uint32_t)0x01) << 12)
#define RCC_APB2RSTR_SPI1RST                  RCC_APB2RSTR_SPI1RST_Mask
#define RCC_APB2RSTR_TIM1RST_Pos              ((uint32_t)11)                    /* Reset TIM1 */
#define RCC_APB2RSTR_TIM1RST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APB2RSTR_TIM1RST                  RCC_APB2RSTR_TIM1RST_Mask
#define RCC_APB2RSTR_ADC2RST_Pos              ((uint32_t)10)                    /* Reset ADC2 interface */
#define RCC_APB2RSTR_ADC2RST_Mask             (((uint32_t)0x01) << 10)
#define RCC_APB2RSTR_ADC2RST                  RCC_APB2RSTR_ADC2RST_Mask
#define RCC_APB2RSTR_ADC1RST_Pos              ((uint32_t)9)                     /* Reset ADC1 interface */
#define RCC_APB2RSTR_ADC1RST_Mask             (((uint32_t)0x01) << 9)
#define RCC_APB2RSTR_ADC1RST                  RCC_APB2RSTR_ADC1RST_Mask
#define RCC_APB2RSTR_IOPERST_Pos              ((uint32_t)6)                     /* Reset IO E */
#define RCC_APB2RSTR_IOPERST_Mask             (((uint32_t)0x01) << 6)
#define RCC_APB2RSTR_IOPERST                  RCC_APB2RSTR_IOPERST_Mask
#define RCC_APB2RSTR_IOPDRST_Pos              ((uint32_t)5)                     /* Reset IO D */
#define RCC_APB2RSTR_IOPDRST_Mask             (((uint32_t)0x01) << 5)
#define RCC_APB2RSTR_IOPDRST                  RCC_APB2RSTR_IOPDRST_Mask
#define RCC_APB2RSTR_IOPCRST_Pos              ((uint32_t)4)                     /* Reset IO C */
#define RCC_APB2RSTR_IOPCRST_Mask             (((uint32_t)0x01) << 4)
#define RCC_APB2RSTR_IOPCRST                  RCC_APB2RSTR_IOPCRST_Mask
#define RCC_APB2RSTR_IOPBRST_Pos              ((uint32_t)3)                     /* Reset IO B */
#define RCC_APB2RSTR_IOPBRST_Mask             (((uint32_t)0x01) << 3)
#define RCC_APB2RSTR_IOPBRST                  RCC_APB2RSTR_IOPBRST_Mask
#define RCC_APB2RSTR_IOPARST_Pos              ((uint32_t)2)                     /* Reset IO A */
#define RCC_APB2RSTR_IOPARST_Mask             (((uint32_t)0x01) << 2)
#define RCC_APB2RSTR_IOPARST                  RCC_APB2RSTR_IOPARST_Mask
#define RCC_APB2RSTR_AFIORST_Pos              ((uint32_t)0)                     /* Reset AFIO */
#define RCC_APB2RSTR_AFIORST_Mask             (((uint32_t)0x01) << 0)
#define RCC_APB2RSTR_AFIORST                  RCC_APB2RSTR_AFIORST_Mask

/*********************************** RCC->APB1RSTR  *************************************/
#define RCC_APB1RSTR_DACRST_Pos               ((uint32_t)29)                    /* DAC interface reset */
#define RCC_APB1RSTR_DACRST_Mask              (((uint32_t)0x01) << 29)
#define RCC_APB1RSTR_DACRST                   RCC_APB1RSTR_DACRST_Mask
#define RCC_APB1RSTR_PWRRST_Pos               ((uint32_t)28)                    /* Power interface reset */
#define RCC_APB1RSTR_PWRRST_Mask              (((uint32_t)0x01) << 28)
#define RCC_APB1RSTR_PWRRST                   RCC_APB1RSTR_PWRRST_Mask
#define RCC_APB1RSTR_BKPRST_Pos               ((uint32_t)27)                    /* Backup interface reset */
#define RCC_APB1RSTR_BKPRST_Mask              (((uint32_t)0x01) << 27)
#define RCC_APB1RSTR_BKPRST                   RCC_APB1RSTR_BKPRST_Mask
#define RCC_APB1RSTR_CAN1RST_Pos              ((uint32_t)25)                    /* CAN1 reset */
#define RCC_APB1RSTR_CAN1RST_Mask             (((uint32_t)0x01) << 25)
#define RCC_APB1RSTR_CAN1RST                  RCC_APB1RSTR_CAN1RST_Mask
#define RCC_APB1RSTR_USBRST_Pos               ((uint32_t)23)                    /* USB reset */
#define RCC_APB1RSTR_USBRST_Mask              (((uint32_t)0x01) << 23)
#define RCC_APB1RSTR_USBRST                   RCC_APB1RSTR_USBRST_Mask
#define RCC_APB1RSTR_I2C2RST_Pos              ((uint32_t)22)                    /* I2C2 reset */
#define RCC_APB1RSTR_I2C2RST_Mask             (((uint32_t)0x01) << 22)
#define RCC_APB1RSTR_I2C2RST                  RCC_APB1RSTR_I2C2RST_Mask
#define RCC_APB1RSTR_I2C1RST_Pos              ((uint32_t)21)                    /* I2C1 reset */
#define RCC_APB1RSTR_I2C1RST_Mask             (((uint32_t)0x01) << 21)
#define RCC_APB1RSTR_I2C1RST                  RCC_APB1RSTR_I2C1RST_Mask
#define RCC_APB1RSTR_UART5RST_Pos             ((uint32_t)20)                    /* UART5 reset */
#define RCC_APB1RSTR_UART5RST_Mask            (((uint32_t)0x01) << 20)
#define RCC_APB1RSTR_UART5RST                 RCC_APB1RSTR_UART5RST_Mask
#define RCC_APB1RSTR_UART4RST_Pos             ((uint32_t)19)                    /* UART4 reset */
#define RCC_APB1RSTR_UART4RST_Mask            (((uint32_t)0x01) << 19)
#define RCC_APB1RSTR_UART4RST                 RCC_APB1RSTR_UART4RST_Mask
#define RCC_APB1RSTR_USART3RST_Pos            ((uint32_t)18)                    /* USART3 reset */
#define RCC_APB1RSTR_USART3RST_Mask           (((uint32_t)0x01) << 18)
#define RCC_APB1RSTR_USART3RST                RCC_APB1RSTR_USART3RST_Mask
#define RCC_APB1RSTR_USART2RST_Pos            ((uint32_t)17)                    /* USART2 reset */
#define RCC_APB1RSTR_USART2RST_Mask           (((uint32_t)0x01) << 17)
#define RCC_APB1RSTR_USART2RST                RCC_APB1RSTR_USART2RST_Mask
#define RCC_APB1RSTR_SPI3RST_Pos              ((uint32_t)15)                    /* SPI3 reset */
#define RCC_APB1RSTR_SPI3RST_Mask             (((uint32_t)0x01) << 15)
#define RCC_APB1RSTR_SPI3RST                  RCC_APB1RSTR_SPI3RST_Mask
#define RCC_APB1RSTR_SPI2RST_Pos              ((uint32_t)14)                    /* SPI2 reset */
#define RCC_APB1RSTR_SPI2RST_Mask             (((uint32_t)0x01) << 14)
#define RCC_APB1RSTR_SPI2RST                  RCC_APB1RSTR_SPI2RST_Mask
#define RCC_APB1RSTR_WWDGRST_Pos              ((uint32_t)11)                    /* Window watchdog reset */
#define RCC_APB1RSTR_WWDGRST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APB1RSTR_WWDGRST                  RCC_APB1RSTR_WWDGRST_Mask
#define RCC_APB1RSTR_TIM7RST_Pos              ((uint32_t)5)                     /* Timer7 reset */
#define RCC_APB1RSTR_TIM7RST_Mask             (((uint32_t)0x01) << 5)
#define RCC_APB1RSTR_TIM7RST                  RCC_APB1RSTR_TIM7RST_Mask
#define RCC_APB1RSTR_TIM6RST_Pos              ((uint32_t)4)                     /* Timer6 reset */
#define RCC_APB1RSTR_TIM6RST_Mask             (((uint32_t)0x01) << 4)
#define RCC_APB1RSTR_TIM6RST                  RCC_APB1RSTR_TIM6RST_Mask
#define RCC_APB1RSTR_TIM5RST_Pos              ((uint32_t)3)                     /* Timer5 reset */
#define RCC_APB1RSTR_TIM5RST_Mask             (((uint32_t)0x01) << 3)
#define RCC_APB1RSTR_TIM5RST                  RCC_APB1RSTR_TIM5RST_Mask
#define RCC_APB1RSTR_TIM4RST_Pos              ((uint32_t)2)                     /* Timer4 reset */
#define RCC_APB1RSTR_TIM4RST_Mask             (((uint32_t)0x01) << 2)
#define RCC_APB1RSTR_TIM4RST                  RCC_APB1RSTR_TIM4RST_Mask
#define RCC_APB1RSTR_TIM3RST_Pos              ((uint32_t)1)                     /* Timer3 reset */
#define RCC_APB1RSTR_TIM3RST_Mask             (((uint32_t)0x01) << 1)
#define RCC_APB1RSTR_TIM3RST                  RCC_APB1RSTR_TIM3RST_Mask
#define RCC_APB1RSTR_TIM2RST_Pos              ((uint32_t)0)                     /* Timer2 reset */
#define RCC_APB1RSTR_TIM2RST_Mask             (((uint32_t)0x01) << 0)
#define RCC_APB1RSTR_TIM2RST                  RCC_APB1RSTR_TIM2RST_Mask

/************************************ RCC->AHBENR  **************************************/
#define RCC_AHBENR_SDIOEN_Pos                 ((uint32_t)10)                    /* SDIO clock enable */
#define RCC_AHBENR_SDIOEN_Mask                (((uint32_t)0x01) << 10)
#define RCC_AHBENR_SDIOEN                     RCC_AHBENR_SDIOEN_Mask
#define RCC_AHBENR_FSMCEN_Pos                 ((uint32_t)8)                     /* FSMC clock enable */
#define RCC_AHBENR_FSMCEN_Mask                (((uint32_t)0x01) << 8)
#define RCC_AHBENR_FSMCEN                     RCC_AHBENR_FSMCEN_Mask
#define RCC_AHBENR_CRCEN_Pos                  ((uint32_t)6)                     /* CRC clock enable */
#define RCC_AHBENR_CRCEN_Mask                 (((uint32_t)0x01) << 6)
#define RCC_AHBENR_CRCEN                      RCC_AHBENR_CRCEN_Mask
#define RCC_AHBENR_FLITFEN_Pos                ((uint32_t)4)                     /* FLITF clock enable */
#define RCC_AHBENR_FLITFEN_Mask               (((uint32_t)0x01) << 4)
#define RCC_AHBENR_FLITFEN                    RCC_AHBENR_FLITFEN_Mask
#define RCC_AHBENR_SRAMEN_Pos                 ((uint32_t)2)                     /* SRAM interface clock enable */
#define RCC_AHBENR_SRAMEN_Mask                (((uint32_t)0x01) << 2)
#define RCC_AHBENR_SRAMEN                     RCC_AHBENR_SRAMEN_Mask
#define RCC_AHBENR_DMA2EN_Pos                 ((uint32_t)1)                     /* DMA2 clock enable */
#define RCC_AHBENR_DMA2EN_Mask                (((uint32_t)0x01) << 1)
#define RCC_AHBENR_DMA2EN                     RCC_AHBENR_DMA2EN_Mask
#define RCC_AHBENR_DMA1EN_Pos                 ((uint32_t)0)                     /* DMA1 clock enable */
#define RCC_AHBENR_DMA1EN_Mask                (((uint32_t)0x01) << 0)
#define RCC_AHBENR_DMA1EN                     RCC_AHBENR_DMA1EN_Mask

/************************************ RCC->APB2ENR  *************************************/
#define RCC_APB2ENR_ADC3EN_Pos                ((uint32_t)15)                    /* ADC3 interface clock enable */
#define RCC_APB2ENR_ADC3EN_Mask               (((uint32_t)0x01) << 15)
#define RCC_APB2ENR_ADC3EN                    RCC_APB2ENR_ADC3EN_Mask
#define RCC_APB2ENR_USART1EN_Pos              ((uint32_t)14)                    /* USART1 clock enable */
#define RCC_APB2ENR_USART1EN_Mask             (((uint32_t)0x01) << 14)
#define RCC_APB2ENR_USART1EN                  RCC_APB2ENR_USART1EN_Mask
#define RCC_APB2ENR_TIM8EN_Pos                ((uint32_t)13)                    /* TIM8 clock enable */
#define RCC_APB2ENR_TIM8EN_Mask               (((uint32_t)0x01) << 13)
#define RCC_APB2ENR_TIM8EN                    RCC_APB2ENR_TIM8EN_Mask
#define RCC_APB2ENR_SPI1EN_Pos                ((uint32_t)12)                    /* SPI1 clock enable */
#define RCC_APB2ENR_SPI1EN_Mask               (((uint32_t)0x01) << 12)
#define RCC_APB2ENR_SPI1EN                    RCC_APB2ENR_SPI1EN_Mask
#define RCC_APB2ENR_TIM1EN_Pos                ((uint32_t)11)                    /* TIM1 Timer clock enable */
#define RCC_APB2ENR_TIM1EN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APB2ENR_TIM1EN                    RCC_APB2ENR_TIM1EN_Mask
#define RCC_APB2ENR_ADC2EN_Pos                ((uint32_t)10)                    /* ADC2 interface clock enable */
#define RCC_APB2ENR_ADC2EN_Mask               (((uint32_t)0x01) << 10)
#define RCC_APB2ENR_ADC2EN                    RCC_APB2ENR_ADC2EN_Mask
#define RCC_APB2ENR_ADC1EN_Pos                ((uint32_t)9)                     /* ADC1 interface clock enable */
#define RCC_APB2ENR_ADC1EN_Mask               (((uint32_t)0x01) << 9)
#define RCC_APB2ENR_ADC1EN                    RCC_APB2ENR_ADC1EN_Mask
#define RCC_APB2ENR_IOPEEN_Pos                ((uint32_t)6)                     /* I/O port E clock enable */
#define RCC_APB2ENR_IOPEEN_Mask               (((uint32_t)0x01) << 6)
#define RCC_APB2ENR_IOPEEN                    RCC_APB2ENR_IOPEEN_Mask
#define RCC_APB2ENR_IOPDEN_Pos                ((uint32_t)5)                     /* I/O port D clock enable */
#define RCC_APB2ENR_IOPDEN_Mask               (((uint32_t)0x01) << 5)
#define RCC_APB2ENR_IOPDEN                    RCC_APB2ENR_IOPDEN_Mask
#define RCC_APB2ENR_IOPCEN_Pos                ((uint32_t)4)                     /* I/O port C clock enable */
#define RCC_APB2ENR_IOPCEN_Mask               (((uint32_t)0x01) << 4)
#define RCC_APB2ENR_IOPCEN                    RCC_APB2ENR_IOPCEN_Mask
#define RCC_APB2ENR_IOPBEN_Pos                ((uint32_t)3)                     /* I/O port B clock enable */
#define RCC_APB2ENR_IOPBEN_Mask               (((uint32_t)0x01) << 3)
#define RCC_APB2ENR_IOPBEN                    RCC_APB2ENR_IOPBEN_Mask
#define RCC_APB2ENR_IOPAEN_Pos                ((uint32_t)2)                     /* I/O port A clock enable */
#define RCC_APB2ENR_IOPAEN_Mask               (((uint32_t)0x01) << 2)
#define RCC_APB2ENR_IOPAEN                    RCC_APB2ENR_IOPAEN_Mask
#define RCC_APB2ENR_AFIOEN_Pos                ((uint32_t)0)                     /* Alternate function I/O clock enable */
#define RCC_APB2ENR_AFIOEN_Mask               (((uint32_t)0x01) << 0)
#define RCC_APB2ENR_AFIOEN                    RCC_APB2ENR_AFIOEN_Mask

/************************************ RCC->APB1ENR  *************************************/
#define RCC_APB1ENR_DACEN_Pos                 ((uint32_t)29)                    /* DAC interface clock enable */
#define RCC_APB1ENR_DACEN_Mask                (((uint32_t)0x01) << 29)
#define RCC_APB1ENR_DACEN                     RCC_APB1ENR_DACEN_Mask
#define RCC_APB1ENR_PWREN_Pos                 ((uint32_t)28)                    /* Power interface clock enable */
#define RCC_APB1ENR_PWREN_Mask                (((uint32_t)0x01) << 28)
#define RCC_APB1ENR_PWREN                     RCC_APB1ENR_PWREN_Mask
#define RCC_APB1ENR_BKPEN_Pos                 ((uint32_t)27)                    /* Backup interface clock enable */
#define RCC_APB1ENR_BKPEN_Mask                (((uint32_t)0x01) << 27)
#define RCC_APB1ENR_BKPEN                     RCC_APB1ENR_BKPEN_Mask
#define RCC_APB1ENR_CAN1EN_Pos                ((uint32_t)25)                    /* CAN1 clock enable */
#define RCC_APB1ENR_CAN1EN_Mask               (((uint32_t)0x01) << 25)
#define RCC_APB1ENR_CAN1EN                    RCC_APB1ENR_CAN1EN_Mask
#define RCC_APB1ENR_USBEN_Pos                 ((uint32_t)23)                    /* USB clock enable */
#define RCC_APB1ENR_USBEN_Mask                (((uint32_t)0x01) << 23)
#define RCC_APB1ENR_USBEN                     RCC_APB1ENR_USBEN_Mask
#define RCC_APB1ENR_I2C2EN_Pos                ((uint32_t)22)                    /* I2C2 clock enable */
#define RCC_APB1ENR_I2C2EN_Mask               (((uint32_t)0x01) << 22)
#define RCC_APB1ENR_I2C2EN                    RCC_APB1ENR_I2C2EN_Mask
#define RCC_APB1ENR_I2C1EN_Pos                ((uint32_t)21)                    /* I2C1 clock enable */
#define RCC_APB1ENR_I2C1EN_Mask               (((uint32_t)0x01) << 21)
#define RCC_APB1ENR_I2C1EN                    RCC_APB1ENR_I2C1EN_Mask
#define RCC_APB1ENR_UART5EN_Pos               ((uint32_t)20)                    /* UART5 clock enable */
#define RCC_APB1ENR_UART5EN_Mask              (((uint32_t)0x01) << 20)
#define RCC_APB1ENR_UART5EN                   RCC_APB1ENR_UART5EN_Mask
#define RCC_APB1ENR_UART4EN_Pos               ((uint32_t)19)                    /* UART4 clock enable */
#define RCC_APB1ENR_UART4EN_Mask              (((uint32_t)0x01) << 19)
#define RCC_APB1ENR_UART4EN                   RCC_APB1ENR_UART4EN_Mask
#define RCC_APB1ENR_USART3EN_Pos              ((uint32_t)18)                    /* USART3 clock enable */
#define RCC_APB1ENR_USART3EN_Mask             (((uint32_t)0x01) << 18)
#define RCC_APB1ENR_USART3EN                  RCC_APB1ENR_USART3EN_Mask
#define RCC_APB1ENR_USART2EN_Pos              ((uint32_t)17)                    /* USART2 clock enable */
#define RCC_APB1ENR_USART2EN_Mask             (((uint32_t)0x01) << 17)
#define RCC_APB1ENR_USART2EN                  RCC_APB1ENR_USART2EN_Mask
#define RCC_APB1ENR_SPI3EN_Pos                ((uint32_t)15)                    /* SPI3 clock enable */
#define RCC_APB1ENR_SPI3EN_Mask               (((uint32_t)0x01) << 15)
#define RCC_APB1ENR_SPI3EN                    RCC_APB1ENR_SPI3EN_Mask
#define RCC_APB1ENR_SPI2EN_Pos                ((uint32_t)14)                    /* SPI2 clock enable */
#define RCC_APB1ENR_SPI2EN_Mask               (((uint32_t)0x01) << 14)
#define RCC_APB1ENR_SPI2EN                    RCC_APB1ENR_SPI2EN_Mask
#define RCC_APB1ENR_WWDGEN_Pos                ((uint32_t)11)                    /* Window watchdog clock enable */
#define RCC_APB1ENR_WWDGEN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APB1ENR_WWDGEN                    RCC_APB1ENR_WWDGEN_Mask
#define RCC_APB1ENR_TIM7EN_Pos                ((uint32_t)5)                     /* Timer7 clock enable */
#define RCC_APB1ENR_TIM7EN_Mask               (((uint32_t)0x01) << 5)
#define RCC_APB1ENR_TIM7EN                    RCC_APB1ENR_TIM7EN_Mask
#define RCC_APB1ENR_TIM6EN_Pos                ((uint32_t)4)                     /* Timer6 clock enable */
#define RCC_APB1ENR_TIM6EN_Mask               (((uint32_t)0x01) << 4)
#define RCC_APB1ENR_TIM6EN                    RCC_APB1ENR_TIM6EN_Mask
#define RCC_APB1ENR_TIM5EN_Pos                ((uint32_t)3)                     /* Timer5 clock enable */
#define RCC_APB1ENR_TIM5EN_Mask               (((uint32_t)0x01) << 3)
#define RCC_APB1ENR_TIM5EN                    RCC_APB1ENR_TIM5EN_Mask
#define RCC_APB1ENR_TIM4EN_Pos                ((uint32_t)2)                     /* Timer4 clock enable */
#define RCC_APB1ENR_TIM4EN_Mask               (((uint32_t)0x01) << 2)
#define RCC_APB1ENR_TIM4EN                    RCC_APB1ENR_TIM4EN_Mask
#define RCC_APB1ENR_TIM3EN_Pos                ((uint32_t)1)                     /* Timer3 clock enable */
#define RCC_APB1ENR_TIM3EN_Mask               (((uint32_t)0x01) << 1)
#define RCC_APB1ENR_TIM3EN                    RCC_APB1ENR_TIM3EN_Mask
#define RCC_APB1ENR_TIM2EN_Pos                ((uint32_t)0)                     /* Timer2 clock enable */
#define RCC_APB1ENR_TIM2EN_Mask               (((uint32_t)0x01) << 0)
#define RCC_APB1ENR_TIM2EN                    RCC_APB1ENR_TIM2EN_Mask

/************************************* RCC->BDCR  ***************************************/
#define RCC_BDCR_BDRST_Pos                    ((uint32_t)16)                    /* Backup domain software reset */
#define RCC_BDCR_BDRST_Mask                   (((uint32_t)0x01) << 16)
#define RCC_BDCR_BDRST                        RCC_BDCR_BDRST_Mask
#define RCC_BDCR_RTCEN_Pos                    ((uint32_t)15)                    /* RTC clock enable */
#define RCC_BDCR_RTCEN_Mask                   (((uint32_t)0x01) << 15)
#define RCC_BDCR_RTCEN                        RCC_BDCR_RTCEN_Mask
#define RCC_BDCR_RTCSEL_Pos                   ((uint32_t)8)                     /* RTC clock source selection */
#define RCC_BDCR_RTCSEL_Mask                  (((uint32_t)0x03) << 8)
#define RCC_BDCR_RTCSEL                       RCC_BDCR_RTCSEL_Mask
#define RCC_BDCR_RTCSEL_0                     (((uint32_t)0x1 << RCC_BDCR_RTCSEL_Pos))
#define RCC_BDCR_RTCSEL_1                     (((uint32_t)0x2 << RCC_BDCR_RTCSEL_Pos))
#define RCC_BDCR_LSEBYP_Pos                   ((uint32_t)2)                     /* External low-speed oscillator bypass */
#define RCC_BDCR_LSEBYP_Mask                  (((uint32_t)0x01) << 2)
#define RCC_BDCR_LSEBYP                       RCC_BDCR_LSEBYP_Mask
#define RCC_BDCR_LSERDY_Pos                   ((uint32_t)1)                     /* External low-speed oscillator ready */
#define RCC_BDCR_LSERDY_Mask                  (((uint32_t)0x01) << 1)
#define RCC_BDCR_LSERDY                       RCC_BDCR_LSERDY_Mask
#define RCC_BDCR_LSEON_Pos                    ((uint32_t)0)                     /* External low-speed oscillator enable */
#define RCC_BDCR_LSEON_Mask                   (((uint32_t)0x01) << 0)
#define RCC_BDCR_LSEON                        RCC_BDCR_LSEON_Mask

/************************************** RCC->CSR  ***************************************/
#define RCC_CSR_LPWRRSTF_Pos                  ((uint32_t)31)                    /* Low-power reset flag */
#define RCC_CSR_LPWRRSTF_Mask                 (((uint32_t)0x01) << 31)
#define RCC_CSR_LPWRRSTF                      RCC_CSR_LPWRRSTF_Mask
#define RCC_CSR_WWDGRSTF_Pos                  ((uint32_t)30)                    /* Window watchdog reset flag */
#define RCC_CSR_WWDGRSTF_Mask                 (((uint32_t)0x01) << 30)
#define RCC_CSR_WWDGRSTF                      RCC_CSR_WWDGRSTF_Mask
#define RCC_CSR_IWDGRSTF_Pos                  ((uint32_t)29)                    /* Independent watchdog reset flag */
#define RCC_CSR_IWDGRSTF_Mask                 (((uint32_t)0x01) << 29)
#define RCC_CSR_IWDGRSTF                      RCC_CSR_IWDGRSTF_Mask
#define RCC_CSR_SFTRSTF_Pos                   ((uint32_t)28)                    /* Software reset flag */
#define RCC_CSR_SFTRSTF_Mask                  (((uint32_t)0x01) << 28)
#define RCC_CSR_SFTRSTF                       RCC_CSR_SFTRSTF_Mask
#define RCC_CSR_PORRSTF_Pos                   ((uint32_t)27)                    /* POR/PDR reset flag */
#define RCC_CSR_PORRSTF_Mask                  (((uint32_t)0x01) << 27)
#define RCC_CSR_PORRSTF                       RCC_CSR_PORRSTF_Mask
#define RCC_CSR_PINRSTF_Pos                   ((uint32_t)26)                    /* PIN reset flag */
#define RCC_CSR_PINRSTF_Mask                  (((uint32_t)0x01) << 26)
#define RCC_CSR_PINRSTF                       RCC_CSR_PINRSTF_Mask
#define RCC_CSR_RMVF_Pos                      ((uint32_t)24)                    /* Remove reset flag */
#define RCC_CSR_RMVF_Mask                     (((uint32_t)0x01) << 24)
#define RCC_CSR_RMVF                          RCC_CSR_RMVF_Mask
#define RCC_CSR_LSIRDY_Pos                    ((uint32_t)1)                     /* Internal low-speed oscillator ready */
#define RCC_CSR_LSIRDY_Mask                   (((uint32_t)0x01) << 1)
#define RCC_CSR_LSIRDY                        RCC_CSR_LSIRDY_Mask
#define RCC_CSR_LSION_Pos                     ((uint32_t)0)                     /* Internal low-speed oscillator enable */
#define RCC_CSR_LSION_Mask                    (((uint32_t)0x01) << 0)
#define RCC_CSR_LSION                         RCC_CSR_LSION_Mask

/************************************* RCC->CFGR2  **************************************/
#define RCC_CFGR2_PREDIV_Pos                  ((uint32_t)0)                     /* PLL division factor */
#define RCC_CFGR2_PREDIV_Mask                 (((uint32_t)0x0F) << 0)
#define RCC_CFGR2_PREDIV                      RCC_CFGR2_PREDIV_Mask
#define RCC_CFGR2_PREDIV_0                    (((uint32_t)0x1))
#define RCC_CFGR2_PREDIV_1                    (((uint32_t)0x2))
#define RCC_CFGR2_PREDIV_2                    (((uint32_t)0x4))
#define RCC_CFGR2_PREDIV_3                    (((uint32_t)0x8))

/************************************* RCC->CFGR3  **************************************/
#define RCC_CFGR3_ADC3SW_Pos                  ((uint32_t)26)                    /* ADC3 clock frequency selection */
#define RCC_CFGR3_ADC3SW_Mask                 (((uint32_t)0x07) << 26)
#define RCC_CFGR3_ADC3SW                      RCC_CFGR3_ADC3SW_Mask
#define RCC_CFGR3_ADC3SW_0                    (((uint32_t)0x1 << RCC_CFGR3_ADC3SW_Pos))
#define RCC_CFGR3_ADC3SW_1                    (((uint32_t)0x2 << RCC_CFGR3_ADC3SW_Pos))
#define RCC_CFGR3_ADC3SW_2                    (((uint32_t)0x4 << RCC_CFGR3_ADC3SW_Pos))
#define RCC_CFGR3_ADC2SW_Pos                  ((uint32_t)23)                    /* ADC2 clock frequency selection */
#define RCC_CFGR3_ADC2SW_Mask                 (((uint32_t)0x07) << 23)
#define RCC_CFGR3_ADC2SW                      RCC_CFGR3_ADC2SW_Mask
#define RCC_CFGR3_ADC2SW_0                    (((uint32_t)0x1 << RCC_CFGR3_ADC2SW_Pos))
#define RCC_CFGR3_ADC2SW_1                    (((uint32_t)0x2 << RCC_CFGR3_ADC2SW_Pos))
#define RCC_CFGR3_ADC2SW_2                    (((uint32_t)0x4 << RCC_CFGR3_ADC2SW_Pos))
#define RCC_CFGR3_ADC1SW_Pos                  ((uint32_t)20)                    /* ADC1 clock frequency selection */
#define RCC_CFGR3_ADC1SW_Mask                 (((uint32_t)0x07) << 20)
#define RCC_CFGR3_ADC1SW                      RCC_CFGR3_ADC1SW_Mask
#define RCC_CFGR3_ADC1SW_0                    (((uint32_t)0x1 << RCC_CFGR3_ADC1SW_Pos))
#define RCC_CFGR3_ADC1SW_1                    (((uint32_t)0x2 << RCC_CFGR3_ADC1SW_Pos))
#define RCC_CFGR3_ADC1SW_2                    (((uint32_t)0x4 << RCC_CFGR3_ADC1SW_Pos))
#define RCC_CFGR3_USBIFSW_Pos                 ((uint32_t)12)                    /* USB clock frequency selection */
#define RCC_CFGR3_USBIFSW_Mask                (((uint32_t)0x03) << 12)
#define RCC_CFGR3_USBIFSW                     RCC_CFGR3_USBIFSW_Mask
#define RCC_CFGR3_USBIFSW_0                   (((uint32_t)0x1 << RCC_CFGR3_USBIFSW_Pos))
#define RCC_CFGR3_USBIFSW_1                   (((uint32_t)0x2 << RCC_CFGR3_USBIFSW_Pos))
#define RCC_CFGR3_USBCLKEN_Pos                ((uint32_t)11)                    /* USB clock enable */
#define RCC_CFGR3_USBCLKEN_Mask               (((uint32_t)0x01) << 11)
#define RCC_CFGR3_USBCLKEN                    RCC_CFGR3_USBCLKEN_Mask
#define RCC_CFGR3_USBSW_Pos                   ((uint32_t)8)                     /* USB clock frequency selection */
#define RCC_CFGR3_USBSW_Mask                  (((uint32_t)0x07) << 8)
#define RCC_CFGR3_USBSW                       RCC_CFGR3_USBSW_Mask
#define RCC_CFGR3_USBSW_0                     (((uint32_t)0x1 << RCC_CFGR3_USBSW_Pos))
#define RCC_CFGR3_USBSW_1                     (((uint32_t)0x2 << RCC_CFGR3_USBSW_Pos))
#define RCC_CFGR3_USBSW_2                     (((uint32_t)0x4 << RCC_CFGR3_USBSW_Pos))

/************************************** RCC->CR2  ***************************************/
#define RCC_CR2_HSI28RDY_Pos                  ((uint32_t)19)                    /* HSI28 clock ready flag */
#define RCC_CR2_HSI28RDY_Mask                 (((uint32_t)0x01) << 19)
#define RCC_CR2_HSI28RDY                      RCC_CR2_HSI28RDY_Mask
#define RCC_CR2_HSI28ON_Pos                   ((uint32_t)18)                    /* HSI28 clock enable */
#define RCC_CR2_HSI28ON_Mask                  (((uint32_t)0x01) << 18)
#define RCC_CR2_HSI28ON                       RCC_CR2_HSI28ON_Mask
#define RCC_CR2_HSI56RDY_Pos                  ((uint32_t)17)                    /* HSI56 clock ready flag */
#define RCC_CR2_HSI56RDY_Mask                 (((uint32_t)0x01) << 17)
#define RCC_CR2_HSI56RDY                      RCC_CR2_HSI56RDY_Mask
#define RCC_CR2_HSI56ON_Pos                   ((uint32_t)16)                    /* HSI56 clock enable */
#define RCC_CR2_HSI56ON_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CR2_HSI56ON                       RCC_CR2_HSI56ON_Mask

/************************************ RCC->HSECTL  **************************************/
#define RCC_HSECTL_CSS_THRESHOLD_Pos          ((uint32_t)25)                    /* CSS counter threshold control */
#define RCC_HSECTL_CSS_THRESHOLD_Mask         (((uint32_t)0x7F) << 25)
#define RCC_HSECTL_CSS_THRESHOLD              RCC_HSECTL_CSS_THRESHOLD_Mask
#define RCC_HSECTL_CSS_THRESHOLD_0            (((uint32_t)0x1 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_1            (((uint32_t)0x2 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_2            (((uint32_t)0x4 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_3            (((uint32_t)0x8 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_4            (((uint32_t)0x10 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_5            (((uint32_t)0x20 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_6            (((uint32_t)0x40 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_HSENF_BYP_Pos              ((uint32_t)24)                    /* HSE noise filter bypass */
#define RCC_HSECTL_HSENF_BYP_Mask             (((uint32_t)0x01) << 24)
#define RCC_HSECTL_HSENF_BYP                  RCC_HSECTL_HSENF_BYP_Mask
#define RCC_HSECTL_XTAL32M_Pos                ((uint32_t)16)                    /* AGC driven capacity setting */
#define RCC_HSECTL_XTAL32M_Mask               (((uint32_t)0xFF) << 16)
#define RCC_HSECTL_XTAL32M                    RCC_HSECTL_XTAL32M_Mask
#define RCC_HSECTL_XTAL32M_0                  (((uint32_t)0x1 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_1                  (((uint32_t)0x2 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_2                  (((uint32_t)0x4 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_3                  (((uint32_t)0x8 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_4                  (((uint32_t)0x10 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_5                  (((uint32_t)0x20 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_6                  (((uint32_t)0x40 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_XTAL32M_7                  (((uint32_t)0x80 << RCC_HSECTL_XTAL32M_Pos))
#define RCC_HSECTL_HSE_STOP_KEEP_Pos          ((uint32_t)12)                    /* Quickly switch to HSE on wakeup from Stop mode */
#define RCC_HSECTL_HSE_STOP_KEEP_Mask         (((uint32_t)0x01) << 12)
#define RCC_HSECTL_HSE_STOP_KEEP              RCC_HSECTL_HSE_STOP_KEEP_Mask
#define RCC_HSECTL_HSEWT_Pos                  ((uint32_t)0)                     /* HSE wait time for stabilization setting */
#define RCC_HSECTL_HSEWT_Mask                 (((uint32_t)0x0FFF) << 0)
#define RCC_HSECTL_HSEWT                      RCC_HSECTL_HSEWT_Mask
#define RCC_HSECTL_HSEWT_0                    (((uint32_t)0x1))
#define RCC_HSECTL_HSEWT_1                    (((uint32_t)0x2))
#define RCC_HSECTL_HSEWT_2                    (((uint32_t)0x4))
#define RCC_HSECTL_HSEWT_3                    (((uint32_t)0x8))
#define RCC_HSECTL_HSEWT_4                    (((uint32_t)0x10))
#define RCC_HSECTL_HSEWT_5                    (((uint32_t)0x20))
#define RCC_HSECTL_HSEWT_6                    (((uint32_t)0x40))
#define RCC_HSECTL_HSEWT_7                    (((uint32_t)0x80))
#define RCC_HSECTL_HSEWT_8                    (((uint32_t)0x100))
#define RCC_HSECTL_HSEWT_9                    (((uint32_t)0x200))
#define RCC_HSECTL_HSEWT_10                   (((uint32_t)0x400))
#define RCC_HSECTL_HSEWT_11                   (((uint32_t)0x800))

/************************************ RCC->PLLCTL  **************************************/
#define RCC_PLLCTL_PLLWT_Pos                  ((uint32_t)27)                    /* PLL wait time for stabilization setting */
#define RCC_PLLCTL_PLLWT_Mask                 (((uint32_t)0x1F) << 27)
#define RCC_PLLCTL_PLLWT                      RCC_PLLCTL_PLLWT_Mask
#define RCC_PLLCTL_PLLWT_0                    (((uint32_t)0x1 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_1                    (((uint32_t)0x2 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_2                    (((uint32_t)0x4 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_3                    (((uint32_t)0x8 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_4                    (((uint32_t)0x10 << RCC_PLLCTL_PLLWT_Pos))

/************************************* RCC->CFGR4  **************************************/
#define RCC_CFGR4_PPSS_Pos                    ((uint32_t)4)                     /* PLL pre-scaler clock source selection */
#define RCC_CFGR4_PPSS_Mask                   (((uint32_t)0x01) << 4)
#define RCC_CFGR4_PPSS                        RCC_CFGR4_PPSS_Mask
#define RCC_CFGR4_PLLMULH_Pos                 ((uint32_t)0)                     /* PLL multiplication factor control */
#define RCC_CFGR4_PLLMULH_Mask                (((uint32_t)0x07) << 0)
#define RCC_CFGR4_PLLMULH                     RCC_CFGR4_PLLMULH_Mask
#define RCC_CFGR4_PLLMULH_0                   (((uint32_t)0x1))
#define RCC_CFGR4_PLLMULH_1                   (((uint32_t)0x2))
#define RCC_CFGR4_PLLMULH_2                   (((uint32_t)0x4))

/************************************* RCC->CFGR5  **************************************/
#define RCC_CFGR5_PLLNODIV_Pos                ((uint32_t)31)                    /* PLL divider for MCO */
#define RCC_CFGR5_PLLNODIV_Mask               (((uint32_t)0x01) << 31)
#define RCC_CFGR5_PLLNODIV                    RCC_CFGR5_PLLNODIV_Mask
#define RCC_CFGR5_MCOPRE_Pos                  ((uint32_t)28)                    /* Microcontroller clock output prescaler */
#define RCC_CFGR5_MCOPRE_Mask                 (((uint32_t)0x07) << 28)
#define RCC_CFGR5_MCOPRE                      RCC_CFGR5_MCOPRE_Mask
#define RCC_CFGR5_MCOPRE_0                    (((uint32_t)0x1 << RCC_CFGR5_MCOPRE_Pos))
#define RCC_CFGR5_MCOPRE_1                    (((uint32_t)0x2 << RCC_CFGR5_MCOPRE_Pos))
#define RCC_CFGR5_MCOPRE_2                    (((uint32_t)0x4 << RCC_CFGR5_MCOPRE_Pos))
#define RCC_CFGR5_MCO_Pos                     ((uint32_t)27)                    /* Clock output */
#define RCC_CFGR5_MCO_Mask                    (((uint32_t)0x01) << 27)
#define RCC_CFGR5_MCO                         RCC_CFGR5_MCO_Mask
#define RCC_CFGR5_FLITFCLK_PRE_Pos            ((uint32_t)14)                    /* FLITFCLK prescaler factor */
#define RCC_CFGR5_FLITFCLK_PRE_Mask           (((uint32_t)0x1F) << 14)
#define RCC_CFGR5_FLITFCLK_PRE                RCC_CFGR5_FLITFCLK_PRE_Mask
#define RCC_CFGR5_FLITFCLK_PRE_0              (((uint32_t)0x1 << RCC_CFGR5_FLITFCLK_PRE_Pos))
#define RCC_CFGR5_FLITFCLK_PRE_1              (((uint32_t)0x2 << RCC_CFGR5_FLITFCLK_PRE_Pos))
#define RCC_CFGR5_FLITFCLK_PRE_2              (((uint32_t)0x4 << RCC_CFGR5_FLITFCLK_PRE_Pos))
#define RCC_CFGR5_FLITFCLK_PRE_3              (((uint32_t)0x8 << RCC_CFGR5_FLITFCLK_PRE_Pos))
#define RCC_CFGR5_FLITFCLK_PRE_4              (((uint32_t)0x10 << RCC_CFGR5_FLITFCLK_PRE_Pos))
#define RCC_CFGR5_FLITFCLK_SEL_Pos            ((uint32_t)12)                    /* The prescaler clock source of FLITFCLK selection */
#define RCC_CFGR5_FLITFCLK_SEL_Mask           (((uint32_t)0x03) << 12)
#define RCC_CFGR5_FLITFCLK_SEL                RCC_CFGR5_FLITFCLK_SEL_Mask
#define RCC_CFGR5_FLITFCLK_SEL_0              (((uint32_t)0x1 << RCC_CFGR5_FLITFCLK_SEL_Pos))
#define RCC_CFGR5_FLITFCLK_SEL_1              (((uint32_t)0x2 << RCC_CFGR5_FLITFCLK_SEL_Pos))
#define RCC_CFGR5_ESSS_Pos                    ((uint32_t)11)                    /* SYSCLK setting bit selection */
#define RCC_CFGR5_ESSS_Mask                   (((uint32_t)0x01) << 11)
#define RCC_CFGR5_ESSS                        RCC_CFGR5_ESSS_Mask
#define RCC_CFGR5_EXTCLK_SEL_Pos              ((uint32_t)8)                     /* External clock pin selection */
#define RCC_CFGR5_EXTCLK_SEL_Mask             (((uint32_t)0x03) << 8)
#define RCC_CFGR5_EXTCLK_SEL                  RCC_CFGR5_EXTCLK_SEL_Mask
#define RCC_CFGR5_EXTCLK_SEL_0                (((uint32_t)0x1 << RCC_CFGR5_EXTCLK_SEL_Pos))
#define RCC_CFGR5_EXTCLK_SEL_1                (((uint32_t)0x2 << RCC_CFGR5_EXTCLK_SEL_Pos))
#define RCC_CFGR5_ESWS_Pos                    ((uint32_t)4)                     /* SYSCLK clock source status */
#define RCC_CFGR5_ESWS_Mask                   (((uint32_t)0x07) << 4)
#define RCC_CFGR5_ESWS                        RCC_CFGR5_ESWS_Mask
#define RCC_CFGR5_ESWS_0                      (((uint32_t)0x1 << RCC_CFGR5_ESWS_Pos))
#define RCC_CFGR5_ESWS_1                      (((uint32_t)0x2 << RCC_CFGR5_ESWS_Pos))
#define RCC_CFGR5_ESWS_2                      (((uint32_t)0x4 << RCC_CFGR5_ESWS_Pos))
#define RCC_CFGR5_ESW_Pos                     ((uint32_t)0)                     /* SYSCLK clock source selection */
#define RCC_CFGR5_ESW_Mask                    (((uint32_t)0x07) << 0)
#define RCC_CFGR5_ESW                         RCC_CFGR5_ESW_Mask
#define RCC_CFGR5_ESW_0                       (((uint32_t)0x1))
#define RCC_CFGR5_ESW_1                       (((uint32_t)0x2))
#define RCC_CFGR5_ESW_2                       (((uint32_t)0x4))

/************************************ RCC->AHBRST2  *************************************/
#define RCC_AHBRST2_SDIORST_Pos               ((uint32_t)10)                    /* SDIO reset flag */
#define RCC_AHBRST2_SDIORST_Mask              (((uint32_t)0x01) << 10)
#define RCC_AHBRST2_SDIORST                   RCC_AHBRST2_SDIORST_Mask
#define RCC_AHBRST2_FSMCRST_Pos               ((uint32_t)8)                     /* FSMC reset flag */
#define RCC_AHBRST2_FSMCRST_Mask              (((uint32_t)0x01) << 8)
#define RCC_AHBRST2_FSMCRST                   RCC_AHBRST2_FSMCRST_Mask
#define RCC_AHBRST2_CRCRST_Pos                ((uint32_t)6)                     /* CRC reset flag */
#define RCC_AHBRST2_CRCRST_Mask               (((uint32_t)0x01) << 6)
#define RCC_AHBRST2_CRCRST                    RCC_AHBRST2_CRCRST_Mask
#define RCC_AHBRST2_DMA2RST_Pos               ((uint32_t)1)                     /* DMA2 reset flag */
#define RCC_AHBRST2_DMA2RST_Mask              (((uint32_t)0x01) << 1)
#define RCC_AHBRST2_DMA2RST                   RCC_AHBRST2_DMA2RST_Mask
#define RCC_AHBRST2_DMA1RST_Pos               ((uint32_t)0)                     /* DMA1 reset flag */
#define RCC_AHBRST2_DMA1RST_Mask              (((uint32_t)0x01) << 0)
#define RCC_AHBRST2_DMA1RST                   RCC_AHBRST2_DMA1RST_Mask

/************************************ RCC->AHBRST3  *************************************/
#define RCC_AHBRST3_CACHERST_Pos              ((uint32_t)8)                     /* Cache reset flag */
#define RCC_AHBRST3_CACHERST_Mask             (((uint32_t)0x01) << 8)
#define RCC_AHBRST3_CACHERST                  RCC_AHBRST3_CACHERST_Mask

/************************************ RCC->LSICTL  **************************************/
#define RCC_LSICTL_LSITRIM_Pos                ((uint32_t)8)                     /* LSI clock trimming */
#define RCC_LSICTL_LSITRIM_Mask               (((uint32_t)0xFF) << 8)
#define RCC_LSICTL_LSITRIM                    RCC_LSICTL_LSITRIM_Mask
#define RCC_LSICTL_LSITRIM_0                  (((uint32_t)0x1 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_1                  (((uint32_t)0x2 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_2                  (((uint32_t)0x4 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_3                  (((uint32_t)0x8 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_4                  (((uint32_t)0x10 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_5                  (((uint32_t)0x20 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_6                  (((uint32_t)0x40 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSITRIM_7                  (((uint32_t)0x80 << RCC_LSICTL_LSITRIM_Pos))
#define RCC_LSICTL_LSI_FREQ_Pos               ((uint32_t)2)                     /* The default center frequency of LSI */
#define RCC_LSICTL_LSI_FREQ_Mask              (((uint32_t)0x03) << 2)
#define RCC_LSICTL_LSI_FREQ                   RCC_LSICTL_LSI_FREQ_Mask
#define RCC_LSICTL_LSI_FREQ_0                 (((uint32_t)0x1 << RCC_LSICTL_LSI_FREQ_Pos))
#define RCC_LSICTL_LSI_FREQ_1                 (((uint32_t)0x2 << RCC_LSICTL_LSI_FREQ_Pos))

/*****************************************************************************************
*                                     Peripheral EXTI                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t IMR;                    /* IMR */
  __IO uint32_t EMR;                    /* EMR */
  __IO uint32_t RTSR;                   /* RTSR */
  __IO uint32_t FTSR;                   /* FTSR */
  __IO uint32_t SWIER;                  /* SWIER */
  __IO uint32_t PR;                     /* PR */
}EXTI_TypeDef;

/************************************* EXTI->IMR  ***************************************/
#define EXTI_IMR_MR24_Pos                     ((uint32_t)24)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR24_Mask                    (((uint32_t)0x01) << 24)
#define EXTI_IMR_MR24                         EXTI_IMR_MR24_Mask
#define EXTI_IMR_MR25_Pos                     ((uint32_t)25)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR25_Mask                    (((uint32_t)0x01) << 25)
#define EXTI_IMR_MR25                         EXTI_IMR_MR25_Mask
#define EXTI_IMR_MR26_Pos                     ((uint32_t)26)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR26_Mask                    (((uint32_t)0x01) << 26)
#define EXTI_IMR_MR26                         EXTI_IMR_MR26_Mask
#define EXTI_IMR_MR0_Pos                      ((uint32_t)0)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_IMR_MR0                          EXTI_IMR_MR0_Mask
#define EXTI_IMR_MR1_Pos                      ((uint32_t)1)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_IMR_MR1                          EXTI_IMR_MR1_Mask
#define EXTI_IMR_MR2_Pos                      ((uint32_t)2)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_IMR_MR2                          EXTI_IMR_MR2_Mask
#define EXTI_IMR_MR3_Pos                      ((uint32_t)3)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_IMR_MR3                          EXTI_IMR_MR3_Mask
#define EXTI_IMR_MR4_Pos                      ((uint32_t)4)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_IMR_MR4                          EXTI_IMR_MR4_Mask
#define EXTI_IMR_MR5_Pos                      ((uint32_t)5)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_IMR_MR5                          EXTI_IMR_MR5_Mask
#define EXTI_IMR_MR6_Pos                      ((uint32_t)6)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_IMR_MR6                          EXTI_IMR_MR6_Mask
#define EXTI_IMR_MR7_Pos                      ((uint32_t)7)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_IMR_MR7                          EXTI_IMR_MR7_Mask
#define EXTI_IMR_MR8_Pos                      ((uint32_t)8)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_IMR_MR8                          EXTI_IMR_MR8_Mask
#define EXTI_IMR_MR9_Pos                      ((uint32_t)9)                     /* Interrupt Mask on line x */
#define EXTI_IMR_MR9_Mask                     (((uint32_t)0x01) << 9)
#define EXTI_IMR_MR9                          EXTI_IMR_MR9_Mask
#define EXTI_IMR_MR10_Pos                     ((uint32_t)10)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_IMR_MR10                         EXTI_IMR_MR10_Mask
#define EXTI_IMR_MR11_Pos                     ((uint32_t)11)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_IMR_MR11                         EXTI_IMR_MR11_Mask
#define EXTI_IMR_MR12_Pos                     ((uint32_t)12)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR12_Mask                    (((uint32_t)0x01) << 12)
#define EXTI_IMR_MR12                         EXTI_IMR_MR12_Mask
#define EXTI_IMR_MR13_Pos                     ((uint32_t)13)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR13_Mask                    (((uint32_t)0x01) << 13)
#define EXTI_IMR_MR13                         EXTI_IMR_MR13_Mask
#define EXTI_IMR_MR14_Pos                     ((uint32_t)14)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR14_Mask                    (((uint32_t)0x01) << 14)
#define EXTI_IMR_MR14                         EXTI_IMR_MR14_Mask
#define EXTI_IMR_MR15_Pos                     ((uint32_t)15)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR15_Mask                    (((uint32_t)0x01) << 15)
#define EXTI_IMR_MR15                         EXTI_IMR_MR15_Mask
#define EXTI_IMR_MR16_Pos                     ((uint32_t)16)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR16_Mask                    (((uint32_t)0x01) << 16)
#define EXTI_IMR_MR16                         EXTI_IMR_MR16_Mask
#define EXTI_IMR_MR17_Pos                     ((uint32_t)17)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR17_Mask                    (((uint32_t)0x01) << 17)
#define EXTI_IMR_MR17                         EXTI_IMR_MR17_Mask
#define EXTI_IMR_MR18_Pos                     ((uint32_t)18)                    /* Interrupt Mask on line x */
#define EXTI_IMR_MR18_Mask                    (((uint32_t)0x01) << 18)
#define EXTI_IMR_MR18                         EXTI_IMR_MR18_Mask

/************************************* EXTI->EMR  ***************************************/
#define EXTI_EMR_MR24_Pos                     ((uint32_t)24)                    /* Event mask on line x */
#define EXTI_EMR_MR24_Mask                    (((uint32_t)0x01) << 24)
#define EXTI_EMR_MR24                         EXTI_EMR_MR24_Mask
#define EXTI_EMR_MR25_Pos                     ((uint32_t)25)                    /* Event mask on line x */
#define EXTI_EMR_MR25_Mask                    (((uint32_t)0x01) << 25)
#define EXTI_EMR_MR25                         EXTI_EMR_MR25_Mask
#define EXTI_EMR_MR26_Pos                     ((uint32_t)26)                    /* Event mask on line x */
#define EXTI_EMR_MR26_Mask                    (((uint32_t)0x01) << 26)
#define EXTI_EMR_MR26                         EXTI_EMR_MR26_Mask
#define EXTI_EMR_MR0_Pos                      ((uint32_t)0)                     /* Event mask on line x */
#define EXTI_EMR_MR0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_EMR_MR0                          EXTI_EMR_MR0_Mask
#define EXTI_EMR_MR1_Pos                      ((uint32_t)1)                     /* Event mask on line x */
#define EXTI_EMR_MR1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_EMR_MR1                          EXTI_EMR_MR1_Mask
#define EXTI_EMR_MR2_Pos                      ((uint32_t)2)                     /* Event mask on line x */
#define EXTI_EMR_MR2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_EMR_MR2                          EXTI_EMR_MR2_Mask
#define EXTI_EMR_MR3_Pos                      ((uint32_t)3)                     /* Event mask on line x */
#define EXTI_EMR_MR3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_EMR_MR3                          EXTI_EMR_MR3_Mask
#define EXTI_EMR_MR4_Pos                      ((uint32_t)4)                     /* Event mask on line x */
#define EXTI_EMR_MR4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_EMR_MR4                          EXTI_EMR_MR4_Mask
#define EXTI_EMR_MR5_Pos                      ((uint32_t)5)                     /* Event mask on line x */
#define EXTI_EMR_MR5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_EMR_MR5                          EXTI_EMR_MR5_Mask
#define EXTI_EMR_MR6_Pos                      ((uint32_t)6)                     /* Event mask on line x */
#define EXTI_EMR_MR6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_EMR_MR6                          EXTI_EMR_MR6_Mask
#define EXTI_EMR_MR7_Pos                      ((uint32_t)7)                     /* Event mask on line x */
#define EXTI_EMR_MR7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_EMR_MR7                          EXTI_EMR_MR7_Mask
#define EXTI_EMR_MR8_Pos                      ((uint32_t)8)                     /* Event mask on line x */
#define EXTI_EMR_MR8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_EMR_MR8                          EXTI_EMR_MR8_Mask
#define EXTI_EMR_MR9_Pos                      ((uint32_t)9)                     /* Event mask on line x */
#define EXTI_EMR_MR9_Mask                     (((uint32_t)0x01) << 9)
#define EXTI_EMR_MR9                          EXTI_EMR_MR9_Mask
#define EXTI_EMR_MR10_Pos                     ((uint32_t)10)                    /* Event mask on line x */
#define EXTI_EMR_MR10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_EMR_MR10                         EXTI_EMR_MR10_Mask
#define EXTI_EMR_MR11_Pos                     ((uint32_t)11)                    /* Event mask on line x */
#define EXTI_EMR_MR11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_EMR_MR11                         EXTI_EMR_MR11_Mask
#define EXTI_EMR_MR12_Pos                     ((uint32_t)12)                    /* Event mask on line x */
#define EXTI_EMR_MR12_Mask                    (((uint32_t)0x01) << 12)
#define EXTI_EMR_MR12                         EXTI_EMR_MR12_Mask
#define EXTI_EMR_MR13_Pos                     ((uint32_t)13)                    /* Event mask on line x */
#define EXTI_EMR_MR13_Mask                    (((uint32_t)0x01) << 13)
#define EXTI_EMR_MR13                         EXTI_EMR_MR13_Mask
#define EXTI_EMR_MR14_Pos                     ((uint32_t)14)                    /* Event mask on line x */
#define EXTI_EMR_MR14_Mask                    (((uint32_t)0x01) << 14)
#define EXTI_EMR_MR14                         EXTI_EMR_MR14_Mask
#define EXTI_EMR_MR15_Pos                     ((uint32_t)15)                    /* Event mask on line x */
#define EXTI_EMR_MR15_Mask                    (((uint32_t)0x01) << 15)
#define EXTI_EMR_MR15                         EXTI_EMR_MR15_Mask
#define EXTI_EMR_MR16_Pos                     ((uint32_t)16)                    /* Event mask on line x */
#define EXTI_EMR_MR16_Mask                    (((uint32_t)0x01) << 16)
#define EXTI_EMR_MR16                         EXTI_EMR_MR16_Mask
#define EXTI_EMR_MR17_Pos                     ((uint32_t)17)                    /* Event mask on line x */
#define EXTI_EMR_MR17_Mask                    (((uint32_t)0x01) << 17)
#define EXTI_EMR_MR17                         EXTI_EMR_MR17_Mask
#define EXTI_EMR_MR18_Pos                     ((uint32_t)18)                    /* Event mask on line x */
#define EXTI_EMR_MR18_Mask                    (((uint32_t)0x01) << 18)
#define EXTI_EMR_MR18                         EXTI_EMR_MR18_Mask

/************************************* EXTI->RTSR  **************************************/
#define EXTI_RTSR_TR0_Pos                     ((uint32_t)0)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_RTSR_TR0                         EXTI_RTSR_TR0_Mask
#define EXTI_RTSR_TR1_Pos                     ((uint32_t)1)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_RTSR_TR1                         EXTI_RTSR_TR1_Mask
#define EXTI_RTSR_TR2_Pos                     ((uint32_t)2)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_RTSR_TR2                         EXTI_RTSR_TR2_Mask
#define EXTI_RTSR_TR3_Pos                     ((uint32_t)3)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_RTSR_TR3                         EXTI_RTSR_TR3_Mask
#define EXTI_RTSR_TR4_Pos                     ((uint32_t)4)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_RTSR_TR4                         EXTI_RTSR_TR4_Mask
#define EXTI_RTSR_TR5_Pos                     ((uint32_t)5)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_RTSR_TR5                         EXTI_RTSR_TR5_Mask
#define EXTI_RTSR_TR6_Pos                     ((uint32_t)6)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_RTSR_TR6                         EXTI_RTSR_TR6_Mask
#define EXTI_RTSR_TR7_Pos                     ((uint32_t)7)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_RTSR_TR7                         EXTI_RTSR_TR7_Mask
#define EXTI_RTSR_TR8_Pos                     ((uint32_t)8)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR8_Mask                    (((uint32_t)0x01) << 8)
#define EXTI_RTSR_TR8                         EXTI_RTSR_TR8_Mask
#define EXTI_RTSR_TR9_Pos                     ((uint32_t)9)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR9_Mask                    (((uint32_t)0x01) << 9)
#define EXTI_RTSR_TR9                         EXTI_RTSR_TR9_Mask
#define EXTI_RTSR_TR10_Pos                    ((uint32_t)10)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR10_Mask                   (((uint32_t)0x01) << 10)
#define EXTI_RTSR_TR10                        EXTI_RTSR_TR10_Mask
#define EXTI_RTSR_TR11_Pos                    ((uint32_t)11)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_RTSR_TR11                        EXTI_RTSR_TR11_Mask
#define EXTI_RTSR_TR12_Pos                    ((uint32_t)12)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR12_Mask                   (((uint32_t)0x01) << 12)
#define EXTI_RTSR_TR12                        EXTI_RTSR_TR12_Mask
#define EXTI_RTSR_TR13_Pos                    ((uint32_t)13)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR13_Mask                   (((uint32_t)0x01) << 13)
#define EXTI_RTSR_TR13                        EXTI_RTSR_TR13_Mask
#define EXTI_RTSR_TR14_Pos                    ((uint32_t)14)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR14_Mask                   (((uint32_t)0x01) << 14)
#define EXTI_RTSR_TR14                        EXTI_RTSR_TR14_Mask
#define EXTI_RTSR_TR15_Pos                    ((uint32_t)15)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR15_Mask                   (((uint32_t)0x01) << 15)
#define EXTI_RTSR_TR15                        EXTI_RTSR_TR15_Mask
#define EXTI_RTSR_TR16_Pos                    ((uint32_t)16)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR16_Mask                   (((uint32_t)0x01) << 16)
#define EXTI_RTSR_TR16                        EXTI_RTSR_TR16_Mask
#define EXTI_RTSR_TR17_Pos                    ((uint32_t)17)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR17_Mask                   (((uint32_t)0x01) << 17)
#define EXTI_RTSR_TR17                        EXTI_RTSR_TR17_Mask
#define EXTI_RTSR_TR18_Pos                    ((uint32_t)18)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_TR18_Mask                   (((uint32_t)0x01) << 18)
#define EXTI_RTSR_TR18                        EXTI_RTSR_TR18_Mask

/************************************* EXTI->FTSR  **************************************/
#define EXTI_FTSR_TR0_Pos                     ((uint32_t)0)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_FTSR_TR0                         EXTI_FTSR_TR0_Mask
#define EXTI_FTSR_TR1_Pos                     ((uint32_t)1)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_FTSR_TR1                         EXTI_FTSR_TR1_Mask
#define EXTI_FTSR_TR2_Pos                     ((uint32_t)2)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_FTSR_TR2                         EXTI_FTSR_TR2_Mask
#define EXTI_FTSR_TR3_Pos                     ((uint32_t)3)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_FTSR_TR3                         EXTI_FTSR_TR3_Mask
#define EXTI_FTSR_TR4_Pos                     ((uint32_t)4)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_FTSR_TR4                         EXTI_FTSR_TR4_Mask
#define EXTI_FTSR_TR5_Pos                     ((uint32_t)5)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_FTSR_TR5                         EXTI_FTSR_TR5_Mask
#define EXTI_FTSR_TR6_Pos                     ((uint32_t)6)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_FTSR_TR6                         EXTI_FTSR_TR6_Mask
#define EXTI_FTSR_TR7_Pos                     ((uint32_t)7)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_FTSR_TR7                         EXTI_FTSR_TR7_Mask
#define EXTI_FTSR_TR8_Pos                     ((uint32_t)8)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR8_Mask                    (((uint32_t)0x01) << 8)
#define EXTI_FTSR_TR8                         EXTI_FTSR_TR8_Mask
#define EXTI_FTSR_TR9_Pos                     ((uint32_t)9)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR9_Mask                    (((uint32_t)0x01) << 9)
#define EXTI_FTSR_TR9                         EXTI_FTSR_TR9_Mask
#define EXTI_FTSR_TR10_Pos                    ((uint32_t)10)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR10_Mask                   (((uint32_t)0x01) << 10)
#define EXTI_FTSR_TR10                        EXTI_FTSR_TR10_Mask
#define EXTI_FTSR_TR11_Pos                    ((uint32_t)11)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_FTSR_TR11                        EXTI_FTSR_TR11_Mask
#define EXTI_FTSR_TR12_Pos                    ((uint32_t)12)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR12_Mask                   (((uint32_t)0x01) << 12)
#define EXTI_FTSR_TR12                        EXTI_FTSR_TR12_Mask
#define EXTI_FTSR_TR13_Pos                    ((uint32_t)13)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR13_Mask                   (((uint32_t)0x01) << 13)
#define EXTI_FTSR_TR13                        EXTI_FTSR_TR13_Mask
#define EXTI_FTSR_TR14_Pos                    ((uint32_t)14)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR14_Mask                   (((uint32_t)0x01) << 14)
#define EXTI_FTSR_TR14                        EXTI_FTSR_TR14_Mask
#define EXTI_FTSR_TR15_Pos                    ((uint32_t)15)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR15_Mask                   (((uint32_t)0x01) << 15)
#define EXTI_FTSR_TR15                        EXTI_FTSR_TR15_Mask
#define EXTI_FTSR_TR16_Pos                    ((uint32_t)16)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR16_Mask                   (((uint32_t)0x01) << 16)
#define EXTI_FTSR_TR16                        EXTI_FTSR_TR16_Mask
#define EXTI_FTSR_TR17_Pos                    ((uint32_t)17)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR17_Mask                   (((uint32_t)0x01) << 17)
#define EXTI_FTSR_TR17                        EXTI_FTSR_TR17_Mask
#define EXTI_FTSR_TR18_Pos                    ((uint32_t)18)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_TR18_Mask                   (((uint32_t)0x01) << 18)
#define EXTI_FTSR_TR18                        EXTI_FTSR_TR18_Mask

/************************************ EXTI->SWIER  **************************************/
#define EXTI_SWIER_SWIER0_Pos                 ((uint32_t)0)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER0_Mask                (((uint32_t)0x01) << 0)
#define EXTI_SWIER_SWIER0                     EXTI_SWIER_SWIER0_Mask
#define EXTI_SWIER_SWIER1_Pos                 ((uint32_t)1)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER1_Mask                (((uint32_t)0x01) << 1)
#define EXTI_SWIER_SWIER1                     EXTI_SWIER_SWIER1_Mask
#define EXTI_SWIER_SWIER2_Pos                 ((uint32_t)2)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER2_Mask                (((uint32_t)0x01) << 2)
#define EXTI_SWIER_SWIER2                     EXTI_SWIER_SWIER2_Mask
#define EXTI_SWIER_SWIER3_Pos                 ((uint32_t)3)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER3_Mask                (((uint32_t)0x01) << 3)
#define EXTI_SWIER_SWIER3                     EXTI_SWIER_SWIER3_Mask
#define EXTI_SWIER_SWIER4_Pos                 ((uint32_t)4)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER4_Mask                (((uint32_t)0x01) << 4)
#define EXTI_SWIER_SWIER4                     EXTI_SWIER_SWIER4_Mask
#define EXTI_SWIER_SWIER5_Pos                 ((uint32_t)5)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER5_Mask                (((uint32_t)0x01) << 5)
#define EXTI_SWIER_SWIER5                     EXTI_SWIER_SWIER5_Mask
#define EXTI_SWIER_SWIER6_Pos                 ((uint32_t)6)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER6_Mask                (((uint32_t)0x01) << 6)
#define EXTI_SWIER_SWIER6                     EXTI_SWIER_SWIER6_Mask
#define EXTI_SWIER_SWIER7_Pos                 ((uint32_t)7)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER7_Mask                (((uint32_t)0x01) << 7)
#define EXTI_SWIER_SWIER7                     EXTI_SWIER_SWIER7_Mask
#define EXTI_SWIER_SWIER8_Pos                 ((uint32_t)8)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER8_Mask                (((uint32_t)0x01) << 8)
#define EXTI_SWIER_SWIER8                     EXTI_SWIER_SWIER8_Mask
#define EXTI_SWIER_SWIER9_Pos                 ((uint32_t)9)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWIER9_Mask                (((uint32_t)0x01) << 9)
#define EXTI_SWIER_SWIER9                     EXTI_SWIER_SWIER9_Mask
#define EXTI_SWIER_SWIER10_Pos                ((uint32_t)10)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER10_Mask               (((uint32_t)0x01) << 10)
#define EXTI_SWIER_SWIER10                    EXTI_SWIER_SWIER10_Mask
#define EXTI_SWIER_SWIER11_Pos                ((uint32_t)11)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER11_Mask               (((uint32_t)0x01) << 11)
#define EXTI_SWIER_SWIER11                    EXTI_SWIER_SWIER11_Mask
#define EXTI_SWIER_SWIER12_Pos                ((uint32_t)12)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER12_Mask               (((uint32_t)0x01) << 12)
#define EXTI_SWIER_SWIER12                    EXTI_SWIER_SWIER12_Mask
#define EXTI_SWIER_SWIER13_Pos                ((uint32_t)13)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER13_Mask               (((uint32_t)0x01) << 13)
#define EXTI_SWIER_SWIER13                    EXTI_SWIER_SWIER13_Mask
#define EXTI_SWIER_SWIER14_Pos                ((uint32_t)14)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER14_Mask               (((uint32_t)0x01) << 14)
#define EXTI_SWIER_SWIER14                    EXTI_SWIER_SWIER14_Mask
#define EXTI_SWIER_SWIER15_Pos                ((uint32_t)15)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER15_Mask               (((uint32_t)0x01) << 15)
#define EXTI_SWIER_SWIER15                    EXTI_SWIER_SWIER15_Mask
#define EXTI_SWIER_SWIER16_Pos                ((uint32_t)16)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER16_Mask               (((uint32_t)0x01) << 16)
#define EXTI_SWIER_SWIER16                    EXTI_SWIER_SWIER16_Mask
#define EXTI_SWIER_SWIER17_Pos                ((uint32_t)17)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER17_Mask               (((uint32_t)0x01) << 17)
#define EXTI_SWIER_SWIER17                    EXTI_SWIER_SWIER17_Mask
#define EXTI_SWIER_SWIER18_Pos                ((uint32_t)18)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWIER18_Mask               (((uint32_t)0x01) << 18)
#define EXTI_SWIER_SWIER18                    EXTI_SWIER_SWIER18_Mask

/************************************** EXTI->PR  ***************************************/
#define EXTI_PR_PR0_Pos                       ((uint32_t)0)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR0_Mask                      (((uint32_t)0x01) << 0)
#define EXTI_PR_PR0                           EXTI_PR_PR0_Mask
#define EXTI_PR_PR1_Pos                       ((uint32_t)1)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR1_Mask                      (((uint32_t)0x01) << 1)
#define EXTI_PR_PR1                           EXTI_PR_PR1_Mask
#define EXTI_PR_PR2_Pos                       ((uint32_t)2)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR2_Mask                      (((uint32_t)0x01) << 2)
#define EXTI_PR_PR2                           EXTI_PR_PR2_Mask
#define EXTI_PR_PR3_Pos                       ((uint32_t)3)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR3_Mask                      (((uint32_t)0x01) << 3)
#define EXTI_PR_PR3                           EXTI_PR_PR3_Mask
#define EXTI_PR_PR4_Pos                       ((uint32_t)4)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR4_Mask                      (((uint32_t)0x01) << 4)
#define EXTI_PR_PR4                           EXTI_PR_PR4_Mask
#define EXTI_PR_PR5_Pos                       ((uint32_t)5)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR5_Mask                      (((uint32_t)0x01) << 5)
#define EXTI_PR_PR5                           EXTI_PR_PR5_Mask
#define EXTI_PR_PR6_Pos                       ((uint32_t)6)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR6_Mask                      (((uint32_t)0x01) << 6)
#define EXTI_PR_PR6                           EXTI_PR_PR6_Mask
#define EXTI_PR_PR7_Pos                       ((uint32_t)7)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR7_Mask                      (((uint32_t)0x01) << 7)
#define EXTI_PR_PR7                           EXTI_PR_PR7_Mask
#define EXTI_PR_PR8_Pos                       ((uint32_t)8)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR8_Mask                      (((uint32_t)0x01) << 8)
#define EXTI_PR_PR8                           EXTI_PR_PR8_Mask
#define EXTI_PR_PR9_Pos                       ((uint32_t)9)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PR9_Mask                      (((uint32_t)0x01) << 9)
#define EXTI_PR_PR9                           EXTI_PR_PR9_Mask
#define EXTI_PR_PR10_Pos                      ((uint32_t)10)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR10_Mask                     (((uint32_t)0x01) << 10)
#define EXTI_PR_PR10                          EXTI_PR_PR10_Mask
#define EXTI_PR_PR11_Pos                      ((uint32_t)11)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR11_Mask                     (((uint32_t)0x01) << 11)
#define EXTI_PR_PR11                          EXTI_PR_PR11_Mask
#define EXTI_PR_PR12_Pos                      ((uint32_t)12)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR12_Mask                     (((uint32_t)0x01) << 12)
#define EXTI_PR_PR12                          EXTI_PR_PR12_Mask
#define EXTI_PR_PR13_Pos                      ((uint32_t)13)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR13_Mask                     (((uint32_t)0x01) << 13)
#define EXTI_PR_PR13                          EXTI_PR_PR13_Mask
#define EXTI_PR_PR14_Pos                      ((uint32_t)14)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR14_Mask                     (((uint32_t)0x01) << 14)
#define EXTI_PR_PR14                          EXTI_PR_PR14_Mask
#define EXTI_PR_PR15_Pos                      ((uint32_t)15)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR15_Mask                     (((uint32_t)0x01) << 15)
#define EXTI_PR_PR15                          EXTI_PR_PR15_Mask
#define EXTI_PR_PR16_Pos                      ((uint32_t)16)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR16_Mask                     (((uint32_t)0x01) << 16)
#define EXTI_PR_PR16                          EXTI_PR_PR16_Mask
#define EXTI_PR_PR17_Pos                      ((uint32_t)17)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR17_Mask                     (((uint32_t)0x01) << 17)
#define EXTI_PR_PR17                          EXTI_PR_PR17_Mask
#define EXTI_PR_PR18_Pos                      ((uint32_t)18)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PR18_Mask                     (((uint32_t)0x01) << 18)
#define EXTI_PR_PR18                          EXTI_PR_PR18_Mask

/*****************************************************************************************
*                                     Peripheral GPIO                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CRL;                    /* CRL */
  __IO uint32_t CRH;                    /* CRH */
  __I  uint32_t IDR;                    /* IDR */
  __IO uint32_t ODR;                    /* ODR */
  __O  uint32_t BSRR;                   /* BSRR */
  __O  uint32_t BRR;                    /* BRR */
  __IO uint32_t LCKR;                   /* LCKR */
       uint16_t RESERVED1[10];
  __IO uint32_t IOSEN;                  /* IOSEN */
  __IO uint32_t UHD;                    /* UHD */
}GPIO_TypeDef;

/************************************* GPIO->CRL  ***************************************/
#define GPIO_CRL_CNF0_Pos                     ((uint32_t)2)                     /* Port x configuration bits */
#define GPIO_CRL_CNF0_Mask                    (((uint32_t)0x03) << 2)
#define GPIO_CRL_CNF0                         GPIO_CRL_CNF0_Mask
#define GPIO_CRL_CNF0_0                       (((uint32_t)0x1 << GPIO_CRL_CNF0_Pos))
#define GPIO_CRL_CNF0_1                       (((uint32_t)0x2 << GPIO_CRL_CNF0_Pos))
#define GPIO_CRL_CNF1_Pos                     ((uint32_t)6)                     /* Port x configuration bits */
#define GPIO_CRL_CNF1_Mask                    (((uint32_t)0x03) << 6)
#define GPIO_CRL_CNF1                         GPIO_CRL_CNF1_Mask
#define GPIO_CRL_CNF1_0                       (((uint32_t)0x1 << GPIO_CRL_CNF1_Pos))
#define GPIO_CRL_CNF1_1                       (((uint32_t)0x2 << GPIO_CRL_CNF1_Pos))
#define GPIO_CRL_CNF2_Pos                     ((uint32_t)10)                    /* Port x configuration bits */
#define GPIO_CRL_CNF2_Mask                    (((uint32_t)0x03) << 10)
#define GPIO_CRL_CNF2                         GPIO_CRL_CNF2_Mask
#define GPIO_CRL_CNF2_0                       (((uint32_t)0x1 << GPIO_CRL_CNF2_Pos))
#define GPIO_CRL_CNF2_1                       (((uint32_t)0x2 << GPIO_CRL_CNF2_Pos))
#define GPIO_CRL_CNF3_Pos                     ((uint32_t)14)                    /* Port x configuration bits */
#define GPIO_CRL_CNF3_Mask                    (((uint32_t)0x03) << 14)
#define GPIO_CRL_CNF3                         GPIO_CRL_CNF3_Mask
#define GPIO_CRL_CNF3_0                       (((uint32_t)0x1 << GPIO_CRL_CNF3_Pos))
#define GPIO_CRL_CNF3_1                       (((uint32_t)0x2 << GPIO_CRL_CNF3_Pos))
#define GPIO_CRL_CNF4_Pos                     ((uint32_t)18)                    /* Port x configuration bits */
#define GPIO_CRL_CNF4_Mask                    (((uint32_t)0x03) << 18)
#define GPIO_CRL_CNF4                         GPIO_CRL_CNF4_Mask
#define GPIO_CRL_CNF4_0                       (((uint32_t)0x1 << GPIO_CRL_CNF4_Pos))
#define GPIO_CRL_CNF4_1                       (((uint32_t)0x2 << GPIO_CRL_CNF4_Pos))
#define GPIO_CRL_CNF5_Pos                     ((uint32_t)22)                    /* Port x configuration bits */
#define GPIO_CRL_CNF5_Mask                    (((uint32_t)0x03) << 22)
#define GPIO_CRL_CNF5                         GPIO_CRL_CNF5_Mask
#define GPIO_CRL_CNF5_0                       (((uint32_t)0x1 << GPIO_CRL_CNF5_Pos))
#define GPIO_CRL_CNF5_1                       (((uint32_t)0x2 << GPIO_CRL_CNF5_Pos))
#define GPIO_CRL_CNF6_Pos                     ((uint32_t)26)                    /* Port x configuration bits */
#define GPIO_CRL_CNF6_Mask                    (((uint32_t)0x03) << 26)
#define GPIO_CRL_CNF6                         GPIO_CRL_CNF6_Mask
#define GPIO_CRL_CNF6_0                       (((uint32_t)0x1 << GPIO_CRL_CNF6_Pos))
#define GPIO_CRL_CNF6_1                       (((uint32_t)0x2 << GPIO_CRL_CNF6_Pos))
#define GPIO_CRL_CNF7_Pos                     ((uint32_t)30)                    /* Port x configuration bits */
#define GPIO_CRL_CNF7_Mask                    (((uint32_t)0x03) << 30)
#define GPIO_CRL_CNF7                         GPIO_CRL_CNF7_Mask
#define GPIO_CRL_CNF7_0                       (((uint32_t)0x1 << GPIO_CRL_CNF7_Pos))
#define GPIO_CRL_CNF7_1                       (((uint32_t)0x2 << GPIO_CRL_CNF7_Pos))
#define GPIO_CRL_MODE0_Pos                    ((uint32_t)0)                     /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE0_Mask                   (((uint32_t)0x03) << 0)
#define GPIO_CRL_MODE0                        GPIO_CRL_MODE0_Mask
#define GPIO_CRL_MODE0_0                      (((uint32_t)0x1))
#define GPIO_CRL_MODE0_1                      (((uint32_t)0x2))
#define GPIO_CRL_MODE1_Pos                    ((uint32_t)4)                     /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE1_Mask                   (((uint32_t)0x03) << 4)
#define GPIO_CRL_MODE1                        GPIO_CRL_MODE1_Mask
#define GPIO_CRL_MODE1_0                      (((uint32_t)0x1 << GPIO_CRL_MODE1_Pos))
#define GPIO_CRL_MODE1_1                      (((uint32_t)0x2 << GPIO_CRL_MODE1_Pos))
#define GPIO_CRL_MODE2_Pos                    ((uint32_t)8)                     /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE2_Mask                   (((uint32_t)0x03) << 8)
#define GPIO_CRL_MODE2                        GPIO_CRL_MODE2_Mask
#define GPIO_CRL_MODE2_0                      (((uint32_t)0x1 << GPIO_CRL_MODE2_Pos))
#define GPIO_CRL_MODE2_1                      (((uint32_t)0x2 << GPIO_CRL_MODE2_Pos))
#define GPIO_CRL_MODE3_Pos                    ((uint32_t)12)                    /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE3_Mask                   (((uint32_t)0x03) << 12)
#define GPIO_CRL_MODE3                        GPIO_CRL_MODE3_Mask
#define GPIO_CRL_MODE3_0                      (((uint32_t)0x1 << GPIO_CRL_MODE3_Pos))
#define GPIO_CRL_MODE3_1                      (((uint32_t)0x2 << GPIO_CRL_MODE3_Pos))
#define GPIO_CRL_MODE4_Pos                    ((uint32_t)16)                    /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE4_Mask                   (((uint32_t)0x03) << 16)
#define GPIO_CRL_MODE4                        GPIO_CRL_MODE4_Mask
#define GPIO_CRL_MODE4_0                      (((uint32_t)0x1 << GPIO_CRL_MODE4_Pos))
#define GPIO_CRL_MODE4_1                      (((uint32_t)0x2 << GPIO_CRL_MODE4_Pos))
#define GPIO_CRL_MODE5_Pos                    ((uint32_t)20)                    /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE5_Mask                   (((uint32_t)0x03) << 20)
#define GPIO_CRL_MODE5                        GPIO_CRL_MODE5_Mask
#define GPIO_CRL_MODE5_0                      (((uint32_t)0x1 << GPIO_CRL_MODE5_Pos))
#define GPIO_CRL_MODE5_1                      (((uint32_t)0x2 << GPIO_CRL_MODE5_Pos))
#define GPIO_CRL_MODE6_Pos                    ((uint32_t)24)                    /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE6_Mask                   (((uint32_t)0x03) << 24)
#define GPIO_CRL_MODE6                        GPIO_CRL_MODE6_Mask
#define GPIO_CRL_MODE6_0                      (((uint32_t)0x1 << GPIO_CRL_MODE6_Pos))
#define GPIO_CRL_MODE6_1                      (((uint32_t)0x2 << GPIO_CRL_MODE6_Pos))
#define GPIO_CRL_MODE7_Pos                    ((uint32_t)28)                    /* Port x pin y mode configuration bits */
#define GPIO_CRL_MODE7_Mask                   (((uint32_t)0x03) << 28)
#define GPIO_CRL_MODE7                        GPIO_CRL_MODE7_Mask
#define GPIO_CRL_MODE7_0                      (((uint32_t)0x1 << GPIO_CRL_MODE7_Pos))
#define GPIO_CRL_MODE7_1                      (((uint32_t)0x2 << GPIO_CRL_MODE7_Pos))

/************************************* GPIO->CRH  ***************************************/
#define GPIO_CRH_CNF8_Pos                     ((uint32_t)2)                     /* Port x configuration bits */
#define GPIO_CRH_CNF8_Mask                    (((uint32_t)0x03) << 2)
#define GPIO_CRH_CNF8                         GPIO_CRH_CNF8_Mask
#define GPIO_CRH_CNF8_0                       (((uint32_t)0x1 << GPIO_CRH_CNF8_Pos))
#define GPIO_CRH_CNF8_1                       (((uint32_t)0x2 << GPIO_CRH_CNF8_Pos))
#define GPIO_CRH_CNF9_Pos                     ((uint32_t)6)                     /* Port x configuration bits */
#define GPIO_CRH_CNF9_Mask                    (((uint32_t)0x03) << 6)
#define GPIO_CRH_CNF9                         GPIO_CRH_CNF9_Mask
#define GPIO_CRH_CNF9_0                       (((uint32_t)0x1 << GPIO_CRH_CNF9_Pos))
#define GPIO_CRH_CNF9_1                       (((uint32_t)0x2 << GPIO_CRH_CNF9_Pos))
#define GPIO_CRH_CNF10_Pos                    ((uint32_t)10)                    /* Port x configuration bits */
#define GPIO_CRH_CNF10_Mask                   (((uint32_t)0x03) << 10)
#define GPIO_CRH_CNF10                        GPIO_CRH_CNF10_Mask
#define GPIO_CRH_CNF10_0                      (((uint32_t)0x1 << GPIO_CRH_CNF10_Pos))
#define GPIO_CRH_CNF10_1                      (((uint32_t)0x2 << GPIO_CRH_CNF10_Pos))
#define GPIO_CRH_CNF11_Pos                    ((uint32_t)14)                    /* Port x configuration bits */
#define GPIO_CRH_CNF11_Mask                   (((uint32_t)0x03) << 14)
#define GPIO_CRH_CNF11                        GPIO_CRH_CNF11_Mask
#define GPIO_CRH_CNF11_0                      (((uint32_t)0x1 << GPIO_CRH_CNF11_Pos))
#define GPIO_CRH_CNF11_1                      (((uint32_t)0x2 << GPIO_CRH_CNF11_Pos))
#define GPIO_CRH_CNF12_Pos                    ((uint32_t)18)                    /* Port x configuration bits */
#define GPIO_CRH_CNF12_Mask                   (((uint32_t)0x03) << 18)
#define GPIO_CRH_CNF12                        GPIO_CRH_CNF12_Mask
#define GPIO_CRH_CNF12_0                      (((uint32_t)0x1 << GPIO_CRH_CNF12_Pos))
#define GPIO_CRH_CNF12_1                      (((uint32_t)0x2 << GPIO_CRH_CNF12_Pos))
#define GPIO_CRH_CNF13_Pos                    ((uint32_t)22)                    /* Port x configuration bits */
#define GPIO_CRH_CNF13_Mask                   (((uint32_t)0x03) << 22)
#define GPIO_CRH_CNF13                        GPIO_CRH_CNF13_Mask
#define GPIO_CRH_CNF13_0                      (((uint32_t)0x1 << GPIO_CRH_CNF13_Pos))
#define GPIO_CRH_CNF13_1                      (((uint32_t)0x2 << GPIO_CRH_CNF13_Pos))
#define GPIO_CRH_CNF14_Pos                    ((uint32_t)26)                    /* Port x configuration bits */
#define GPIO_CRH_CNF14_Mask                   (((uint32_t)0x03) << 26)
#define GPIO_CRH_CNF14                        GPIO_CRH_CNF14_Mask
#define GPIO_CRH_CNF14_0                      (((uint32_t)0x1 << GPIO_CRH_CNF14_Pos))
#define GPIO_CRH_CNF14_1                      (((uint32_t)0x2 << GPIO_CRH_CNF14_Pos))
#define GPIO_CRH_CNF15_Pos                    ((uint32_t)30)                    /* Port x configuration bits */
#define GPIO_CRH_CNF15_Mask                   (((uint32_t)0x03) << 30)
#define GPIO_CRH_CNF15                        GPIO_CRH_CNF15_Mask
#define GPIO_CRH_CNF15_0                      (((uint32_t)0x1 << GPIO_CRH_CNF15_Pos))
#define GPIO_CRH_CNF15_1                      (((uint32_t)0x2 << GPIO_CRH_CNF15_Pos))
#define GPIO_CRH_MODE8_Pos                    ((uint32_t)0)                     /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE8_Mask                   (((uint32_t)0x03) << 0)
#define GPIO_CRH_MODE8                        GPIO_CRH_MODE8_Mask
#define GPIO_CRH_MODE8_0                      (((uint32_t)0x1))
#define GPIO_CRH_MODE8_1                      (((uint32_t)0x2))
#define GPIO_CRH_MODE9_Pos                    ((uint32_t)4)                     /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE9_Mask                   (((uint32_t)0x03) << 4)
#define GPIO_CRH_MODE9                        GPIO_CRH_MODE9_Mask
#define GPIO_CRH_MODE9_0                      (((uint32_t)0x1 << GPIO_CRH_MODE9_Pos))
#define GPIO_CRH_MODE9_1                      (((uint32_t)0x2 << GPIO_CRH_MODE9_Pos))
#define GPIO_CRH_MODE10_Pos                   ((uint32_t)8)                     /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE10_Mask                  (((uint32_t)0x03) << 8)
#define GPIO_CRH_MODE10                       GPIO_CRH_MODE10_Mask
#define GPIO_CRH_MODE10_0                     (((uint32_t)0x1 << GPIO_CRH_MODE10_Pos))
#define GPIO_CRH_MODE10_1                     (((uint32_t)0x2 << GPIO_CRH_MODE10_Pos))
#define GPIO_CRH_MODE11_Pos                   ((uint32_t)12)                    /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE11_Mask                  (((uint32_t)0x03) << 12)
#define GPIO_CRH_MODE11                       GPIO_CRH_MODE11_Mask
#define GPIO_CRH_MODE11_0                     (((uint32_t)0x1 << GPIO_CRH_MODE11_Pos))
#define GPIO_CRH_MODE11_1                     (((uint32_t)0x2 << GPIO_CRH_MODE11_Pos))
#define GPIO_CRH_MODE12_Pos                   ((uint32_t)16)                    /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE12_Mask                  (((uint32_t)0x03) << 16)
#define GPIO_CRH_MODE12                       GPIO_CRH_MODE12_Mask
#define GPIO_CRH_MODE12_0                     (((uint32_t)0x1 << GPIO_CRH_MODE12_Pos))
#define GPIO_CRH_MODE12_1                     (((uint32_t)0x2 << GPIO_CRH_MODE12_Pos))
#define GPIO_CRH_MODE13_Pos                   ((uint32_t)20)                    /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE13_Mask                  (((uint32_t)0x03) << 20)
#define GPIO_CRH_MODE13                       GPIO_CRH_MODE13_Mask
#define GPIO_CRH_MODE13_0                     (((uint32_t)0x1 << GPIO_CRH_MODE13_Pos))
#define GPIO_CRH_MODE13_1                     (((uint32_t)0x2 << GPIO_CRH_MODE13_Pos))
#define GPIO_CRH_MODE14_Pos                   ((uint32_t)24)                    /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE14_Mask                  (((uint32_t)0x03) << 24)
#define GPIO_CRH_MODE14                       GPIO_CRH_MODE14_Mask
#define GPIO_CRH_MODE14_0                     (((uint32_t)0x1 << GPIO_CRH_MODE14_Pos))
#define GPIO_CRH_MODE14_1                     (((uint32_t)0x2 << GPIO_CRH_MODE14_Pos))
#define GPIO_CRH_MODE15_Pos                   ((uint32_t)28)                    /* Port x pin y mode configuration bits */
#define GPIO_CRH_MODE15_Mask                  (((uint32_t)0x03) << 28)
#define GPIO_CRH_MODE15                       GPIO_CRH_MODE15_Mask
#define GPIO_CRH_MODE15_0                     (((uint32_t)0x1 << GPIO_CRH_MODE15_Pos))
#define GPIO_CRH_MODE15_1                     (((uint32_t)0x2 << GPIO_CRH_MODE15_Pos))

/************************************* GPIO->IDR  ***************************************/
#define GPIO_IDR_IDR0_Pos                     ((uint32_t)0)                     /* Port input data */
#define GPIO_IDR_IDR0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_IDR_IDR0                         GPIO_IDR_IDR0_Mask
#define GPIO_IDR_IDR1_Pos                     ((uint32_t)1)                     /* Port input data */
#define GPIO_IDR_IDR1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_IDR_IDR1                         GPIO_IDR_IDR1_Mask
#define GPIO_IDR_IDR2_Pos                     ((uint32_t)2)                     /* Port input data */
#define GPIO_IDR_IDR2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_IDR_IDR2                         GPIO_IDR_IDR2_Mask
#define GPIO_IDR_IDR3_Pos                     ((uint32_t)3)                     /* Port input data */
#define GPIO_IDR_IDR3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_IDR_IDR3                         GPIO_IDR_IDR3_Mask
#define GPIO_IDR_IDR4_Pos                     ((uint32_t)4)                     /* Port input data */
#define GPIO_IDR_IDR4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_IDR_IDR4                         GPIO_IDR_IDR4_Mask
#define GPIO_IDR_IDR5_Pos                     ((uint32_t)5)                     /* Port input data */
#define GPIO_IDR_IDR5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_IDR_IDR5                         GPIO_IDR_IDR5_Mask
#define GPIO_IDR_IDR6_Pos                     ((uint32_t)6)                     /* Port input data */
#define GPIO_IDR_IDR6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_IDR_IDR6                         GPIO_IDR_IDR6_Mask
#define GPIO_IDR_IDR7_Pos                     ((uint32_t)7)                     /* Port input data */
#define GPIO_IDR_IDR7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_IDR_IDR7                         GPIO_IDR_IDR7_Mask
#define GPIO_IDR_IDR8_Pos                     ((uint32_t)8)                     /* Port input data */
#define GPIO_IDR_IDR8_Mask                    (((uint32_t)0x01) << 8)
#define GPIO_IDR_IDR8                         GPIO_IDR_IDR8_Mask
#define GPIO_IDR_IDR9_Pos                     ((uint32_t)9)                     /* Port input data */
#define GPIO_IDR_IDR9_Mask                    (((uint32_t)0x01) << 9)
#define GPIO_IDR_IDR9                         GPIO_IDR_IDR9_Mask
#define GPIO_IDR_IDR10_Pos                    ((uint32_t)10)                    /* Port input data */
#define GPIO_IDR_IDR10_Mask                   (((uint32_t)0x01) << 10)
#define GPIO_IDR_IDR10                        GPIO_IDR_IDR10_Mask
#define GPIO_IDR_IDR11_Pos                    ((uint32_t)11)                    /* Port input data */
#define GPIO_IDR_IDR11_Mask                   (((uint32_t)0x01) << 11)
#define GPIO_IDR_IDR11                        GPIO_IDR_IDR11_Mask
#define GPIO_IDR_IDR12_Pos                    ((uint32_t)12)                    /* Port input data */
#define GPIO_IDR_IDR12_Mask                   (((uint32_t)0x01) << 12)
#define GPIO_IDR_IDR12                        GPIO_IDR_IDR12_Mask
#define GPIO_IDR_IDR13_Pos                    ((uint32_t)13)                    /* Port input data */
#define GPIO_IDR_IDR13_Mask                   (((uint32_t)0x01) << 13)
#define GPIO_IDR_IDR13                        GPIO_IDR_IDR13_Mask
#define GPIO_IDR_IDR14_Pos                    ((uint32_t)14)                    /* Port input data */
#define GPIO_IDR_IDR14_Mask                   (((uint32_t)0x01) << 14)
#define GPIO_IDR_IDR14                        GPIO_IDR_IDR14_Mask
#define GPIO_IDR_IDR15_Pos                    ((uint32_t)15)                    /* Port input data */
#define GPIO_IDR_IDR15_Mask                   (((uint32_t)0x01) << 15)
#define GPIO_IDR_IDR15                        GPIO_IDR_IDR15_Mask

/************************************* GPIO->ODR  ***************************************/
#define GPIO_ODR_ODR0_Pos                     ((uint32_t)0)                     /* Port output data */
#define GPIO_ODR_ODR0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_ODR_ODR0                         GPIO_ODR_ODR0_Mask
#define GPIO_ODR_ODR1_Pos                     ((uint32_t)1)                     /* Port output data */
#define GPIO_ODR_ODR1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_ODR_ODR1                         GPIO_ODR_ODR1_Mask
#define GPIO_ODR_ODR2_Pos                     ((uint32_t)2)                     /* Port output data */
#define GPIO_ODR_ODR2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_ODR_ODR2                         GPIO_ODR_ODR2_Mask
#define GPIO_ODR_ODR3_Pos                     ((uint32_t)3)                     /* Port output data */
#define GPIO_ODR_ODR3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_ODR_ODR3                         GPIO_ODR_ODR3_Mask
#define GPIO_ODR_ODR4_Pos                     ((uint32_t)4)                     /* Port output data */
#define GPIO_ODR_ODR4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_ODR_ODR4                         GPIO_ODR_ODR4_Mask
#define GPIO_ODR_ODR5_Pos                     ((uint32_t)5)                     /* Port output data */
#define GPIO_ODR_ODR5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_ODR_ODR5                         GPIO_ODR_ODR5_Mask
#define GPIO_ODR_ODR6_Pos                     ((uint32_t)6)                     /* Port output data */
#define GPIO_ODR_ODR6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_ODR_ODR6                         GPIO_ODR_ODR6_Mask
#define GPIO_ODR_ODR7_Pos                     ((uint32_t)7)                     /* Port output data */
#define GPIO_ODR_ODR7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_ODR_ODR7                         GPIO_ODR_ODR7_Mask
#define GPIO_ODR_ODR8_Pos                     ((uint32_t)8)                     /* Port output data */
#define GPIO_ODR_ODR8_Mask                    (((uint32_t)0x01) << 8)
#define GPIO_ODR_ODR8                         GPIO_ODR_ODR8_Mask
#define GPIO_ODR_ODR9_Pos                     ((uint32_t)9)                     /* Port output data */
#define GPIO_ODR_ODR9_Mask                    (((uint32_t)0x01) << 9)
#define GPIO_ODR_ODR9                         GPIO_ODR_ODR9_Mask
#define GPIO_ODR_ODR10_Pos                    ((uint32_t)10)                    /* Port output data */
#define GPIO_ODR_ODR10_Mask                   (((uint32_t)0x01) << 10)
#define GPIO_ODR_ODR10                        GPIO_ODR_ODR10_Mask
#define GPIO_ODR_ODR11_Pos                    ((uint32_t)11)                    /* Port output data */
#define GPIO_ODR_ODR11_Mask                   (((uint32_t)0x01) << 11)
#define GPIO_ODR_ODR11                        GPIO_ODR_ODR11_Mask
#define GPIO_ODR_ODR12_Pos                    ((uint32_t)12)                    /* Port output data */
#define GPIO_ODR_ODR12_Mask                   (((uint32_t)0x01) << 12)
#define GPIO_ODR_ODR12                        GPIO_ODR_ODR12_Mask
#define GPIO_ODR_ODR13_Pos                    ((uint32_t)13)                    /* Port output data */
#define GPIO_ODR_ODR13_Mask                   (((uint32_t)0x01) << 13)
#define GPIO_ODR_ODR13                        GPIO_ODR_ODR13_Mask
#define GPIO_ODR_ODR14_Pos                    ((uint32_t)14)                    /* Port output data */
#define GPIO_ODR_ODR14_Mask                   (((uint32_t)0x01) << 14)
#define GPIO_ODR_ODR14                        GPIO_ODR_ODR14_Mask
#define GPIO_ODR_ODR15_Pos                    ((uint32_t)15)                    /* Port output data */
#define GPIO_ODR_ODR15_Mask                   (((uint32_t)0x01) << 15)
#define GPIO_ODR_ODR15                        GPIO_ODR_ODR15_Mask

/************************************* GPIO->BSRR  **************************************/
#define GPIO_BSRR_BR0_Pos                     ((uint32_t)16)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR0_Mask                    (((uint32_t)0x01) << 16)
#define GPIO_BSRR_BR0                         GPIO_BSRR_BR0_Mask
#define GPIO_BSRR_BR1_Pos                     ((uint32_t)17)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR1_Mask                    (((uint32_t)0x01) << 17)
#define GPIO_BSRR_BR1                         GPIO_BSRR_BR1_Mask
#define GPIO_BSRR_BR2_Pos                     ((uint32_t)18)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR2_Mask                    (((uint32_t)0x01) << 18)
#define GPIO_BSRR_BR2                         GPIO_BSRR_BR2_Mask
#define GPIO_BSRR_BR3_Pos                     ((uint32_t)19)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR3_Mask                    (((uint32_t)0x01) << 19)
#define GPIO_BSRR_BR3                         GPIO_BSRR_BR3_Mask
#define GPIO_BSRR_BR4_Pos                     ((uint32_t)20)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR4_Mask                    (((uint32_t)0x01) << 20)
#define GPIO_BSRR_BR4                         GPIO_BSRR_BR4_Mask
#define GPIO_BSRR_BR5_Pos                     ((uint32_t)21)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR5_Mask                    (((uint32_t)0x01) << 21)
#define GPIO_BSRR_BR5                         GPIO_BSRR_BR5_Mask
#define GPIO_BSRR_BR6_Pos                     ((uint32_t)22)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR6_Mask                    (((uint32_t)0x01) << 22)
#define GPIO_BSRR_BR6                         GPIO_BSRR_BR6_Mask
#define GPIO_BSRR_BR7_Pos                     ((uint32_t)23)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR7_Mask                    (((uint32_t)0x01) << 23)
#define GPIO_BSRR_BR7                         GPIO_BSRR_BR7_Mask
#define GPIO_BSRR_BR8_Pos                     ((uint32_t)24)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR8_Mask                    (((uint32_t)0x01) << 24)
#define GPIO_BSRR_BR8                         GPIO_BSRR_BR8_Mask
#define GPIO_BSRR_BR9_Pos                     ((uint32_t)25)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR9_Mask                    (((uint32_t)0x01) << 25)
#define GPIO_BSRR_BR9                         GPIO_BSRR_BR9_Mask
#define GPIO_BSRR_BR10_Pos                    ((uint32_t)26)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR10_Mask                   (((uint32_t)0x01) << 26)
#define GPIO_BSRR_BR10                        GPIO_BSRR_BR10_Mask
#define GPIO_BSRR_BR11_Pos                    ((uint32_t)27)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR11_Mask                   (((uint32_t)0x01) << 27)
#define GPIO_BSRR_BR11                        GPIO_BSRR_BR11_Mask
#define GPIO_BSRR_BR12_Pos                    ((uint32_t)28)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR12_Mask                   (((uint32_t)0x01) << 28)
#define GPIO_BSRR_BR12                        GPIO_BSRR_BR12_Mask
#define GPIO_BSRR_BR13_Pos                    ((uint32_t)29)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR13_Mask                   (((uint32_t)0x01) << 29)
#define GPIO_BSRR_BR13                        GPIO_BSRR_BR13_Mask
#define GPIO_BSRR_BR14_Pos                    ((uint32_t)30)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR14_Mask                   (((uint32_t)0x01) << 30)
#define GPIO_BSRR_BR14                        GPIO_BSRR_BR14_Mask
#define GPIO_BSRR_BR15_Pos                    ((uint32_t)31)                    /* Port x Reset bit y */
#define GPIO_BSRR_BR15_Mask                   (((uint32_t)0x01) << 31)
#define GPIO_BSRR_BR15                        GPIO_BSRR_BR15_Mask
#define GPIO_BSRR_BS0_Pos                     ((uint32_t)0)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_BSRR_BS0                         GPIO_BSRR_BS0_Mask
#define GPIO_BSRR_BS1_Pos                     ((uint32_t)1)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_BSRR_BS1                         GPIO_BSRR_BS1_Mask
#define GPIO_BSRR_BS2_Pos                     ((uint32_t)2)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_BSRR_BS2                         GPIO_BSRR_BS2_Mask
#define GPIO_BSRR_BS3_Pos                     ((uint32_t)3)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_BSRR_BS3                         GPIO_BSRR_BS3_Mask
#define GPIO_BSRR_BS4_Pos                     ((uint32_t)4)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_BSRR_BS4                         GPIO_BSRR_BS4_Mask
#define GPIO_BSRR_BS5_Pos                     ((uint32_t)5)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_BSRR_BS5                         GPIO_BSRR_BS5_Mask
#define GPIO_BSRR_BS6_Pos                     ((uint32_t)6)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_BSRR_BS6                         GPIO_BSRR_BS6_Mask
#define GPIO_BSRR_BS7_Pos                     ((uint32_t)7)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_BSRR_BS7                         GPIO_BSRR_BS7_Mask
#define GPIO_BSRR_BS8_Pos                     ((uint32_t)8)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS8_Mask                    (((uint32_t)0x01) << 8)
#define GPIO_BSRR_BS8                         GPIO_BSRR_BS8_Mask
#define GPIO_BSRR_BS9_Pos                     ((uint32_t)9)                     /* Port x Reset bit y */
#define GPIO_BSRR_BS9_Mask                    (((uint32_t)0x01) << 9)
#define GPIO_BSRR_BS9                         GPIO_BSRR_BS9_Mask
#define GPIO_BSRR_BS10_Pos                    ((uint32_t)10)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS10_Mask                   (((uint32_t)0x01) << 10)
#define GPIO_BSRR_BS10                        GPIO_BSRR_BS10_Mask
#define GPIO_BSRR_BS11_Pos                    ((uint32_t)11)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS11_Mask                   (((uint32_t)0x01) << 11)
#define GPIO_BSRR_BS11                        GPIO_BSRR_BS11_Mask
#define GPIO_BSRR_BS12_Pos                    ((uint32_t)12)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS12_Mask                   (((uint32_t)0x01) << 12)
#define GPIO_BSRR_BS12                        GPIO_BSRR_BS12_Mask
#define GPIO_BSRR_BS13_Pos                    ((uint32_t)13)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS13_Mask                   (((uint32_t)0x01) << 13)
#define GPIO_BSRR_BS13                        GPIO_BSRR_BS13_Mask
#define GPIO_BSRR_BS14_Pos                    ((uint32_t)14)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS14_Mask                   (((uint32_t)0x01) << 14)
#define GPIO_BSRR_BS14                        GPIO_BSRR_BS14_Mask
#define GPIO_BSRR_BS15_Pos                    ((uint32_t)15)                    /* Port x Reset bit y */
#define GPIO_BSRR_BS15_Mask                   (((uint32_t)0x01) << 15)
#define GPIO_BSRR_BS15                        GPIO_BSRR_BS15_Mask

/************************************* GPIO->BRR  ***************************************/
#define GPIO_BRR_BR0_Pos                      ((uint32_t)0)                     /* Port x Reset bit y */
#define GPIO_BRR_BR0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_BRR_BR0                          GPIO_BRR_BR0_Mask
#define GPIO_BRR_BR1_Pos                      ((uint32_t)1)                     /* Port x Reset bit y */
#define GPIO_BRR_BR1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_BRR_BR1                          GPIO_BRR_BR1_Mask
#define GPIO_BRR_BR2_Pos                      ((uint32_t)2)                     /* Port x Reset bit y */
#define GPIO_BRR_BR2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_BRR_BR2                          GPIO_BRR_BR2_Mask
#define GPIO_BRR_BR3_Pos                      ((uint32_t)3)                     /* Port x Reset bit y */
#define GPIO_BRR_BR3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_BRR_BR3                          GPIO_BRR_BR3_Mask
#define GPIO_BRR_BR4_Pos                      ((uint32_t)4)                     /* Port x Reset bit y */
#define GPIO_BRR_BR4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_BRR_BR4                          GPIO_BRR_BR4_Mask
#define GPIO_BRR_BR5_Pos                      ((uint32_t)5)                     /* Port x Reset bit y */
#define GPIO_BRR_BR5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_BRR_BR5                          GPIO_BRR_BR5_Mask
#define GPIO_BRR_BR6_Pos                      ((uint32_t)6)                     /* Port x Reset bit y */
#define GPIO_BRR_BR6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_BRR_BR6                          GPIO_BRR_BR6_Mask
#define GPIO_BRR_BR7_Pos                      ((uint32_t)7)                     /* Port x Reset bit y */
#define GPIO_BRR_BR7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_BRR_BR7                          GPIO_BRR_BR7_Mask
#define GPIO_BRR_BR8_Pos                      ((uint32_t)8)                     /* Port x Reset bit y */
#define GPIO_BRR_BR8_Mask                     (((uint32_t)0x01) << 8)
#define GPIO_BRR_BR8                          GPIO_BRR_BR8_Mask
#define GPIO_BRR_BR9_Pos                      ((uint32_t)9)                     /* Port x Reset bit y */
#define GPIO_BRR_BR9_Mask                     (((uint32_t)0x01) << 9)
#define GPIO_BRR_BR9                          GPIO_BRR_BR9_Mask
#define GPIO_BRR_BR10_Pos                     ((uint32_t)10)                    /* Port x Reset bit y */
#define GPIO_BRR_BR10_Mask                    (((uint32_t)0x01) << 10)
#define GPIO_BRR_BR10                         GPIO_BRR_BR10_Mask
#define GPIO_BRR_BR11_Pos                     ((uint32_t)11)                    /* Port x Reset bit y */
#define GPIO_BRR_BR11_Mask                    (((uint32_t)0x01) << 11)
#define GPIO_BRR_BR11                         GPIO_BRR_BR11_Mask
#define GPIO_BRR_BR12_Pos                     ((uint32_t)12)                    /* Port x Reset bit y */
#define GPIO_BRR_BR12_Mask                    (((uint32_t)0x01) << 12)
#define GPIO_BRR_BR12                         GPIO_BRR_BR12_Mask
#define GPIO_BRR_BR13_Pos                     ((uint32_t)13)                    /* Port x Reset bit y */
#define GPIO_BRR_BR13_Mask                    (((uint32_t)0x01) << 13)
#define GPIO_BRR_BR13                         GPIO_BRR_BR13_Mask
#define GPIO_BRR_BR14_Pos                     ((uint32_t)14)                    /* Port x Reset bit y */
#define GPIO_BRR_BR14_Mask                    (((uint32_t)0x01) << 14)
#define GPIO_BRR_BR14                         GPIO_BRR_BR14_Mask
#define GPIO_BRR_BR15_Pos                     ((uint32_t)15)                    /* Port x Reset bit y */
#define GPIO_BRR_BR15_Mask                    (((uint32_t)0x01) << 15)
#define GPIO_BRR_BR15                         GPIO_BRR_BR15_Mask

/************************************* GPIO->LCKR  **************************************/
#define GPIO_LCKR_LCKK_Pos                    ((uint32_t)16)                    /* Lock key */
#define GPIO_LCKR_LCKK_Mask                   (((uint32_t)0x01) << 16)
#define GPIO_LCKR_LCKK                        GPIO_LCKR_LCKK_Mask
#define GPIO_LCKR_LCK0_Pos                    ((uint32_t)0)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK0_Mask                   (((uint32_t)0x01) << 0)
#define GPIO_LCKR_LCK0                        GPIO_LCKR_LCK0_Mask
#define GPIO_LCKR_LCK1_Pos                    ((uint32_t)1)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK1_Mask                   (((uint32_t)0x01) << 1)
#define GPIO_LCKR_LCK1                        GPIO_LCKR_LCK1_Mask
#define GPIO_LCKR_LCK2_Pos                    ((uint32_t)2)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK2_Mask                   (((uint32_t)0x01) << 2)
#define GPIO_LCKR_LCK2                        GPIO_LCKR_LCK2_Mask
#define GPIO_LCKR_LCK3_Pos                    ((uint32_t)3)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK3_Mask                   (((uint32_t)0x01) << 3)
#define GPIO_LCKR_LCK3                        GPIO_LCKR_LCK3_Mask
#define GPIO_LCKR_LCK4_Pos                    ((uint32_t)4)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK4_Mask                   (((uint32_t)0x01) << 4)
#define GPIO_LCKR_LCK4                        GPIO_LCKR_LCK4_Mask
#define GPIO_LCKR_LCK5_Pos                    ((uint32_t)5)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK5_Mask                   (((uint32_t)0x01) << 5)
#define GPIO_LCKR_LCK5                        GPIO_LCKR_LCK5_Mask
#define GPIO_LCKR_LCK6_Pos                    ((uint32_t)6)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK6_Mask                   (((uint32_t)0x01) << 6)
#define GPIO_LCKR_LCK6                        GPIO_LCKR_LCK6_Mask
#define GPIO_LCKR_LCK7_Pos                    ((uint32_t)7)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK7_Mask                   (((uint32_t)0x01) << 7)
#define GPIO_LCKR_LCK7                        GPIO_LCKR_LCK7_Mask
#define GPIO_LCKR_LCK8_Pos                    ((uint32_t)8)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK8_Mask                   (((uint32_t)0x01) << 8)
#define GPIO_LCKR_LCK8                        GPIO_LCKR_LCK8_Mask
#define GPIO_LCKR_LCK9_Pos                    ((uint32_t)9)                     /* Port x Lock bit y */
#define GPIO_LCKR_LCK9_Mask                   (((uint32_t)0x01) << 9)
#define GPIO_LCKR_LCK9                        GPIO_LCKR_LCK9_Mask
#define GPIO_LCKR_LCK10_Pos                   ((uint32_t)10)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK10_Mask                  (((uint32_t)0x01) << 10)
#define GPIO_LCKR_LCK10                       GPIO_LCKR_LCK10_Mask
#define GPIO_LCKR_LCK11_Pos                   ((uint32_t)11)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK11_Mask                  (((uint32_t)0x01) << 11)
#define GPIO_LCKR_LCK11                       GPIO_LCKR_LCK11_Mask
#define GPIO_LCKR_LCK12_Pos                   ((uint32_t)12)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK12_Mask                  (((uint32_t)0x01) << 12)
#define GPIO_LCKR_LCK12                       GPIO_LCKR_LCK12_Mask
#define GPIO_LCKR_LCK13_Pos                   ((uint32_t)13)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK13_Mask                  (((uint32_t)0x01) << 13)
#define GPIO_LCKR_LCK13                       GPIO_LCKR_LCK13_Mask
#define GPIO_LCKR_LCK14_Pos                   ((uint32_t)14)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK14_Mask                  (((uint32_t)0x01) << 14)
#define GPIO_LCKR_LCK14                       GPIO_LCKR_LCK14_Mask
#define GPIO_LCKR_LCK15_Pos                   ((uint32_t)15)                    /* Port x Lock bit y */
#define GPIO_LCKR_LCK15_Mask                  (((uint32_t)0x01) << 15)
#define GPIO_LCKR_LCK15                       GPIO_LCKR_LCK15_Mask

/************************************ GPIO->IOSEN  **************************************/
#define GPIO_IOSEN_IOSEN0_Pos                 ((uint32_t)0)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN0_Mask                (((uint32_t)0x01) << 0)
#define GPIO_IOSEN_IOSEN0                     GPIO_IOSEN_IOSEN0_Mask
#define GPIO_IOSEN_IOSEN1_Pos                 ((uint32_t)1)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN1_Mask                (((uint32_t)0x01) << 1)
#define GPIO_IOSEN_IOSEN1                     GPIO_IOSEN_IOSEN1_Mask
#define GPIO_IOSEN_IOSEN2_Pos                 ((uint32_t)2)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN2_Mask                (((uint32_t)0x01) << 2)
#define GPIO_IOSEN_IOSEN2                     GPIO_IOSEN_IOSEN2_Mask
#define GPIO_IOSEN_IOSEN3_Pos                 ((uint32_t)3)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN3_Mask                (((uint32_t)0x01) << 3)
#define GPIO_IOSEN_IOSEN3                     GPIO_IOSEN_IOSEN3_Mask
#define GPIO_IOSEN_IOSEN4_Pos                 ((uint32_t)4)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN4_Mask                (((uint32_t)0x01) << 4)
#define GPIO_IOSEN_IOSEN4                     GPIO_IOSEN_IOSEN4_Mask
#define GPIO_IOSEN_IOSEN5_Pos                 ((uint32_t)5)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN5_Mask                (((uint32_t)0x01) << 5)
#define GPIO_IOSEN_IOSEN5                     GPIO_IOSEN_IOSEN5_Mask
#define GPIO_IOSEN_IOSEN6_Pos                 ((uint32_t)6)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN6_Mask                (((uint32_t)0x01) << 6)
#define GPIO_IOSEN_IOSEN6                     GPIO_IOSEN_IOSEN6_Mask
#define GPIO_IOSEN_IOSEN7_Pos                 ((uint32_t)7)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN7_Mask                (((uint32_t)0x01) << 7)
#define GPIO_IOSEN_IOSEN7                     GPIO_IOSEN_IOSEN7_Mask
#define GPIO_IOSEN_IOSEN8_Pos                 ((uint32_t)8)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN8_Mask                (((uint32_t)0x01) << 8)
#define GPIO_IOSEN_IOSEN8                     GPIO_IOSEN_IOSEN8_Mask
#define GPIO_IOSEN_IOSEN9_Pos                 ((uint32_t)9)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN9_Mask                (((uint32_t)0x01) << 9)
#define GPIO_IOSEN_IOSEN9                     GPIO_IOSEN_IOSEN9_Mask
#define GPIO_IOSEN_IOSEN10_Pos                ((uint32_t)10)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN10_Mask               (((uint32_t)0x01) << 10)
#define GPIO_IOSEN_IOSEN10                    GPIO_IOSEN_IOSEN10_Mask
#define GPIO_IOSEN_IOSEN11_Pos                ((uint32_t)11)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN11_Mask               (((uint32_t)0x01) << 11)
#define GPIO_IOSEN_IOSEN11                    GPIO_IOSEN_IOSEN11_Mask
#define GPIO_IOSEN_IOSEN12_Pos                ((uint32_t)12)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN12_Mask               (((uint32_t)0x01) << 12)
#define GPIO_IOSEN_IOSEN12                    GPIO_IOSEN_IOSEN12_Mask
#define GPIO_IOSEN_IOSEN13_Pos                ((uint32_t)13)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN13_Mask               (((uint32_t)0x01) << 13)
#define GPIO_IOSEN_IOSEN13                    GPIO_IOSEN_IOSEN13_Mask
#define GPIO_IOSEN_IOSEN14_Pos                ((uint32_t)14)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN14_Mask               (((uint32_t)0x01) << 14)
#define GPIO_IOSEN_IOSEN14                    GPIO_IOSEN_IOSEN14_Mask
#define GPIO_IOSEN_IOSEN15_Pos                ((uint32_t)15)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSEN_IOSEN15_Mask               (((uint32_t)0x01) << 15)
#define GPIO_IOSEN_IOSEN15                    GPIO_IOSEN_IOSEN15_Mask

/************************************* GPIO->UHD  ***************************************/
#define GPIO_UHD_UHD0_Pos                     ((uint32_t)0)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_UHD_UHD0                         GPIO_UHD_UHD0_Mask
#define GPIO_UHD_UHD1_Pos                     ((uint32_t)1)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_UHD_UHD1                         GPIO_UHD_UHD1_Mask
#define GPIO_UHD_UHD2_Pos                     ((uint32_t)2)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_UHD_UHD2                         GPIO_UHD_UHD2_Mask
#define GPIO_UHD_UHD3_Pos                     ((uint32_t)3)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_UHD_UHD3                         GPIO_UHD_UHD3_Mask
#define GPIO_UHD_UHD4_Pos                     ((uint32_t)4)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_UHD_UHD4                         GPIO_UHD_UHD4_Mask
#define GPIO_UHD_UHD5_Pos                     ((uint32_t)5)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_UHD_UHD5                         GPIO_UHD_UHD5_Mask
#define GPIO_UHD_UHD6_Pos                     ((uint32_t)6)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_UHD_UHD6                         GPIO_UHD_UHD6_Mask
#define GPIO_UHD_UHD7_Pos                     ((uint32_t)7)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_UHD_UHD7                         GPIO_UHD_UHD7_Mask
#define GPIO_UHD_UHD8_Pos                     ((uint32_t)8)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD8_Mask                    (((uint32_t)0x01) << 8)
#define GPIO_UHD_UHD8                         GPIO_UHD_UHD8_Mask
#define GPIO_UHD_UHD9_Pos                     ((uint32_t)9)                     /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD9_Mask                    (((uint32_t)0x01) << 9)
#define GPIO_UHD_UHD9                         GPIO_UHD_UHD9_Mask
#define GPIO_UHD_UHD10_Pos                    ((uint32_t)10)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD10_Mask                   (((uint32_t)0x01) << 10)
#define GPIO_UHD_UHD10                        GPIO_UHD_UHD10_Mask
#define GPIO_UHD_UHD11_Pos                    ((uint32_t)11)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD11_Mask                   (((uint32_t)0x01) << 11)
#define GPIO_UHD_UHD11                        GPIO_UHD_UHD11_Mask
#define GPIO_UHD_UHD12_Pos                    ((uint32_t)12)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD12_Mask                   (((uint32_t)0x01) << 12)
#define GPIO_UHD_UHD12                        GPIO_UHD_UHD12_Mask
#define GPIO_UHD_UHD13_Pos                    ((uint32_t)13)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD13_Mask                   (((uint32_t)0x01) << 13)
#define GPIO_UHD_UHD13                        GPIO_UHD_UHD13_Mask
#define GPIO_UHD_UHD14_Pos                    ((uint32_t)14)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD14_Mask                   (((uint32_t)0x01) << 14)
#define GPIO_UHD_UHD14                        GPIO_UHD_UHD14_Mask
#define GPIO_UHD_UHD15_Pos                    ((uint32_t)15)                    /* Port x pin y Ultra high drive switch */
#define GPIO_UHD_UHD15_Mask                   (((uint32_t)0x01) << 15)
#define GPIO_UHD_UHD15                        GPIO_UHD_UHD15_Mask

/*****************************************************************************************
*                                     Peripheral AFIO                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t EVCR;                   /* EVCR */
  __IO uint32_t MAPR;                   /* MAPR */
  __IO uint32_t EXTICR1;                /* EXTICR1 */
  __IO uint32_t EXTICR2;                /* EXTICR2 */
  __IO uint32_t EXTICR3;                /* EXTICR3 */
  __IO uint32_t EXTICR4;                /* EXTICR4 */
       uint16_t RESERVED1[2];
  __IO uint32_t MAPR2;                  /* MAPR2 */
}AFIO_TypeDef;

/************************************* AFIO->EVCR  **************************************/
#define AFIO_EVCR_EVOE_Pos                    ((uint32_t)7)                     /* Event output enable */
#define AFIO_EVCR_EVOE_Mask                   (((uint32_t)0x01) << 7)
#define AFIO_EVCR_EVOE                        AFIO_EVCR_EVOE_Mask
#define AFIO_EVCR_PORT_Pos                    ((uint32_t)4)                     /* Port selection */
#define AFIO_EVCR_PORT_Mask                   (((uint32_t)0x07) << 4)
#define AFIO_EVCR_PORT                        AFIO_EVCR_PORT_Mask
#define AFIO_EVCR_PORT_0                      (((uint32_t)0x1 << AFIO_EVCR_PORT_Pos))
#define AFIO_EVCR_PORT_1                      (((uint32_t)0x2 << AFIO_EVCR_PORT_Pos))
#define AFIO_EVCR_PORT_2                      (((uint32_t)0x4 << AFIO_EVCR_PORT_Pos))
#define AFIO_EVCR_PIN_Pos                     ((uint32_t)0)                     /* Pin selection, x=A..E */
#define AFIO_EVCR_PIN_Mask                    (((uint32_t)0x0F) << 0)
#define AFIO_EVCR_PIN                         AFIO_EVCR_PIN_Mask
#define AFIO_EVCR_PIN_0                       (((uint32_t)0x1))
#define AFIO_EVCR_PIN_1                       (((uint32_t)0x2))
#define AFIO_EVCR_PIN_2                       (((uint32_t)0x4))
#define AFIO_EVCR_PIN_3                       (((uint32_t)0x8))

/************************************* AFIO->MAPR  **************************************/
#define AFIO_MAPR_SWJ_CFG_Pos                 ((uint32_t)24)                    /* Serial wire JTAG configuration */
#define AFIO_MAPR_SWJ_CFG_Mask                (((uint32_t)0x07) << 24)
#define AFIO_MAPR_SWJ_CFG                     AFIO_MAPR_SWJ_CFG_Mask
#define AFIO_MAPR_SWJ_CFG_0                   (((uint32_t)0x1 << AFIO_MAPR_SWJ_CFG_Pos))
#define AFIO_MAPR_SWJ_CFG_1                   (((uint32_t)0x2 << AFIO_MAPR_SWJ_CFG_Pos))
#define AFIO_MAPR_SWJ_CFG_2                   (((uint32_t)0x4 << AFIO_MAPR_SWJ_CFG_Pos))
#define AFIO_MAPR_ADC2_ETRGREG_REMAP_Pos      ((uint32_t)20)                    /* ADC2 external trigger regular conversion remapping */
#define AFIO_MAPR_ADC2_ETRGREG_REMAP_Mask     (((uint32_t)0x01) << 20)
#define AFIO_MAPR_ADC2_ETRGREG_REMAP          AFIO_MAPR_ADC2_ETRGREG_REMAP_Mask
#define AFIO_MAPR_ADC2_ETRGINJ_REMAP_Pos      ((uint32_t)19)                    /* ADC2 external trigger injected conversion remapping */
#define AFIO_MAPR_ADC2_ETRGINJ_REMAP_Mask     (((uint32_t)0x01) << 19)
#define AFIO_MAPR_ADC2_ETRGINJ_REMAP          AFIO_MAPR_ADC2_ETRGINJ_REMAP_Mask
#define AFIO_MAPR_ADC1_ETRGREG_REMAP_Pos      ((uint32_t)18)                    /* ADC1 external trigger regular conversion remapping */
#define AFIO_MAPR_ADC1_ETRGREG_REMAP_Mask     (((uint32_t)0x01) << 18)
#define AFIO_MAPR_ADC1_ETRGREG_REMAP          AFIO_MAPR_ADC1_ETRGREG_REMAP_Mask
#define AFIO_MAPR_ADC1_ETRGINJ_REMAP_Pos      ((uint32_t)17)                    /* ADC1 External trigger injected conversion remapping */
#define AFIO_MAPR_ADC1_ETRGINJ_REMAP_Mask     (((uint32_t)0x01) << 17)
#define AFIO_MAPR_ADC1_ETRGINJ_REMAP          AFIO_MAPR_ADC1_ETRGINJ_REMAP_Mask
#define AFIO_MAPR_TIM5CH4_IREMAP_Pos          ((uint32_t)16)                    /* TIM5 channel4 internal remap */
#define AFIO_MAPR_TIM5CH4_IREMAP_Mask         (((uint32_t)0x01) << 16)
#define AFIO_MAPR_TIM5CH4_IREMAP              AFIO_MAPR_TIM5CH4_IREMAP_Mask
#define AFIO_MAPR_PD01_REMAP_Pos              ((uint32_t)15)                    /* Port D0/Port D1 mapping on OSC_IN/OSC_OUT */
#define AFIO_MAPR_PD01_REMAP_Mask             (((uint32_t)0x01) << 15)
#define AFIO_MAPR_PD01_REMAP                  AFIO_MAPR_PD01_REMAP_Mask
#define AFIO_MAPR_CAN1_REMAP_Pos              ((uint32_t)13)                    /* CAN alternate function remapping */
#define AFIO_MAPR_CAN1_REMAP_Mask             (((uint32_t)0x03) << 13)
#define AFIO_MAPR_CAN1_REMAP                  AFIO_MAPR_CAN1_REMAP_Mask
#define AFIO_MAPR_CAN1_REMAP_0                (((uint32_t)0x1 << AFIO_MAPR_CAN1_REMAP_Pos))
#define AFIO_MAPR_CAN1_REMAP_1                (((uint32_t)0x2 << AFIO_MAPR_CAN1_REMAP_Pos))
#define AFIO_MAPR_TIM4_REMAP_Pos              ((uint32_t)12)                    /* TIM4 remapping */
#define AFIO_MAPR_TIM4_REMAP_Mask             (((uint32_t)0x01) << 12)
#define AFIO_MAPR_TIM4_REMAP                  AFIO_MAPR_TIM4_REMAP_Mask
#define AFIO_MAPR_TIM3_REMAP_Pos              ((uint32_t)10)                    /* TIM3 remapping */
#define AFIO_MAPR_TIM3_REMAP_Mask             (((uint32_t)0x03) << 10)
#define AFIO_MAPR_TIM3_REMAP                  AFIO_MAPR_TIM3_REMAP_Mask
#define AFIO_MAPR_TIM3_REMAP_0                (((uint32_t)0x1 << AFIO_MAPR_TIM3_REMAP_Pos))
#define AFIO_MAPR_TIM3_REMAP_1                (((uint32_t)0x2 << AFIO_MAPR_TIM3_REMAP_Pos))
#define AFIO_MAPR_TIM2_REMAP_Pos              ((uint32_t)8)                     /* TIM2 remapping */
#define AFIO_MAPR_TIM2_REMAP_Mask             (((uint32_t)0x03) << 8)
#define AFIO_MAPR_TIM2_REMAP                  AFIO_MAPR_TIM2_REMAP_Mask
#define AFIO_MAPR_TIM2_REMAP_0                (((uint32_t)0x1 << AFIO_MAPR_TIM2_REMAP_Pos))
#define AFIO_MAPR_TIM2_REMAP_1                (((uint32_t)0x2 << AFIO_MAPR_TIM2_REMAP_Pos))
#define AFIO_MAPR_TIM1_REMAP_Pos              ((uint32_t)6)                     /* TIM1 remapping */
#define AFIO_MAPR_TIM1_REMAP_Mask             (((uint32_t)0x03) << 6)
#define AFIO_MAPR_TIM1_REMAP                  AFIO_MAPR_TIM1_REMAP_Mask
#define AFIO_MAPR_TIM1_REMAP_0                (((uint32_t)0x1 << AFIO_MAPR_TIM1_REMAP_Pos))
#define AFIO_MAPR_TIM1_REMAP_1                (((uint32_t)0x2 << AFIO_MAPR_TIM1_REMAP_Pos))
#define AFIO_MAPR_USART3_REMAP_Pos            ((uint32_t)4)                     /* USART3 remapping */
#define AFIO_MAPR_USART3_REMAP_Mask           (((uint32_t)0x03) << 4)
#define AFIO_MAPR_USART3_REMAP                AFIO_MAPR_USART3_REMAP_Mask
#define AFIO_MAPR_USART3_REMAP_0              (((uint32_t)0x1 << AFIO_MAPR_USART3_REMAP_Pos))
#define AFIO_MAPR_USART3_REMAP_1              (((uint32_t)0x2 << AFIO_MAPR_USART3_REMAP_Pos))
#define AFIO_MAPR_USART2_REMAP_Pos            ((uint32_t)3)                     /* USART2 remapping */
#define AFIO_MAPR_USART2_REMAP_Mask           (((uint32_t)0x01) << 3)
#define AFIO_MAPR_USART2_REMAP                AFIO_MAPR_USART2_REMAP_Mask
#define AFIO_MAPR_USART1_REMAP_Pos            ((uint32_t)2)                     /* USART1 remapping */
#define AFIO_MAPR_USART1_REMAP_Mask           (((uint32_t)0x01) << 2)
#define AFIO_MAPR_USART1_REMAP                AFIO_MAPR_USART1_REMAP_Mask
#define AFIO_MAPR_I2C1_REMAP_Pos              ((uint32_t)1)                     /* I2C1 remapping */
#define AFIO_MAPR_I2C1_REMAP_Mask             (((uint32_t)0x01) << 1)
#define AFIO_MAPR_I2C1_REMAP                  AFIO_MAPR_I2C1_REMAP_Mask
#define AFIO_MAPR_SPI1_REMAP_Pos              ((uint32_t)0)                     /* SPI1 remapping */
#define AFIO_MAPR_SPI1_REMAP_Mask             (((uint32_t)0x01) << 0)
#define AFIO_MAPR_SPI1_REMAP                  AFIO_MAPR_SPI1_REMAP_Mask

/*********************************** AFIO->EXTICR1  *************************************/
#define AFIO_EXTICR1_EXTI0_Pos                ((uint32_t)0)                     /* EXTI x configuration */
#define AFIO_EXTICR1_EXTI0_Mask               (((uint32_t)0x0F) << 0)
#define AFIO_EXTICR1_EXTI0                    AFIO_EXTICR1_EXTI0_Mask
#define AFIO_EXTICR1_EXTI0_0                  (((uint32_t)0x1))
#define AFIO_EXTICR1_EXTI0_1                  (((uint32_t)0x2))
#define AFIO_EXTICR1_EXTI0_2                  (((uint32_t)0x4))
#define AFIO_EXTICR1_EXTI0_3                  (((uint32_t)0x8))
#define AFIO_EXTICR1_EXTI1_Pos                ((uint32_t)4)                     /* EXTI x configuration */
#define AFIO_EXTICR1_EXTI1_Mask               (((uint32_t)0x0F) << 4)
#define AFIO_EXTICR1_EXTI1                    AFIO_EXTICR1_EXTI1_Mask
#define AFIO_EXTICR1_EXTI1_0                  (((uint32_t)0x1 << AFIO_EXTICR1_EXTI1_Pos))
#define AFIO_EXTICR1_EXTI1_1                  (((uint32_t)0x2 << AFIO_EXTICR1_EXTI1_Pos))
#define AFIO_EXTICR1_EXTI1_2                  (((uint32_t)0x4 << AFIO_EXTICR1_EXTI1_Pos))
#define AFIO_EXTICR1_EXTI1_3                  (((uint32_t)0x8 << AFIO_EXTICR1_EXTI1_Pos))
#define AFIO_EXTICR1_EXTI2_Pos                ((uint32_t)8)                     /* EXTI x configuration */
#define AFIO_EXTICR1_EXTI2_Mask               (((uint32_t)0x0F) << 8)
#define AFIO_EXTICR1_EXTI2                    AFIO_EXTICR1_EXTI2_Mask
#define AFIO_EXTICR1_EXTI2_0                  (((uint32_t)0x1 << AFIO_EXTICR1_EXTI2_Pos))
#define AFIO_EXTICR1_EXTI2_1                  (((uint32_t)0x2 << AFIO_EXTICR1_EXTI2_Pos))
#define AFIO_EXTICR1_EXTI2_2                  (((uint32_t)0x4 << AFIO_EXTICR1_EXTI2_Pos))
#define AFIO_EXTICR1_EXTI2_3                  (((uint32_t)0x8 << AFIO_EXTICR1_EXTI2_Pos))
#define AFIO_EXTICR1_EXTI3_Pos                ((uint32_t)12)                    /* EXTI x configuration */
#define AFIO_EXTICR1_EXTI3_Mask               (((uint32_t)0x0F) << 12)
#define AFIO_EXTICR1_EXTI3                    AFIO_EXTICR1_EXTI3_Mask
#define AFIO_EXTICR1_EXTI3_0                  (((uint32_t)0x1 << AFIO_EXTICR1_EXTI3_Pos))
#define AFIO_EXTICR1_EXTI3_1                  (((uint32_t)0x2 << AFIO_EXTICR1_EXTI3_Pos))
#define AFIO_EXTICR1_EXTI3_2                  (((uint32_t)0x4 << AFIO_EXTICR1_EXTI3_Pos))
#define AFIO_EXTICR1_EXTI3_3                  (((uint32_t)0x8 << AFIO_EXTICR1_EXTI3_Pos))

/*********************************** AFIO->EXTICR2  *************************************/
#define AFIO_EXTICR2_EXTI4_Pos                ((uint32_t)0)                     /* EXTI x configuration */
#define AFIO_EXTICR2_EXTI4_Mask               (((uint32_t)0x0F) << 0)
#define AFIO_EXTICR2_EXTI4                    AFIO_EXTICR2_EXTI4_Mask
#define AFIO_EXTICR2_EXTI4_0                  (((uint32_t)0x1))
#define AFIO_EXTICR2_EXTI4_1                  (((uint32_t)0x2))
#define AFIO_EXTICR2_EXTI4_2                  (((uint32_t)0x4))
#define AFIO_EXTICR2_EXTI4_3                  (((uint32_t)0x8))
#define AFIO_EXTICR2_EXTI5_Pos                ((uint32_t)4)                     /* EXTI x configuration */
#define AFIO_EXTICR2_EXTI5_Mask               (((uint32_t)0x0F) << 4)
#define AFIO_EXTICR2_EXTI5                    AFIO_EXTICR2_EXTI5_Mask
#define AFIO_EXTICR2_EXTI5_0                  (((uint32_t)0x1 << AFIO_EXTICR2_EXTI5_Pos))
#define AFIO_EXTICR2_EXTI5_1                  (((uint32_t)0x2 << AFIO_EXTICR2_EXTI5_Pos))
#define AFIO_EXTICR2_EXTI5_2                  (((uint32_t)0x4 << AFIO_EXTICR2_EXTI5_Pos))
#define AFIO_EXTICR2_EXTI5_3                  (((uint32_t)0x8 << AFIO_EXTICR2_EXTI5_Pos))
#define AFIO_EXTICR2_EXTI6_Pos                ((uint32_t)8)                     /* EXTI x configuration */
#define AFIO_EXTICR2_EXTI6_Mask               (((uint32_t)0x0F) << 8)
#define AFIO_EXTICR2_EXTI6                    AFIO_EXTICR2_EXTI6_Mask
#define AFIO_EXTICR2_EXTI6_0                  (((uint32_t)0x1 << AFIO_EXTICR2_EXTI6_Pos))
#define AFIO_EXTICR2_EXTI6_1                  (((uint32_t)0x2 << AFIO_EXTICR2_EXTI6_Pos))
#define AFIO_EXTICR2_EXTI6_2                  (((uint32_t)0x4 << AFIO_EXTICR2_EXTI6_Pos))
#define AFIO_EXTICR2_EXTI6_3                  (((uint32_t)0x8 << AFIO_EXTICR2_EXTI6_Pos))
#define AFIO_EXTICR2_EXTI7_Pos                ((uint32_t)12)                    /* EXTI x configuration */
#define AFIO_EXTICR2_EXTI7_Mask               (((uint32_t)0x0F) << 12)
#define AFIO_EXTICR2_EXTI7                    AFIO_EXTICR2_EXTI7_Mask
#define AFIO_EXTICR2_EXTI7_0                  (((uint32_t)0x1 << AFIO_EXTICR2_EXTI7_Pos))
#define AFIO_EXTICR2_EXTI7_1                  (((uint32_t)0x2 << AFIO_EXTICR2_EXTI7_Pos))
#define AFIO_EXTICR2_EXTI7_2                  (((uint32_t)0x4 << AFIO_EXTICR2_EXTI7_Pos))
#define AFIO_EXTICR2_EXTI7_3                  (((uint32_t)0x8 << AFIO_EXTICR2_EXTI7_Pos))

/*********************************** AFIO->EXTICR3  *************************************/
#define AFIO_EXTICR3_EXTI8_Pos                ((uint32_t)0)                     /* EXTI x configuration */
#define AFIO_EXTICR3_EXTI8_Mask               (((uint32_t)0x0F) << 0)
#define AFIO_EXTICR3_EXTI8                    AFIO_EXTICR3_EXTI8_Mask
#define AFIO_EXTICR3_EXTI8_0                  (((uint32_t)0x1))
#define AFIO_EXTICR3_EXTI8_1                  (((uint32_t)0x2))
#define AFIO_EXTICR3_EXTI8_2                  (((uint32_t)0x4))
#define AFIO_EXTICR3_EXTI8_3                  (((uint32_t)0x8))
#define AFIO_EXTICR3_EXTI9_Pos                ((uint32_t)4)                     /* EXTI x configuration */
#define AFIO_EXTICR3_EXTI9_Mask               (((uint32_t)0x0F) << 4)
#define AFIO_EXTICR3_EXTI9                    AFIO_EXTICR3_EXTI9_Mask
#define AFIO_EXTICR3_EXTI9_0                  (((uint32_t)0x1 << AFIO_EXTICR3_EXTI9_Pos))
#define AFIO_EXTICR3_EXTI9_1                  (((uint32_t)0x2 << AFIO_EXTICR3_EXTI9_Pos))
#define AFIO_EXTICR3_EXTI9_2                  (((uint32_t)0x4 << AFIO_EXTICR3_EXTI9_Pos))
#define AFIO_EXTICR3_EXTI9_3                  (((uint32_t)0x8 << AFIO_EXTICR3_EXTI9_Pos))
#define AFIO_EXTICR3_EXTI10_Pos               ((uint32_t)8)                     /* EXTI x configuration */
#define AFIO_EXTICR3_EXTI10_Mask              (((uint32_t)0x0F) << 8)
#define AFIO_EXTICR3_EXTI10                   AFIO_EXTICR3_EXTI10_Mask
#define AFIO_EXTICR3_EXTI10_0                 (((uint32_t)0x1 << AFIO_EXTICR3_EXTI10_Pos))
#define AFIO_EXTICR3_EXTI10_1                 (((uint32_t)0x2 << AFIO_EXTICR3_EXTI10_Pos))
#define AFIO_EXTICR3_EXTI10_2                 (((uint32_t)0x4 << AFIO_EXTICR3_EXTI10_Pos))
#define AFIO_EXTICR3_EXTI10_3                 (((uint32_t)0x8 << AFIO_EXTICR3_EXTI10_Pos))
#define AFIO_EXTICR3_EXTI11_Pos               ((uint32_t)12)                    /* EXTI x configuration */
#define AFIO_EXTICR3_EXTI11_Mask              (((uint32_t)0x0F) << 12)
#define AFIO_EXTICR3_EXTI11                   AFIO_EXTICR3_EXTI11_Mask
#define AFIO_EXTICR3_EXTI11_0                 (((uint32_t)0x1 << AFIO_EXTICR3_EXTI11_Pos))
#define AFIO_EXTICR3_EXTI11_1                 (((uint32_t)0x2 << AFIO_EXTICR3_EXTI11_Pos))
#define AFIO_EXTICR3_EXTI11_2                 (((uint32_t)0x4 << AFIO_EXTICR3_EXTI11_Pos))
#define AFIO_EXTICR3_EXTI11_3                 (((uint32_t)0x8 << AFIO_EXTICR3_EXTI11_Pos))

/*********************************** AFIO->EXTICR4  *************************************/
#define AFIO_EXTICR4_EXTI12_Pos               ((uint32_t)0)                     /* EXTI x configuration */
#define AFIO_EXTICR4_EXTI12_Mask              (((uint32_t)0x0F) << 0)
#define AFIO_EXTICR4_EXTI12                   AFIO_EXTICR4_EXTI12_Mask
#define AFIO_EXTICR4_EXTI12_0                 (((uint32_t)0x1))
#define AFIO_EXTICR4_EXTI12_1                 (((uint32_t)0x2))
#define AFIO_EXTICR4_EXTI12_2                 (((uint32_t)0x4))
#define AFIO_EXTICR4_EXTI12_3                 (((uint32_t)0x8))
#define AFIO_EXTICR4_EXTI13_Pos               ((uint32_t)4)                     /* EXTI x configuration */
#define AFIO_EXTICR4_EXTI13_Mask              (((uint32_t)0x0F) << 4)
#define AFIO_EXTICR4_EXTI13                   AFIO_EXTICR4_EXTI13_Mask
#define AFIO_EXTICR4_EXTI13_0                 (((uint32_t)0x1 << AFIO_EXTICR4_EXTI13_Pos))
#define AFIO_EXTICR4_EXTI13_1                 (((uint32_t)0x2 << AFIO_EXTICR4_EXTI13_Pos))
#define AFIO_EXTICR4_EXTI13_2                 (((uint32_t)0x4 << AFIO_EXTICR4_EXTI13_Pos))
#define AFIO_EXTICR4_EXTI13_3                 (((uint32_t)0x8 << AFIO_EXTICR4_EXTI13_Pos))
#define AFIO_EXTICR4_EXTI14_Pos               ((uint32_t)8)                     /* EXTI x configuration */
#define AFIO_EXTICR4_EXTI14_Mask              (((uint32_t)0x0F) << 8)
#define AFIO_EXTICR4_EXTI14                   AFIO_EXTICR4_EXTI14_Mask
#define AFIO_EXTICR4_EXTI14_0                 (((uint32_t)0x1 << AFIO_EXTICR4_EXTI14_Pos))
#define AFIO_EXTICR4_EXTI14_1                 (((uint32_t)0x2 << AFIO_EXTICR4_EXTI14_Pos))
#define AFIO_EXTICR4_EXTI14_2                 (((uint32_t)0x4 << AFIO_EXTICR4_EXTI14_Pos))
#define AFIO_EXTICR4_EXTI14_3                 (((uint32_t)0x8 << AFIO_EXTICR4_EXTI14_Pos))
#define AFIO_EXTICR4_EXTI15_Pos               ((uint32_t)12)                    /* EXTI x configuration */
#define AFIO_EXTICR4_EXTI15_Mask              (((uint32_t)0x0F) << 12)
#define AFIO_EXTICR4_EXTI15                   AFIO_EXTICR4_EXTI15_Mask
#define AFIO_EXTICR4_EXTI15_0                 (((uint32_t)0x1 << AFIO_EXTICR4_EXTI15_Pos))
#define AFIO_EXTICR4_EXTI15_1                 (((uint32_t)0x2 << AFIO_EXTICR4_EXTI15_Pos))
#define AFIO_EXTICR4_EXTI15_2                 (((uint32_t)0x4 << AFIO_EXTICR4_EXTI15_Pos))
#define AFIO_EXTICR4_EXTI15_3                 (((uint32_t)0x8 << AFIO_EXTICR4_EXTI15_Pos))

/************************************ AFIO->MAPR2  **************************************/
#define AFIO_MAPR2_FSMC_100PIN_REMAP_Pos      ((uint32_t)31)                    /* Available FSMC interface signals control */
#define AFIO_MAPR2_FSMC_100PIN_REMAP_Mask     (((uint32_t)0x01) << 31)
#define AFIO_MAPR2_FSMC_100PIN_REMAP          AFIO_MAPR2_FSMC_100PIN_REMAP_Mask
#define AFIO_MAPR2_USART1_CTSRTS_REMAP_Pos    ((uint32_t)25)                    /* USART1_CTS/RTS remapping */
#define AFIO_MAPR2_USART1_CTSRTS_REMAP_Mask   (((uint32_t)0x01) << 25)
#define AFIO_MAPR2_USART1_CTSRTS_REMAP        AFIO_MAPR2_USART1_CTSRTS_REMAP_Mask
#define AFIO_MAPR2_TIM5CH4_IREMAP2_Pos        ((uint32_t)21)                    /* TIM5CH4 remapping control bit2 */
#define AFIO_MAPR2_TIM5CH4_IREMAP2_Mask       (((uint32_t)0x01) << 21)
#define AFIO_MAPR2_TIM5CH4_IREMAP2            AFIO_MAPR2_TIM5CH4_IREMAP2_Mask
#define AFIO_MAPR2_TIM5CH4_IREMAP3_Pos        ((uint32_t)20)                    /* TIM5CH4 remapping control bit3 */
#define AFIO_MAPR2_TIM5CH4_IREMAP3_Mask       (((uint32_t)0x01) << 20)
#define AFIO_MAPR2_TIM5CH4_IREMAP3            AFIO_MAPR2_TIM5CH4_IREMAP3_Mask
#define AFIO_MAPR2_FSMC_NADV_Pos              ((uint32_t)10)                    /* FSMC_NADV remapping */
#define AFIO_MAPR2_FSMC_NADV_Mask             (((uint32_t)0x01) << 10)
#define AFIO_MAPR2_FSMC_NADV                  AFIO_MAPR2_FSMC_NADV_Mask

/*****************************************************************************************
*                                     Peripheral DMA                                     *
*****************************************************************************************/
typedef struct{
  __I  uint32_t ISR;                    /* ISR */
  __O  uint32_t IFCR;                   /* IFCR */
}DMA_TypeDef;

/************************************** DMA->ISR  ***************************************/
#define DMA_ISR_TEIF1_Pos                     ((uint32_t)3)                     /* Channel x transfer error flag */
#define DMA_ISR_TEIF1_Mask                    (((uint32_t)0x01) << 3)
#define DMA_ISR_TEIF1                         DMA_ISR_TEIF1_Mask
#define DMA_ISR_TEIF2_Pos                     ((uint32_t)7)                     /* Channel x transfer error flag */
#define DMA_ISR_TEIF2_Mask                    (((uint32_t)0x01) << 7)
#define DMA_ISR_TEIF2                         DMA_ISR_TEIF2_Mask
#define DMA_ISR_TEIF3_Pos                     ((uint32_t)11)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF3_Mask                    (((uint32_t)0x01) << 11)
#define DMA_ISR_TEIF3                         DMA_ISR_TEIF3_Mask
#define DMA_ISR_TEIF4_Pos                     ((uint32_t)15)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF4_Mask                    (((uint32_t)0x01) << 15)
#define DMA_ISR_TEIF4                         DMA_ISR_TEIF4_Mask
#define DMA_ISR_TEIF5_Pos                     ((uint32_t)19)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF5_Mask                    (((uint32_t)0x01) << 19)
#define DMA_ISR_TEIF5                         DMA_ISR_TEIF5_Mask
#define DMA_ISR_TEIF6_Pos                     ((uint32_t)23)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF6_Mask                    (((uint32_t)0x01) << 23)
#define DMA_ISR_TEIF6                         DMA_ISR_TEIF6_Mask
#define DMA_ISR_TEIF7_Pos                     ((uint32_t)27)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF7_Mask                    (((uint32_t)0x01) << 27)
#define DMA_ISR_TEIF7                         DMA_ISR_TEIF7_Mask
#define DMA_ISR_HTIF1_Pos                     ((uint32_t)2)                     /* Channel x half transfer flag */
#define DMA_ISR_HTIF1_Mask                    (((uint32_t)0x01) << 2)
#define DMA_ISR_HTIF1                         DMA_ISR_HTIF1_Mask
#define DMA_ISR_HTIF2_Pos                     ((uint32_t)6)                     /* Channel x half transfer flag */
#define DMA_ISR_HTIF2_Mask                    (((uint32_t)0x01) << 6)
#define DMA_ISR_HTIF2                         DMA_ISR_HTIF2_Mask
#define DMA_ISR_HTIF3_Pos                     ((uint32_t)10)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF3_Mask                    (((uint32_t)0x01) << 10)
#define DMA_ISR_HTIF3                         DMA_ISR_HTIF3_Mask
#define DMA_ISR_HTIF4_Pos                     ((uint32_t)14)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF4_Mask                    (((uint32_t)0x01) << 14)
#define DMA_ISR_HTIF4                         DMA_ISR_HTIF4_Mask
#define DMA_ISR_HTIF5_Pos                     ((uint32_t)18)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF5_Mask                    (((uint32_t)0x01) << 18)
#define DMA_ISR_HTIF5                         DMA_ISR_HTIF5_Mask
#define DMA_ISR_HTIF6_Pos                     ((uint32_t)22)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF6_Mask                    (((uint32_t)0x01) << 22)
#define DMA_ISR_HTIF6                         DMA_ISR_HTIF6_Mask
#define DMA_ISR_HTIF7_Pos                     ((uint32_t)26)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF7_Mask                    (((uint32_t)0x01) << 26)
#define DMA_ISR_HTIF7                         DMA_ISR_HTIF7_Mask
#define DMA_ISR_TCIF1_Pos                     ((uint32_t)1)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF1_Mask                    (((uint32_t)0x01) << 1)
#define DMA_ISR_TCIF1                         DMA_ISR_TCIF1_Mask
#define DMA_ISR_TCIF2_Pos                     ((uint32_t)5)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF2_Mask                    (((uint32_t)0x01) << 5)
#define DMA_ISR_TCIF2                         DMA_ISR_TCIF2_Mask
#define DMA_ISR_TCIF3_Pos                     ((uint32_t)9)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF3_Mask                    (((uint32_t)0x01) << 9)
#define DMA_ISR_TCIF3                         DMA_ISR_TCIF3_Mask
#define DMA_ISR_TCIF4_Pos                     ((uint32_t)13)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF4_Mask                    (((uint32_t)0x01) << 13)
#define DMA_ISR_TCIF4                         DMA_ISR_TCIF4_Mask
#define DMA_ISR_TCIF5_Pos                     ((uint32_t)17)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF5_Mask                    (((uint32_t)0x01) << 17)
#define DMA_ISR_TCIF5                         DMA_ISR_TCIF5_Mask
#define DMA_ISR_TCIF6_Pos                     ((uint32_t)21)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF6_Mask                    (((uint32_t)0x01) << 21)
#define DMA_ISR_TCIF6                         DMA_ISR_TCIF6_Mask
#define DMA_ISR_TCIF7_Pos                     ((uint32_t)25)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF7_Mask                    (((uint32_t)0x01) << 25)
#define DMA_ISR_TCIF7                         DMA_ISR_TCIF7_Mask
#define DMA_ISR_GIF1_Pos                      ((uint32_t)0)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF1_Mask                     (((uint32_t)0x01) << 0)
#define DMA_ISR_GIF1                          DMA_ISR_GIF1_Mask
#define DMA_ISR_GIF2_Pos                      ((uint32_t)4)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF2_Mask                     (((uint32_t)0x01) << 4)
#define DMA_ISR_GIF2                          DMA_ISR_GIF2_Mask
#define DMA_ISR_GIF3_Pos                      ((uint32_t)8)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF3_Mask                     (((uint32_t)0x01) << 8)
#define DMA_ISR_GIF3                          DMA_ISR_GIF3_Mask
#define DMA_ISR_GIF4_Pos                      ((uint32_t)12)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF4_Mask                     (((uint32_t)0x01) << 12)
#define DMA_ISR_GIF4                          DMA_ISR_GIF4_Mask
#define DMA_ISR_GIF5_Pos                      ((uint32_t)16)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF5_Mask                     (((uint32_t)0x01) << 16)
#define DMA_ISR_GIF5                          DMA_ISR_GIF5_Mask
#define DMA_ISR_GIF6_Pos                      ((uint32_t)20)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF6_Mask                     (((uint32_t)0x01) << 20)
#define DMA_ISR_GIF6                          DMA_ISR_GIF6_Mask
#define DMA_ISR_GIF7_Pos                      ((uint32_t)24)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF7_Mask                     (((uint32_t)0x01) << 24)
#define DMA_ISR_GIF7                          DMA_ISR_GIF7_Mask

/************************************* DMA->IFCR  ***************************************/
#define DMA_IFCR_CTEIF1_Pos                   ((uint32_t)3)                     /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF1_Mask                  (((uint32_t)0x01) << 3)
#define DMA_IFCR_CTEIF1                       DMA_IFCR_CTEIF1_Mask
#define DMA_IFCR_CTEIF2_Pos                   ((uint32_t)7)                     /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF2_Mask                  (((uint32_t)0x01) << 7)
#define DMA_IFCR_CTEIF2                       DMA_IFCR_CTEIF2_Mask
#define DMA_IFCR_CTEIF3_Pos                   ((uint32_t)11)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF3_Mask                  (((uint32_t)0x01) << 11)
#define DMA_IFCR_CTEIF3                       DMA_IFCR_CTEIF3_Mask
#define DMA_IFCR_CTEIF4_Pos                   ((uint32_t)15)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF4_Mask                  (((uint32_t)0x01) << 15)
#define DMA_IFCR_CTEIF4                       DMA_IFCR_CTEIF4_Mask
#define DMA_IFCR_CTEIF5_Pos                   ((uint32_t)19)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF5_Mask                  (((uint32_t)0x01) << 19)
#define DMA_IFCR_CTEIF5                       DMA_IFCR_CTEIF5_Mask
#define DMA_IFCR_CTEIF6_Pos                   ((uint32_t)23)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF6_Mask                  (((uint32_t)0x01) << 23)
#define DMA_IFCR_CTEIF6                       DMA_IFCR_CTEIF6_Mask
#define DMA_IFCR_CTEIF7_Pos                   ((uint32_t)27)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF7_Mask                  (((uint32_t)0x01) << 27)
#define DMA_IFCR_CTEIF7                       DMA_IFCR_CTEIF7_Mask
#define DMA_IFCR_CHTIF1_Pos                   ((uint32_t)2)                     /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF1_Mask                  (((uint32_t)0x01) << 2)
#define DMA_IFCR_CHTIF1                       DMA_IFCR_CHTIF1_Mask
#define DMA_IFCR_CHTIF2_Pos                   ((uint32_t)6)                     /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF2_Mask                  (((uint32_t)0x01) << 6)
#define DMA_IFCR_CHTIF2                       DMA_IFCR_CHTIF2_Mask
#define DMA_IFCR_CHTIF3_Pos                   ((uint32_t)10)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF3_Mask                  (((uint32_t)0x01) << 10)
#define DMA_IFCR_CHTIF3                       DMA_IFCR_CHTIF3_Mask
#define DMA_IFCR_CHTIF4_Pos                   ((uint32_t)14)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF4_Mask                  (((uint32_t)0x01) << 14)
#define DMA_IFCR_CHTIF4                       DMA_IFCR_CHTIF4_Mask
#define DMA_IFCR_CHTIF5_Pos                   ((uint32_t)18)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF5_Mask                  (((uint32_t)0x01) << 18)
#define DMA_IFCR_CHTIF5                       DMA_IFCR_CHTIF5_Mask
#define DMA_IFCR_CHTIF6_Pos                   ((uint32_t)22)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF6_Mask                  (((uint32_t)0x01) << 22)
#define DMA_IFCR_CHTIF6                       DMA_IFCR_CHTIF6_Mask
#define DMA_IFCR_CHTIF7_Pos                   ((uint32_t)26)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF7_Mask                  (((uint32_t)0x01) << 26)
#define DMA_IFCR_CHTIF7                       DMA_IFCR_CHTIF7_Mask
#define DMA_IFCR_CTCIF1_Pos                   ((uint32_t)1)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF1_Mask                  (((uint32_t)0x01) << 1)
#define DMA_IFCR_CTCIF1                       DMA_IFCR_CTCIF1_Mask
#define DMA_IFCR_CTCIF2_Pos                   ((uint32_t)5)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF2_Mask                  (((uint32_t)0x01) << 5)
#define DMA_IFCR_CTCIF2                       DMA_IFCR_CTCIF2_Mask
#define DMA_IFCR_CTCIF3_Pos                   ((uint32_t)9)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF3_Mask                  (((uint32_t)0x01) << 9)
#define DMA_IFCR_CTCIF3                       DMA_IFCR_CTCIF3_Mask
#define DMA_IFCR_CTCIF4_Pos                   ((uint32_t)13)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF4_Mask                  (((uint32_t)0x01) << 13)
#define DMA_IFCR_CTCIF4                       DMA_IFCR_CTCIF4_Mask
#define DMA_IFCR_CTCIF5_Pos                   ((uint32_t)17)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF5_Mask                  (((uint32_t)0x01) << 17)
#define DMA_IFCR_CTCIF5                       DMA_IFCR_CTCIF5_Mask
#define DMA_IFCR_CTCIF6_Pos                   ((uint32_t)21)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF6_Mask                  (((uint32_t)0x01) << 21)
#define DMA_IFCR_CTCIF6                       DMA_IFCR_CTCIF6_Mask
#define DMA_IFCR_CTCIF7_Pos                   ((uint32_t)25)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF7_Mask                  (((uint32_t)0x01) << 25)
#define DMA_IFCR_CTCIF7                       DMA_IFCR_CTCIF7_Mask
#define DMA_IFCR_CGIF1_Pos                    ((uint32_t)0)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF1_Mask                   (((uint32_t)0x01) << 0)
#define DMA_IFCR_CGIF1                        DMA_IFCR_CGIF1_Mask
#define DMA_IFCR_CGIF2_Pos                    ((uint32_t)4)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF2_Mask                   (((uint32_t)0x01) << 4)
#define DMA_IFCR_CGIF2                        DMA_IFCR_CGIF2_Mask
#define DMA_IFCR_CGIF3_Pos                    ((uint32_t)8)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF3_Mask                   (((uint32_t)0x01) << 8)
#define DMA_IFCR_CGIF3                        DMA_IFCR_CGIF3_Mask
#define DMA_IFCR_CGIF4_Pos                    ((uint32_t)12)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF4_Mask                   (((uint32_t)0x01) << 12)
#define DMA_IFCR_CGIF4                        DMA_IFCR_CGIF4_Mask
#define DMA_IFCR_CGIF5_Pos                    ((uint32_t)16)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF5_Mask                   (((uint32_t)0x01) << 16)
#define DMA_IFCR_CGIF5                        DMA_IFCR_CGIF5_Mask
#define DMA_IFCR_CGIF6_Pos                    ((uint32_t)20)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF6_Mask                   (((uint32_t)0x01) << 20)
#define DMA_IFCR_CGIF6                        DMA_IFCR_CGIF6_Mask
#define DMA_IFCR_CGIF7_Pos                    ((uint32_t)24)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF7_Mask                   (((uint32_t)0x01) << 24)
#define DMA_IFCR_CGIF7                        DMA_IFCR_CGIF7_Mask

/*****************************************************************************************
*                                 Peripheral DMA_Channel                                 *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CCR;                    /* CCR */
  __IO uint32_t CNDTR;                  /* CNDTR */
  __IO uint32_t CPAR;                   /* CPAR */
  __IO uint32_t CMAR;                   /* CMAR */
}DMA_Channel_TypeDef;

/********************************** DMA_Channel->CCR  ***********************************/
#define DMA_Channel_CCR_MEM2MEM_Pos           ((uint32_t)14)                    /* Memory to memory mode */
#define DMA_Channel_CCR_MEM2MEM_Mask          (((uint32_t)0x01) << 14)
#define DMA_Channel_CCR_MEM2MEM               DMA_Channel_CCR_MEM2MEM_Mask
#define DMA_Channel_CCR_PL_Pos                ((uint32_t)12)                    /* Channel priority level */
#define DMA_Channel_CCR_PL_Mask               (((uint32_t)0x03) << 12)
#define DMA_Channel_CCR_PL                    DMA_Channel_CCR_PL_Mask
#define DMA_Channel_CCR_PL_0                  (((uint32_t)0x1 << DMA_Channel_CCR_PL_Pos))
#define DMA_Channel_CCR_PL_1                  (((uint32_t)0x2 << DMA_Channel_CCR_PL_Pos))
#define DMA_Channel_CCR_MSIZE_Pos             ((uint32_t)10)                    /* Memory size */
#define DMA_Channel_CCR_MSIZE_Mask            (((uint32_t)0x03) << 10)
#define DMA_Channel_CCR_MSIZE                 DMA_Channel_CCR_MSIZE_Mask
#define DMA_Channel_CCR_MSIZE_0               (((uint32_t)0x1 << DMA_Channel_CCR_MSIZE_Pos))
#define DMA_Channel_CCR_MSIZE_1               (((uint32_t)0x2 << DMA_Channel_CCR_MSIZE_Pos))
#define DMA_Channel_CCR_PSIZE_Pos             ((uint32_t)8)                     /* Peripheral size */
#define DMA_Channel_CCR_PSIZE_Mask            (((uint32_t)0x03) << 8)
#define DMA_Channel_CCR_PSIZE                 DMA_Channel_CCR_PSIZE_Mask
#define DMA_Channel_CCR_PSIZE_0               (((uint32_t)0x1 << DMA_Channel_CCR_PSIZE_Pos))
#define DMA_Channel_CCR_PSIZE_1               (((uint32_t)0x2 << DMA_Channel_CCR_PSIZE_Pos))
#define DMA_Channel_CCR_MINC_Pos              ((uint32_t)7)                     /* Memory increment mode */
#define DMA_Channel_CCR_MINC_Mask             (((uint32_t)0x01) << 7)
#define DMA_Channel_CCR_MINC                  DMA_Channel_CCR_MINC_Mask
#define DMA_Channel_CCR_PINC_Pos              ((uint32_t)6)                     /* Peripheral increment mode */
#define DMA_Channel_CCR_PINC_Mask             (((uint32_t)0x01) << 6)
#define DMA_Channel_CCR_PINC                  DMA_Channel_CCR_PINC_Mask
#define DMA_Channel_CCR_CIRC_Pos              ((uint32_t)5)                     /* Circular mode */
#define DMA_Channel_CCR_CIRC_Mask             (((uint32_t)0x01) << 5)
#define DMA_Channel_CCR_CIRC                  DMA_Channel_CCR_CIRC_Mask
#define DMA_Channel_CCR_DIR_Pos               ((uint32_t)4)                     /* Data transfer direction */
#define DMA_Channel_CCR_DIR_Mask              (((uint32_t)0x01) << 4)
#define DMA_Channel_CCR_DIR                   DMA_Channel_CCR_DIR_Mask
#define DMA_Channel_CCR_TEIE_Pos              ((uint32_t)3)                     /* Transfer error interrupt enable */
#define DMA_Channel_CCR_TEIE_Mask             (((uint32_t)0x01) << 3)
#define DMA_Channel_CCR_TEIE                  DMA_Channel_CCR_TEIE_Mask
#define DMA_Channel_CCR_HTIE_Pos              ((uint32_t)2)                     /* Half transfer interrupt enable */
#define DMA_Channel_CCR_HTIE_Mask             (((uint32_t)0x01) << 2)
#define DMA_Channel_CCR_HTIE                  DMA_Channel_CCR_HTIE_Mask
#define DMA_Channel_CCR_TCIE_Pos              ((uint32_t)1)                     /* Transfer complete interrupt enable */
#define DMA_Channel_CCR_TCIE_Mask             (((uint32_t)0x01) << 1)
#define DMA_Channel_CCR_TCIE                  DMA_Channel_CCR_TCIE_Mask
#define DMA_Channel_CCR_EN_Pos                ((uint32_t)0)                     /* Channel enable */
#define DMA_Channel_CCR_EN_Mask               (((uint32_t)0x01) << 0)
#define DMA_Channel_CCR_EN                    DMA_Channel_CCR_EN_Mask

/********************************* DMA_Channel->CNDTR  **********************************/
#define DMA_Channel_CNDTR_NDT_Pos             ((uint32_t)0)                     /* Number of data to transfer */
#define DMA_Channel_CNDTR_NDT_Mask            (((uint32_t)0xFFFF) << 0)
#define DMA_Channel_CNDTR_NDT                 DMA_Channel_CNDTR_NDT_Mask

/********************************* DMA_Channel->CPAR  ***********************************/
#define DMA_Channel_CPAR_PA_Pos               ((uint32_t)3)                     /* Peripheral address */
#define DMA_Channel_CPAR_PA_Mask              (((uint32_t)0x1FFFFFFF) << 3)
#define DMA_Channel_CPAR_PA                   DMA_Channel_CPAR_PA_Mask

/********************************* DMA_Channel->CMAR  ***********************************/
#define DMA_Channel_CMAR_MA_Pos               ((uint32_t)0)                     /* Memory address */
#define DMA_Channel_CMAR_MA_Mask              (((uint32_t)0xFFFFFFFF) << 0)
#define DMA_Channel_CMAR_MA                   DMA_Channel_CMAR_MA_Mask

/*****************************************************************************************
*                                     Peripheral ADC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t SMPR1;                  /* SMPR1 */
  __IO uint32_t SMPR2;                  /* SMPR2 */
  __IO uint32_t JOFR1;                  /* JOFR1 */
  __IO uint32_t JOFR2;                  /* JOFR2 */
  __IO uint32_t JOFR3;                  /* JOFR3 */
  __IO uint32_t JOFR4;                  /* JOFR4 */
  __IO uint32_t HTR;                    /* HTR */
  __IO uint32_t LTR;                    /* LTR */
  __IO uint32_t SQR1;                   /* SQR1 */
  __IO uint32_t SQR2;                   /* SQR2 */
  __IO uint32_t SQR3;                   /* SQR3 */
  __IO uint32_t JSQR;                   /* JSQR */
  __I  uint32_t JDR1;                   /* JDR1 */
  __I  uint32_t JDR2;                   /* JDR2 */
  __I  uint32_t JDR3;                   /* JDR3 */
  __I  uint32_t JDR4;                   /* JDR4 */
  __IO uint32_t DR;                     /* DR */
}ADC_TypeDef;

/************************************** ADC->SR  ****************************************/
#define ADC_SR_STRT_Pos                       ((uint32_t)4)                     /* Regular channel Start flag */
#define ADC_SR_STRT_Mask                      (((uint32_t)0x01) << 4)
#define ADC_SR_STRT                           ADC_SR_STRT_Mask
#define ADC_SR_JSTRT_Pos                      ((uint32_t)3)                     /* Injected channel Start flag */
#define ADC_SR_JSTRT_Mask                     (((uint32_t)0x01) << 3)
#define ADC_SR_JSTRT                          ADC_SR_JSTRT_Mask
#define ADC_SR_JEOC_Pos                       ((uint32_t)2)                     /* Injected channel end of conversion */
#define ADC_SR_JEOC_Mask                      (((uint32_t)0x01) << 2)
#define ADC_SR_JEOC                           ADC_SR_JEOC_Mask
#define ADC_SR_EOC_Pos                        ((uint32_t)1)                     /* End of conversion */
#define ADC_SR_EOC_Mask                       (((uint32_t)0x01) << 1)
#define ADC_SR_EOC                            ADC_SR_EOC_Mask
#define ADC_SR_AWD_Pos                        ((uint32_t)0)                     /* Analog watchdog flag */
#define ADC_SR_AWD_Mask                       (((uint32_t)0x01) << 0)
#define ADC_SR_AWD                            ADC_SR_AWD_Mask

/************************************** ADC->CR1  ***************************************/
#define ADC_CR1_AWDEN_Pos                     ((uint32_t)23)                    /* Analog watchdog enable on regular channels */
#define ADC_CR1_AWDEN_Mask                    (((uint32_t)0x01) << 23)
#define ADC_CR1_AWDEN                         ADC_CR1_AWDEN_Mask
#define ADC_CR1_JAWDEN_Pos                    ((uint32_t)22)                    /* Analog watchdog enable on injected channels */
#define ADC_CR1_JAWDEN_Mask                   (((uint32_t)0x01) << 22)
#define ADC_CR1_JAWDEN                        ADC_CR1_JAWDEN_Mask
#define ADC_CR1_DUALMOD_Pos                   ((uint32_t)16)                    /* Dual mode selection */
#define ADC_CR1_DUALMOD_Mask                  (((uint32_t)0x0F) << 16)
#define ADC_CR1_DUALMOD                       ADC_CR1_DUALMOD_Mask
#define ADC_CR1_DUALMOD_0                     (((uint32_t)0x1 << ADC_CR1_DUALMOD_Pos))
#define ADC_CR1_DUALMOD_1                     (((uint32_t)0x2 << ADC_CR1_DUALMOD_Pos))
#define ADC_CR1_DUALMOD_2                     (((uint32_t)0x4 << ADC_CR1_DUALMOD_Pos))
#define ADC_CR1_DUALMOD_3                     (((uint32_t)0x8 << ADC_CR1_DUALMOD_Pos))
#define ADC_CR1_DISCNUM_Pos                   ((uint32_t)13)                    /* Discontinuous mode channel count */
#define ADC_CR1_DISCNUM_Mask                  (((uint32_t)0x07) << 13)
#define ADC_CR1_DISCNUM                       ADC_CR1_DISCNUM_Mask
#define ADC_CR1_DISCNUM_0                     (((uint32_t)0x1 << ADC_CR1_DISCNUM_Pos))
#define ADC_CR1_DISCNUM_1                     (((uint32_t)0x2 << ADC_CR1_DISCNUM_Pos))
#define ADC_CR1_DISCNUM_2                     (((uint32_t)0x4 << ADC_CR1_DISCNUM_Pos))
#define ADC_CR1_JDISCEN_Pos                   ((uint32_t)12)                    /* Discontinuous mode on injected channels */
#define ADC_CR1_JDISCEN_Mask                  (((uint32_t)0x01) << 12)
#define ADC_CR1_JDISCEN                       ADC_CR1_JDISCEN_Mask
#define ADC_CR1_DISCEN_Pos                    ((uint32_t)11)                    /* Discontinuous mode on regular channels */
#define ADC_CR1_DISCEN_Mask                   (((uint32_t)0x01) << 11)
#define ADC_CR1_DISCEN                        ADC_CR1_DISCEN_Mask
#define ADC_CR1_JAUTO_Pos                     ((uint32_t)10)                    /* Automatic Injected Group conversion */
#define ADC_CR1_JAUTO_Mask                    (((uint32_t)0x01) << 10)
#define ADC_CR1_JAUTO                         ADC_CR1_JAUTO_Mask
#define ADC_CR1_AWDSGL_Pos                    ((uint32_t)9)                     /* Enable the watchdog on a single channel in scan mode */
#define ADC_CR1_AWDSGL_Mask                   (((uint32_t)0x01) << 9)
#define ADC_CR1_AWDSGL                        ADC_CR1_AWDSGL_Mask
#define ADC_CR1_SCAN_Pos                      ((uint32_t)8)                     /* Scan mode */
#define ADC_CR1_SCAN_Mask                     (((uint32_t)0x01) << 8)
#define ADC_CR1_SCAN                          ADC_CR1_SCAN_Mask
#define ADC_CR1_JEOCIE_Pos                    ((uint32_t)7)                     /* Interrupt enable for injected channels */
#define ADC_CR1_JEOCIE_Mask                   (((uint32_t)0x01) << 7)
#define ADC_CR1_JEOCIE                        ADC_CR1_JEOCIE_Mask
#define ADC_CR1_AWDIE_Pos                     ((uint32_t)6)                     /* Analog watchdog interrupt enable */
#define ADC_CR1_AWDIE_Mask                    (((uint32_t)0x01) << 6)
#define ADC_CR1_AWDIE                         ADC_CR1_AWDIE_Mask
#define ADC_CR1_EOCIE_Pos                     ((uint32_t)5)                     /* Interrupt enable for EOC */
#define ADC_CR1_EOCIE_Mask                    (((uint32_t)0x01) << 5)
#define ADC_CR1_EOCIE                         ADC_CR1_EOCIE_Mask
#define ADC_CR1_AWDCH_Pos                     ((uint32_t)0)                     /* Analog watchdog channel select bits */
#define ADC_CR1_AWDCH_Mask                    (((uint32_t)0x1F) << 0)
#define ADC_CR1_AWDCH                         ADC_CR1_AWDCH_Mask
#define ADC_CR1_AWDCH_0                       (((uint32_t)0x1))
#define ADC_CR1_AWDCH_1                       (((uint32_t)0x2))
#define ADC_CR1_AWDCH_2                       (((uint32_t)0x4))
#define ADC_CR1_AWDCH_3                       (((uint32_t)0x8))
#define ADC_CR1_AWDCH_4                       (((uint32_t)0x10))

/************************************** ADC->CR2  ***************************************/
#define ADC_CR2_TSVREFE_Pos                   ((uint32_t)23)                    /* Temperature sensor and VREFINT enable */
#define ADC_CR2_TSVREFE_Mask                  (((uint32_t)0x01) << 23)
#define ADC_CR2_TSVREFE                       ADC_CR2_TSVREFE_Mask
#define ADC_CR2_SWSTART_Pos                   ((uint32_t)22)                    /* Start conversion of regular channels */
#define ADC_CR2_SWSTART_Mask                  (((uint32_t)0x01) << 22)
#define ADC_CR2_SWSTART                       ADC_CR2_SWSTART_Mask
#define ADC_CR2_JSWSTART_Pos                  ((uint32_t)21)                    /* Start conversion of injected channels */
#define ADC_CR2_JSWSTART_Mask                 (((uint32_t)0x01) << 21)
#define ADC_CR2_JSWSTART                      ADC_CR2_JSWSTART_Mask
#define ADC_CR2_EXTTRIG_Pos                   ((uint32_t)20)                    /* External trigger conversion mode for regular channels */
#define ADC_CR2_EXTTRIG_Mask                  (((uint32_t)0x01) << 20)
#define ADC_CR2_EXTTRIG                       ADC_CR2_EXTTRIG_Mask
#define ADC_CR2_EXTSEL_Pos                    ((uint32_t)17)                    /* External event select for regular group */
#define ADC_CR2_EXTSEL_Mask                   (((uint32_t)0x07) << 17)
#define ADC_CR2_EXTSEL                        ADC_CR2_EXTSEL_Mask
#define ADC_CR2_EXTSEL_0                      (((uint32_t)0x1 << ADC_CR2_EXTSEL_Pos))
#define ADC_CR2_EXTSEL_1                      (((uint32_t)0x2 << ADC_CR2_EXTSEL_Pos))
#define ADC_CR2_EXTSEL_2                      (((uint32_t)0x4 << ADC_CR2_EXTSEL_Pos))
#define ADC_CR2_JEXTTRIG_Pos                  ((uint32_t)15)                    /* External trigger conversion mode for injected channels */
#define ADC_CR2_JEXTTRIG_Mask                 (((uint32_t)0x01) << 15)
#define ADC_CR2_JEXTTRIG                      ADC_CR2_JEXTTRIG_Mask
#define ADC_CR2_JEXTSEL_Pos                   ((uint32_t)12)                    /* External event select for injected group */
#define ADC_CR2_JEXTSEL_Mask                  (((uint32_t)0x07) << 12)
#define ADC_CR2_JEXTSEL                       ADC_CR2_JEXTSEL_Mask
#define ADC_CR2_JEXTSEL_0                     (((uint32_t)0x1 << ADC_CR2_JEXTSEL_Pos))
#define ADC_CR2_JEXTSEL_1                     (((uint32_t)0x2 << ADC_CR2_JEXTSEL_Pos))
#define ADC_CR2_JEXTSEL_2                     (((uint32_t)0x4 << ADC_CR2_JEXTSEL_Pos))
#define ADC_CR2_ALIGN_Pos                     ((uint32_t)11)                    /* Data alignment */
#define ADC_CR2_ALIGN_Mask                    (((uint32_t)0x01) << 11)
#define ADC_CR2_ALIGN                         ADC_CR2_ALIGN_Mask
#define ADC_CR2_DMA_Pos                       ((uint32_t)8)                     /* Direct memory access enable */
#define ADC_CR2_DMA_Mask                      (((uint32_t)0x01) << 8)
#define ADC_CR2_DMA                           ADC_CR2_DMA_Mask
#define ADC_CR2_RSTCAL_Pos                    ((uint32_t)3)                     /* Reset calibration */
#define ADC_CR2_RSTCAL_Mask                   (((uint32_t)0x01) << 3)
#define ADC_CR2_RSTCAL                        ADC_CR2_RSTCAL_Mask
#define ADC_CR2_CAL_Pos                       ((uint32_t)2)                     /* A/D Calibration */
#define ADC_CR2_CAL_Mask                      (((uint32_t)0x01) << 2)
#define ADC_CR2_CAL                           ADC_CR2_CAL_Mask
#define ADC_CR2_CONT_Pos                      ((uint32_t)1)                     /* Continuous conversion */
#define ADC_CR2_CONT_Mask                     (((uint32_t)0x01) << 1)
#define ADC_CR2_CONT                          ADC_CR2_CONT_Mask
#define ADC_CR2_ADON_Pos                      ((uint32_t)0)                     /* A/D converter ON / OFF */
#define ADC_CR2_ADON_Mask                     (((uint32_t)0x01) << 0)
#define ADC_CR2_ADON                          ADC_CR2_ADON_Mask

/************************************* ADC->SMPR1  **************************************/
#define ADC_SMPR1_SMP10_Pos                   ((uint32_t)0)                     /* Channel x Sample time selection */
#define ADC_SMPR1_SMP10_Mask                  (((uint32_t)0x07) << 0)
#define ADC_SMPR1_SMP10                       ADC_SMPR1_SMP10_Mask
#define ADC_SMPR1_SMP10_0                     (((uint32_t)0x1))
#define ADC_SMPR1_SMP10_1                     (((uint32_t)0x2))
#define ADC_SMPR1_SMP10_2                     (((uint32_t)0x4))
#define ADC_SMPR1_SMP11_Pos                   ((uint32_t)3)                     /* Channel x Sample time selection */
#define ADC_SMPR1_SMP11_Mask                  (((uint32_t)0x07) << 3)
#define ADC_SMPR1_SMP11                       ADC_SMPR1_SMP11_Mask
#define ADC_SMPR1_SMP11_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP11_Pos))
#define ADC_SMPR1_SMP11_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP11_Pos))
#define ADC_SMPR1_SMP11_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP11_Pos))
#define ADC_SMPR1_SMP12_Pos                   ((uint32_t)6)                     /* Channel x Sample time selection */
#define ADC_SMPR1_SMP12_Mask                  (((uint32_t)0x07) << 6)
#define ADC_SMPR1_SMP12                       ADC_SMPR1_SMP12_Mask
#define ADC_SMPR1_SMP12_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP12_Pos))
#define ADC_SMPR1_SMP12_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP12_Pos))
#define ADC_SMPR1_SMP12_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP12_Pos))
#define ADC_SMPR1_SMP13_Pos                   ((uint32_t)9)                     /* Channel x Sample time selection */
#define ADC_SMPR1_SMP13_Mask                  (((uint32_t)0x07) << 9)
#define ADC_SMPR1_SMP13                       ADC_SMPR1_SMP13_Mask
#define ADC_SMPR1_SMP13_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP13_Pos))
#define ADC_SMPR1_SMP13_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP13_Pos))
#define ADC_SMPR1_SMP13_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP13_Pos))
#define ADC_SMPR1_SMP14_Pos                   ((uint32_t)12)                    /* Channel x Sample time selection */
#define ADC_SMPR1_SMP14_Mask                  (((uint32_t)0x07) << 12)
#define ADC_SMPR1_SMP14                       ADC_SMPR1_SMP14_Mask
#define ADC_SMPR1_SMP14_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP14_Pos))
#define ADC_SMPR1_SMP14_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP14_Pos))
#define ADC_SMPR1_SMP14_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP14_Pos))
#define ADC_SMPR1_SMP15_Pos                   ((uint32_t)15)                    /* Channel x Sample time selection */
#define ADC_SMPR1_SMP15_Mask                  (((uint32_t)0x07) << 15)
#define ADC_SMPR1_SMP15                       ADC_SMPR1_SMP15_Mask
#define ADC_SMPR1_SMP15_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP15_Pos))
#define ADC_SMPR1_SMP15_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP15_Pos))
#define ADC_SMPR1_SMP15_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP15_Pos))
#define ADC_SMPR1_SMP16_Pos                   ((uint32_t)18)                    /* Channel x Sample time selection */
#define ADC_SMPR1_SMP16_Mask                  (((uint32_t)0x07) << 18)
#define ADC_SMPR1_SMP16                       ADC_SMPR1_SMP16_Mask
#define ADC_SMPR1_SMP16_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP16_Pos))
#define ADC_SMPR1_SMP16_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP16_Pos))
#define ADC_SMPR1_SMP16_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP16_Pos))
#define ADC_SMPR1_SMP17_Pos                   ((uint32_t)21)                    /* Channel x Sample time selection */
#define ADC_SMPR1_SMP17_Mask                  (((uint32_t)0x07) << 21)
#define ADC_SMPR1_SMP17                       ADC_SMPR1_SMP17_Mask
#define ADC_SMPR1_SMP17_0                     (((uint32_t)0x1 << ADC_SMPR1_SMP17_Pos))
#define ADC_SMPR1_SMP17_1                     (((uint32_t)0x2 << ADC_SMPR1_SMP17_Pos))
#define ADC_SMPR1_SMP17_2                     (((uint32_t)0x4 << ADC_SMPR1_SMP17_Pos))

/************************************* ADC->SMPR2  **************************************/
#define ADC_SMPR2_SMP0_Pos                    ((uint32_t)0)                     /* Channel x Sample time selection */
#define ADC_SMPR2_SMP0_Mask                   (((uint32_t)0x07) << 0)
#define ADC_SMPR2_SMP0                        ADC_SMPR2_SMP0_Mask
#define ADC_SMPR2_SMP0_0                      (((uint32_t)0x1))
#define ADC_SMPR2_SMP0_1                      (((uint32_t)0x2))
#define ADC_SMPR2_SMP0_2                      (((uint32_t)0x4))
#define ADC_SMPR2_SMP1_Pos                    ((uint32_t)3)                     /* Channel x Sample time selection */
#define ADC_SMPR2_SMP1_Mask                   (((uint32_t)0x07) << 3)
#define ADC_SMPR2_SMP1                        ADC_SMPR2_SMP1_Mask
#define ADC_SMPR2_SMP1_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP1_Pos))
#define ADC_SMPR2_SMP1_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP1_Pos))
#define ADC_SMPR2_SMP1_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP1_Pos))
#define ADC_SMPR2_SMP2_Pos                    ((uint32_t)6)                     /* Channel x Sample time selection */
#define ADC_SMPR2_SMP2_Mask                   (((uint32_t)0x07) << 6)
#define ADC_SMPR2_SMP2                        ADC_SMPR2_SMP2_Mask
#define ADC_SMPR2_SMP2_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP2_Pos))
#define ADC_SMPR2_SMP2_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP2_Pos))
#define ADC_SMPR2_SMP2_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP2_Pos))
#define ADC_SMPR2_SMP3_Pos                    ((uint32_t)9)                     /* Channel x Sample time selection */
#define ADC_SMPR2_SMP3_Mask                   (((uint32_t)0x07) << 9)
#define ADC_SMPR2_SMP3                        ADC_SMPR2_SMP3_Mask
#define ADC_SMPR2_SMP3_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP3_Pos))
#define ADC_SMPR2_SMP3_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP3_Pos))
#define ADC_SMPR2_SMP3_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP3_Pos))
#define ADC_SMPR2_SMP4_Pos                    ((uint32_t)12)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP4_Mask                   (((uint32_t)0x07) << 12)
#define ADC_SMPR2_SMP4                        ADC_SMPR2_SMP4_Mask
#define ADC_SMPR2_SMP4_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP4_Pos))
#define ADC_SMPR2_SMP4_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP4_Pos))
#define ADC_SMPR2_SMP4_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP4_Pos))
#define ADC_SMPR2_SMP5_Pos                    ((uint32_t)15)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP5_Mask                   (((uint32_t)0x07) << 15)
#define ADC_SMPR2_SMP5                        ADC_SMPR2_SMP5_Mask
#define ADC_SMPR2_SMP5_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP5_Pos))
#define ADC_SMPR2_SMP5_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP5_Pos))
#define ADC_SMPR2_SMP5_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP5_Pos))
#define ADC_SMPR2_SMP6_Pos                    ((uint32_t)18)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP6_Mask                   (((uint32_t)0x07) << 18)
#define ADC_SMPR2_SMP6                        ADC_SMPR2_SMP6_Mask
#define ADC_SMPR2_SMP6_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP6_Pos))
#define ADC_SMPR2_SMP6_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP6_Pos))
#define ADC_SMPR2_SMP6_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP6_Pos))
#define ADC_SMPR2_SMP7_Pos                    ((uint32_t)21)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP7_Mask                   (((uint32_t)0x07) << 21)
#define ADC_SMPR2_SMP7                        ADC_SMPR2_SMP7_Mask
#define ADC_SMPR2_SMP7_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP7_Pos))
#define ADC_SMPR2_SMP7_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP7_Pos))
#define ADC_SMPR2_SMP7_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP7_Pos))
#define ADC_SMPR2_SMP8_Pos                    ((uint32_t)24)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP8_Mask                   (((uint32_t)0x07) << 24)
#define ADC_SMPR2_SMP8                        ADC_SMPR2_SMP8_Mask
#define ADC_SMPR2_SMP8_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP8_Pos))
#define ADC_SMPR2_SMP8_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP8_Pos))
#define ADC_SMPR2_SMP8_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP8_Pos))
#define ADC_SMPR2_SMP9_Pos                    ((uint32_t)27)                    /* Channel x Sample time selection */
#define ADC_SMPR2_SMP9_Mask                   (((uint32_t)0x07) << 27)
#define ADC_SMPR2_SMP9                        ADC_SMPR2_SMP9_Mask
#define ADC_SMPR2_SMP9_0                      (((uint32_t)0x1 << ADC_SMPR2_SMP9_Pos))
#define ADC_SMPR2_SMP9_1                      (((uint32_t)0x2 << ADC_SMPR2_SMP9_Pos))
#define ADC_SMPR2_SMP9_2                      (((uint32_t)0x4 << ADC_SMPR2_SMP9_Pos))

/************************************* ADC->JOFR1  **************************************/
#define ADC_JOFR1_JOFFSETx_Pos                ((uint32_t)0)                     /* Data offset for injected channel x */
#define ADC_JOFR1_JOFFSETx_Mask               (((uint32_t)0x0FFF) << 0)
#define ADC_JOFR1_JOFFSETx                    ADC_JOFR1_JOFFSETx_Mask
#define ADC_JOFR1_JOFFSETx_0                  (((uint32_t)0x1))
#define ADC_JOFR1_JOFFSETx_1                  (((uint32_t)0x2))
#define ADC_JOFR1_JOFFSETx_2                  (((uint32_t)0x4))
#define ADC_JOFR1_JOFFSETx_3                  (((uint32_t)0x8))
#define ADC_JOFR1_JOFFSETx_4                  (((uint32_t)0x10))
#define ADC_JOFR1_JOFFSETx_5                  (((uint32_t)0x20))
#define ADC_JOFR1_JOFFSETx_6                  (((uint32_t)0x40))
#define ADC_JOFR1_JOFFSETx_7                  (((uint32_t)0x80))
#define ADC_JOFR1_JOFFSETx_8                  (((uint32_t)0x100))
#define ADC_JOFR1_JOFFSETx_9                  (((uint32_t)0x200))
#define ADC_JOFR1_JOFFSETx_10                 (((uint32_t)0x400))
#define ADC_JOFR1_JOFFSETx_11                 (((uint32_t)0x800))

/************************************* ADC->JOFR2  **************************************/
#define ADC_JOFR2_JOFFSETx_Pos                ((uint32_t)0)                     /* Data offset for injected channel x */
#define ADC_JOFR2_JOFFSETx_Mask               (((uint32_t)0x0FFF) << 0)
#define ADC_JOFR2_JOFFSETx                    ADC_JOFR2_JOFFSETx_Mask
#define ADC_JOFR2_JOFFSETx_0                  (((uint32_t)0x1))
#define ADC_JOFR2_JOFFSETx_1                  (((uint32_t)0x2))
#define ADC_JOFR2_JOFFSETx_2                  (((uint32_t)0x4))
#define ADC_JOFR2_JOFFSETx_3                  (((uint32_t)0x8))
#define ADC_JOFR2_JOFFSETx_4                  (((uint32_t)0x10))
#define ADC_JOFR2_JOFFSETx_5                  (((uint32_t)0x20))
#define ADC_JOFR2_JOFFSETx_6                  (((uint32_t)0x40))
#define ADC_JOFR2_JOFFSETx_7                  (((uint32_t)0x80))
#define ADC_JOFR2_JOFFSETx_8                  (((uint32_t)0x100))
#define ADC_JOFR2_JOFFSETx_9                  (((uint32_t)0x200))
#define ADC_JOFR2_JOFFSETx_10                 (((uint32_t)0x400))
#define ADC_JOFR2_JOFFSETx_11                 (((uint32_t)0x800))

/************************************* ADC->JOFR3  **************************************/
#define ADC_JOFR3_JOFFSETx_Pos                ((uint32_t)0)                     /* Data offset for injected channel x */
#define ADC_JOFR3_JOFFSETx_Mask               (((uint32_t)0x0FFF) << 0)
#define ADC_JOFR3_JOFFSETx                    ADC_JOFR3_JOFFSETx_Mask
#define ADC_JOFR3_JOFFSETx_0                  (((uint32_t)0x1))
#define ADC_JOFR3_JOFFSETx_1                  (((uint32_t)0x2))
#define ADC_JOFR3_JOFFSETx_2                  (((uint32_t)0x4))
#define ADC_JOFR3_JOFFSETx_3                  (((uint32_t)0x8))
#define ADC_JOFR3_JOFFSETx_4                  (((uint32_t)0x10))
#define ADC_JOFR3_JOFFSETx_5                  (((uint32_t)0x20))
#define ADC_JOFR3_JOFFSETx_6                  (((uint32_t)0x40))
#define ADC_JOFR3_JOFFSETx_7                  (((uint32_t)0x80))
#define ADC_JOFR3_JOFFSETx_8                  (((uint32_t)0x100))
#define ADC_JOFR3_JOFFSETx_9                  (((uint32_t)0x200))
#define ADC_JOFR3_JOFFSETx_10                 (((uint32_t)0x400))
#define ADC_JOFR3_JOFFSETx_11                 (((uint32_t)0x800))

/************************************* ADC->JOFR4  **************************************/
#define ADC_JOFR4_JOFFSETx_Pos                ((uint32_t)0)                     /* Data offset for injected channel x */
#define ADC_JOFR4_JOFFSETx_Mask               (((uint32_t)0x0FFF) << 0)
#define ADC_JOFR4_JOFFSETx                    ADC_JOFR4_JOFFSETx_Mask
#define ADC_JOFR4_JOFFSETx_0                  (((uint32_t)0x1))
#define ADC_JOFR4_JOFFSETx_1                  (((uint32_t)0x2))
#define ADC_JOFR4_JOFFSETx_2                  (((uint32_t)0x4))
#define ADC_JOFR4_JOFFSETx_3                  (((uint32_t)0x8))
#define ADC_JOFR4_JOFFSETx_4                  (((uint32_t)0x10))
#define ADC_JOFR4_JOFFSETx_5                  (((uint32_t)0x20))
#define ADC_JOFR4_JOFFSETx_6                  (((uint32_t)0x40))
#define ADC_JOFR4_JOFFSETx_7                  (((uint32_t)0x80))
#define ADC_JOFR4_JOFFSETx_8                  (((uint32_t)0x100))
#define ADC_JOFR4_JOFFSETx_9                  (((uint32_t)0x200))
#define ADC_JOFR4_JOFFSETx_10                 (((uint32_t)0x400))
#define ADC_JOFR4_JOFFSETx_11                 (((uint32_t)0x800))

/************************************** ADC->HTR  ***************************************/
#define ADC_HTR_HT_Pos                        ((uint32_t)0)                     /* Analog watchdog high threshold */
#define ADC_HTR_HT_Mask                       (((uint32_t)0x0FFF) << 0)
#define ADC_HTR_HT                            ADC_HTR_HT_Mask
#define ADC_HTR_HT_0                          (((uint32_t)0x1))
#define ADC_HTR_HT_1                          (((uint32_t)0x2))
#define ADC_HTR_HT_2                          (((uint32_t)0x4))
#define ADC_HTR_HT_3                          (((uint32_t)0x8))
#define ADC_HTR_HT_4                          (((uint32_t)0x10))
#define ADC_HTR_HT_5                          (((uint32_t)0x20))
#define ADC_HTR_HT_6                          (((uint32_t)0x40))
#define ADC_HTR_HT_7                          (((uint32_t)0x80))
#define ADC_HTR_HT_8                          (((uint32_t)0x100))
#define ADC_HTR_HT_9                          (((uint32_t)0x200))
#define ADC_HTR_HT_10                         (((uint32_t)0x400))
#define ADC_HTR_HT_11                         (((uint32_t)0x800))

/************************************** ADC->LTR  ***************************************/
#define ADC_LTR_LT_Pos                        ((uint32_t)0)                     /* Analog watchdog low threshold */
#define ADC_LTR_LT_Mask                       (((uint32_t)0x0FFF) << 0)
#define ADC_LTR_LT                            ADC_LTR_LT_Mask
#define ADC_LTR_LT_0                          (((uint32_t)0x1))
#define ADC_LTR_LT_1                          (((uint32_t)0x2))
#define ADC_LTR_LT_2                          (((uint32_t)0x4))
#define ADC_LTR_LT_3                          (((uint32_t)0x8))
#define ADC_LTR_LT_4                          (((uint32_t)0x10))
#define ADC_LTR_LT_5                          (((uint32_t)0x20))
#define ADC_LTR_LT_6                          (((uint32_t)0x40))
#define ADC_LTR_LT_7                          (((uint32_t)0x80))
#define ADC_LTR_LT_8                          (((uint32_t)0x100))
#define ADC_LTR_LT_9                          (((uint32_t)0x200))
#define ADC_LTR_LT_10                         (((uint32_t)0x400))
#define ADC_LTR_LT_11                         (((uint32_t)0x800))

/************************************* ADC->SQR1  ***************************************/
#define ADC_SQR1_L_Pos                        ((uint32_t)20)                    /* Regular channel sequence length */
#define ADC_SQR1_L_Mask                       (((uint32_t)0x0F) << 20)
#define ADC_SQR1_L                            ADC_SQR1_L_Mask
#define ADC_SQR1_L_0                          (((uint32_t)0x1 << ADC_SQR1_L_Pos))
#define ADC_SQR1_L_1                          (((uint32_t)0x2 << ADC_SQR1_L_Pos))
#define ADC_SQR1_L_2                          (((uint32_t)0x4 << ADC_SQR1_L_Pos))
#define ADC_SQR1_L_3                          (((uint32_t)0x8 << ADC_SQR1_L_Pos))
#define ADC_SQR1_SQ16_Pos                     ((uint32_t)15)                    /* 16th conversion in regular sequence */
#define ADC_SQR1_SQ16_Mask                    (((uint32_t)0x1F) << 15)
#define ADC_SQR1_SQ16                         ADC_SQR1_SQ16_Mask
#define ADC_SQR1_SQ16_0                       (((uint32_t)0x1 << ADC_SQR1_SQ16_Pos))
#define ADC_SQR1_SQ16_1                       (((uint32_t)0x2 << ADC_SQR1_SQ16_Pos))
#define ADC_SQR1_SQ16_2                       (((uint32_t)0x4 << ADC_SQR1_SQ16_Pos))
#define ADC_SQR1_SQ16_3                       (((uint32_t)0x8 << ADC_SQR1_SQ16_Pos))
#define ADC_SQR1_SQ16_4                       (((uint32_t)0x10 << ADC_SQR1_SQ16_Pos))
#define ADC_SQR1_SQ15_Pos                     ((uint32_t)10)                    /* 15th conversion in regular sequence */
#define ADC_SQR1_SQ15_Mask                    (((uint32_t)0x1F) << 10)
#define ADC_SQR1_SQ15                         ADC_SQR1_SQ15_Mask
#define ADC_SQR1_SQ15_0                       (((uint32_t)0x1 << ADC_SQR1_SQ15_Pos))
#define ADC_SQR1_SQ15_1                       (((uint32_t)0x2 << ADC_SQR1_SQ15_Pos))
#define ADC_SQR1_SQ15_2                       (((uint32_t)0x4 << ADC_SQR1_SQ15_Pos))
#define ADC_SQR1_SQ15_3                       (((uint32_t)0x8 << ADC_SQR1_SQ15_Pos))
#define ADC_SQR1_SQ15_4                       (((uint32_t)0x10 << ADC_SQR1_SQ15_Pos))
#define ADC_SQR1_SQ14_Pos                     ((uint32_t)5)                     /* 14th conversion in regular sequence */
#define ADC_SQR1_SQ14_Mask                    (((uint32_t)0x1F) << 5)
#define ADC_SQR1_SQ14                         ADC_SQR1_SQ14_Mask
#define ADC_SQR1_SQ14_0                       (((uint32_t)0x1 << ADC_SQR1_SQ14_Pos))
#define ADC_SQR1_SQ14_1                       (((uint32_t)0x2 << ADC_SQR1_SQ14_Pos))
#define ADC_SQR1_SQ14_2                       (((uint32_t)0x4 << ADC_SQR1_SQ14_Pos))
#define ADC_SQR1_SQ14_3                       (((uint32_t)0x8 << ADC_SQR1_SQ14_Pos))
#define ADC_SQR1_SQ14_4                       (((uint32_t)0x10 << ADC_SQR1_SQ14_Pos))
#define ADC_SQR1_SQ13_Pos                     ((uint32_t)0)                     /* 13th conversion in regular sequence */
#define ADC_SQR1_SQ13_Mask                    (((uint32_t)0x1F) << 0)
#define ADC_SQR1_SQ13                         ADC_SQR1_SQ13_Mask
#define ADC_SQR1_SQ13_0                       (((uint32_t)0x1))
#define ADC_SQR1_SQ13_1                       (((uint32_t)0x2))
#define ADC_SQR1_SQ13_2                       (((uint32_t)0x4))
#define ADC_SQR1_SQ13_3                       (((uint32_t)0x8))
#define ADC_SQR1_SQ13_4                       (((uint32_t)0x10))

/************************************* ADC->SQR2  ***************************************/
#define ADC_SQR2_SQ12_Pos                     ((uint32_t)25)                    /* 12th conversion in regular sequence */
#define ADC_SQR2_SQ12_Mask                    (((uint32_t)0x1F) << 25)
#define ADC_SQR2_SQ12                         ADC_SQR2_SQ12_Mask
#define ADC_SQR2_SQ12_0                       (((uint32_t)0x1 << ADC_SQR2_SQ12_Pos))
#define ADC_SQR2_SQ12_1                       (((uint32_t)0x2 << ADC_SQR2_SQ12_Pos))
#define ADC_SQR2_SQ12_2                       (((uint32_t)0x4 << ADC_SQR2_SQ12_Pos))
#define ADC_SQR2_SQ12_3                       (((uint32_t)0x8 << ADC_SQR2_SQ12_Pos))
#define ADC_SQR2_SQ12_4                       (((uint32_t)0x10 << ADC_SQR2_SQ12_Pos))
#define ADC_SQR2_SQ11_Pos                     ((uint32_t)20)                    /* 11th conversion in regular sequence */
#define ADC_SQR2_SQ11_Mask                    (((uint32_t)0x1F) << 20)
#define ADC_SQR2_SQ11                         ADC_SQR2_SQ11_Mask
#define ADC_SQR2_SQ11_0                       (((uint32_t)0x1 << ADC_SQR2_SQ11_Pos))
#define ADC_SQR2_SQ11_1                       (((uint32_t)0x2 << ADC_SQR2_SQ11_Pos))
#define ADC_SQR2_SQ11_2                       (((uint32_t)0x4 << ADC_SQR2_SQ11_Pos))
#define ADC_SQR2_SQ11_3                       (((uint32_t)0x8 << ADC_SQR2_SQ11_Pos))
#define ADC_SQR2_SQ11_4                       (((uint32_t)0x10 << ADC_SQR2_SQ11_Pos))
#define ADC_SQR2_SQ10_Pos                     ((uint32_t)15)                    /* 10th conversion in regular sequence */
#define ADC_SQR2_SQ10_Mask                    (((uint32_t)0x1F) << 15)
#define ADC_SQR2_SQ10                         ADC_SQR2_SQ10_Mask
#define ADC_SQR2_SQ10_0                       (((uint32_t)0x1 << ADC_SQR2_SQ10_Pos))
#define ADC_SQR2_SQ10_1                       (((uint32_t)0x2 << ADC_SQR2_SQ10_Pos))
#define ADC_SQR2_SQ10_2                       (((uint32_t)0x4 << ADC_SQR2_SQ10_Pos))
#define ADC_SQR2_SQ10_3                       (((uint32_t)0x8 << ADC_SQR2_SQ10_Pos))
#define ADC_SQR2_SQ10_4                       (((uint32_t)0x10 << ADC_SQR2_SQ10_Pos))
#define ADC_SQR2_SQ9_Pos                      ((uint32_t)10)                    /* 9th conversion in regular sequence */
#define ADC_SQR2_SQ9_Mask                     (((uint32_t)0x1F) << 10)
#define ADC_SQR2_SQ9                          ADC_SQR2_SQ9_Mask
#define ADC_SQR2_SQ9_0                        (((uint32_t)0x1 << ADC_SQR2_SQ9_Pos))
#define ADC_SQR2_SQ9_1                        (((uint32_t)0x2 << ADC_SQR2_SQ9_Pos))
#define ADC_SQR2_SQ9_2                        (((uint32_t)0x4 << ADC_SQR2_SQ9_Pos))
#define ADC_SQR2_SQ9_3                        (((uint32_t)0x8 << ADC_SQR2_SQ9_Pos))
#define ADC_SQR2_SQ9_4                        (((uint32_t)0x10 << ADC_SQR2_SQ9_Pos))
#define ADC_SQR2_SQ8_Pos                      ((uint32_t)5)                     /* 7th conversion in regular sequence */
#define ADC_SQR2_SQ8_Mask                     (((uint32_t)0x1F) << 5)
#define ADC_SQR2_SQ8                          ADC_SQR2_SQ8_Mask
#define ADC_SQR2_SQ8_0                        (((uint32_t)0x1 << ADC_SQR2_SQ8_Pos))
#define ADC_SQR2_SQ8_1                        (((uint32_t)0x2 << ADC_SQR2_SQ8_Pos))
#define ADC_SQR2_SQ8_2                        (((uint32_t)0x4 << ADC_SQR2_SQ8_Pos))
#define ADC_SQR2_SQ8_3                        (((uint32_t)0x8 << ADC_SQR2_SQ8_Pos))
#define ADC_SQR2_SQ8_4                        (((uint32_t)0x10 << ADC_SQR2_SQ8_Pos))
#define ADC_SQR2_SQ7_Pos                      ((uint32_t)0)                     /* 7th conversion in regular sequence */
#define ADC_SQR2_SQ7_Mask                     (((uint32_t)0x1F) << 0)
#define ADC_SQR2_SQ7                          ADC_SQR2_SQ7_Mask
#define ADC_SQR2_SQ7_0                        (((uint32_t)0x1))
#define ADC_SQR2_SQ7_1                        (((uint32_t)0x2))
#define ADC_SQR2_SQ7_2                        (((uint32_t)0x4))
#define ADC_SQR2_SQ7_3                        (((uint32_t)0x8))
#define ADC_SQR2_SQ7_4                        (((uint32_t)0x10))

/************************************* ADC->SQR3  ***************************************/
#define ADC_SQR3_SQ6_Pos                      ((uint32_t)25)                    /* 6th conversion in regular sequence */
#define ADC_SQR3_SQ6_Mask                     (((uint32_t)0x1F) << 25)
#define ADC_SQR3_SQ6                          ADC_SQR3_SQ6_Mask
#define ADC_SQR3_SQ6_0                        (((uint32_t)0x1 << ADC_SQR3_SQ6_Pos))
#define ADC_SQR3_SQ6_1                        (((uint32_t)0x2 << ADC_SQR3_SQ6_Pos))
#define ADC_SQR3_SQ6_2                        (((uint32_t)0x4 << ADC_SQR3_SQ6_Pos))
#define ADC_SQR3_SQ6_3                        (((uint32_t)0x8 << ADC_SQR3_SQ6_Pos))
#define ADC_SQR3_SQ6_4                        (((uint32_t)0x10 << ADC_SQR3_SQ6_Pos))
#define ADC_SQR3_SQ5_Pos                      ((uint32_t)20)                    /* 5th conversion in regular sequence */
#define ADC_SQR3_SQ5_Mask                     (((uint32_t)0x1F) << 20)
#define ADC_SQR3_SQ5                          ADC_SQR3_SQ5_Mask
#define ADC_SQR3_SQ5_0                        (((uint32_t)0x1 << ADC_SQR3_SQ5_Pos))
#define ADC_SQR3_SQ5_1                        (((uint32_t)0x2 << ADC_SQR3_SQ5_Pos))
#define ADC_SQR3_SQ5_2                        (((uint32_t)0x4 << ADC_SQR3_SQ5_Pos))
#define ADC_SQR3_SQ5_3                        (((uint32_t)0x8 << ADC_SQR3_SQ5_Pos))
#define ADC_SQR3_SQ5_4                        (((uint32_t)0x10 << ADC_SQR3_SQ5_Pos))
#define ADC_SQR3_SQ4_Pos                      ((uint32_t)15)                    /* 4th conversion in regular sequence */
#define ADC_SQR3_SQ4_Mask                     (((uint32_t)0x1F) << 15)
#define ADC_SQR3_SQ4                          ADC_SQR3_SQ4_Mask
#define ADC_SQR3_SQ4_0                        (((uint32_t)0x1 << ADC_SQR3_SQ4_Pos))
#define ADC_SQR3_SQ4_1                        (((uint32_t)0x2 << ADC_SQR3_SQ4_Pos))
#define ADC_SQR3_SQ4_2                        (((uint32_t)0x4 << ADC_SQR3_SQ4_Pos))
#define ADC_SQR3_SQ4_3                        (((uint32_t)0x8 << ADC_SQR3_SQ4_Pos))
#define ADC_SQR3_SQ4_4                        (((uint32_t)0x10 << ADC_SQR3_SQ4_Pos))
#define ADC_SQR3_SQ3_Pos                      ((uint32_t)10)                    /* 3rd conversion in regular sequence */
#define ADC_SQR3_SQ3_Mask                     (((uint32_t)0x1F) << 10)
#define ADC_SQR3_SQ3                          ADC_SQR3_SQ3_Mask
#define ADC_SQR3_SQ3_0                        (((uint32_t)0x1 << ADC_SQR3_SQ3_Pos))
#define ADC_SQR3_SQ3_1                        (((uint32_t)0x2 << ADC_SQR3_SQ3_Pos))
#define ADC_SQR3_SQ3_2                        (((uint32_t)0x4 << ADC_SQR3_SQ3_Pos))
#define ADC_SQR3_SQ3_3                        (((uint32_t)0x8 << ADC_SQR3_SQ3_Pos))
#define ADC_SQR3_SQ3_4                        (((uint32_t)0x10 << ADC_SQR3_SQ3_Pos))
#define ADC_SQR3_SQ2_Pos                      ((uint32_t)5)                     /* 2nd conversion in regular sequence */
#define ADC_SQR3_SQ2_Mask                     (((uint32_t)0x1F) << 5)
#define ADC_SQR3_SQ2                          ADC_SQR3_SQ2_Mask
#define ADC_SQR3_SQ2_0                        (((uint32_t)0x1 << ADC_SQR3_SQ2_Pos))
#define ADC_SQR3_SQ2_1                        (((uint32_t)0x2 << ADC_SQR3_SQ2_Pos))
#define ADC_SQR3_SQ2_2                        (((uint32_t)0x4 << ADC_SQR3_SQ2_Pos))
#define ADC_SQR3_SQ2_3                        (((uint32_t)0x8 << ADC_SQR3_SQ2_Pos))
#define ADC_SQR3_SQ2_4                        (((uint32_t)0x10 << ADC_SQR3_SQ2_Pos))
#define ADC_SQR3_SQ1_Pos                      ((uint32_t)0)                     /* 1st conversion in regular sequence */
#define ADC_SQR3_SQ1_Mask                     (((uint32_t)0x1F) << 0)
#define ADC_SQR3_SQ1                          ADC_SQR3_SQ1_Mask
#define ADC_SQR3_SQ1_0                        (((uint32_t)0x1))
#define ADC_SQR3_SQ1_1                        (((uint32_t)0x2))
#define ADC_SQR3_SQ1_2                        (((uint32_t)0x4))
#define ADC_SQR3_SQ1_3                        (((uint32_t)0x8))
#define ADC_SQR3_SQ1_4                        (((uint32_t)0x10))

/************************************* ADC->JSQR  ***************************************/
#define ADC_JSQR_JL_Pos                       ((uint32_t)20)                    /* Injected sequence length */
#define ADC_JSQR_JL_Mask                      (((uint32_t)0x03) << 20)
#define ADC_JSQR_JL                           ADC_JSQR_JL_Mask
#define ADC_JSQR_JL_0                         (((uint32_t)0x1 << ADC_JSQR_JL_Pos))
#define ADC_JSQR_JL_1                         (((uint32_t)0x2 << ADC_JSQR_JL_Pos))
#define ADC_JSQR_JSQ4_Pos                     ((uint32_t)15)                    /* 4th conversion in injected sequence when JL[1:0] = 3 */
#define ADC_JSQR_JSQ4_Mask                    (((uint32_t)0x1F) << 15)
#define ADC_JSQR_JSQ4                         ADC_JSQR_JSQ4_Mask
#define ADC_JSQR_JSQ4_0                       (((uint32_t)0x1 << ADC_JSQR_JSQ4_Pos))
#define ADC_JSQR_JSQ4_1                       (((uint32_t)0x2 << ADC_JSQR_JSQ4_Pos))
#define ADC_JSQR_JSQ4_2                       (((uint32_t)0x4 << ADC_JSQR_JSQ4_Pos))
#define ADC_JSQR_JSQ4_3                       (((uint32_t)0x8 << ADC_JSQR_JSQ4_Pos))
#define ADC_JSQR_JSQ4_4                       (((uint32_t)0x10 << ADC_JSQR_JSQ4_Pos))
#define ADC_JSQR_JSQ3_Pos                     ((uint32_t)10)                    /* 3rd conversion in injected sequence ,when JL[1:0] = 3 */
#define ADC_JSQR_JSQ3_Mask                    (((uint32_t)0x1F) << 10)
#define ADC_JSQR_JSQ3                         ADC_JSQR_JSQ3_Mask
#define ADC_JSQR_JSQ3_0                       (((uint32_t)0x1 << ADC_JSQR_JSQ3_Pos))
#define ADC_JSQR_JSQ3_1                       (((uint32_t)0x2 << ADC_JSQR_JSQ3_Pos))
#define ADC_JSQR_JSQ3_2                       (((uint32_t)0x4 << ADC_JSQR_JSQ3_Pos))
#define ADC_JSQR_JSQ3_3                       (((uint32_t)0x8 << ADC_JSQR_JSQ3_Pos))
#define ADC_JSQR_JSQ3_4                       (((uint32_t)0x10 << ADC_JSQR_JSQ3_Pos))
#define ADC_JSQR_JSQ2_Pos                     ((uint32_t)5)                     /* 2nd conversion in injected sequence , when JL[1:0] = 3 */
#define ADC_JSQR_JSQ2_Mask                    (((uint32_t)0x1F) << 5)
#define ADC_JSQR_JSQ2                         ADC_JSQR_JSQ2_Mask
#define ADC_JSQR_JSQ2_0                       (((uint32_t)0x1 << ADC_JSQR_JSQ2_Pos))
#define ADC_JSQR_JSQ2_1                       (((uint32_t)0x2 << ADC_JSQR_JSQ2_Pos))
#define ADC_JSQR_JSQ2_2                       (((uint32_t)0x4 << ADC_JSQR_JSQ2_Pos))
#define ADC_JSQR_JSQ2_3                       (((uint32_t)0x8 << ADC_JSQR_JSQ2_Pos))
#define ADC_JSQR_JSQ2_4                       (((uint32_t)0x10 << ADC_JSQR_JSQ2_Pos))
#define ADC_JSQR_JSQ1_Pos                     ((uint32_t)0)                     /* 1st conversion in injected sequence , when JL[1:0] = 3 */
#define ADC_JSQR_JSQ1_Mask                    (((uint32_t)0x1F) << 0)
#define ADC_JSQR_JSQ1                         ADC_JSQR_JSQ1_Mask
#define ADC_JSQR_JSQ1_0                       (((uint32_t)0x1))
#define ADC_JSQR_JSQ1_1                       (((uint32_t)0x2))
#define ADC_JSQR_JSQ1_2                       (((uint32_t)0x4))
#define ADC_JSQR_JSQ1_3                       (((uint32_t)0x8))
#define ADC_JSQR_JSQ1_4                       (((uint32_t)0x10))

/************************************* ADC->JDR1  ***************************************/
#define ADC_JDR1_JDATA_Pos                    ((uint32_t)0)                     /* Injected conversion data */
#define ADC_JDR1_JDATA_Mask                   (((uint32_t)0xFFFF) << 0)
#define ADC_JDR1_JDATA                        ADC_JDR1_JDATA_Mask

/************************************* ADC->JDR2  ***************************************/
#define ADC_JDR2_JDATA_Pos                    ((uint32_t)0)                     /* Injected conversion data */
#define ADC_JDR2_JDATA_Mask                   (((uint32_t)0xFFFF) << 0)
#define ADC_JDR2_JDATA                        ADC_JDR2_JDATA_Mask

/************************************* ADC->JDR3  ***************************************/
#define ADC_JDR3_JDATA_Pos                    ((uint32_t)0)                     /* Injected conversion data */
#define ADC_JDR3_JDATA_Mask                   (((uint32_t)0xFFFF) << 0)
#define ADC_JDR3_JDATA                        ADC_JDR3_JDATA_Mask

/************************************* ADC->JDR4  ***************************************/
#define ADC_JDR4_JDATA_Pos                    ((uint32_t)0)                     /* Injected conversion data */
#define ADC_JDR4_JDATA_Mask                   (((uint32_t)0xFFFF) << 0)
#define ADC_JDR4_JDATA                        ADC_JDR4_JDATA_Mask

/************************************** ADC->DR  ****************************************/
#define ADC_DR_ADC2DATA_Pos                   ((uint32_t)16)                    /* ADC2 data used with ADC1_DR only for ADC dual mode */
#define ADC_DR_ADC2DATA_Mask                  (((uint32_t)0xFFFF) << 16)
#define ADC_DR_ADC2DATA                       ADC_DR_ADC2DATA_Mask
#define ADC_DR_DATA_Pos                       ((uint32_t)0)                     /* Regular data */
#define ADC_DR_DATA_Mask                      (((uint32_t)0xFFFF) << 0)
#define ADC_DR_DATA                           ADC_DR_DATA_Mask

/*****************************************************************************************
*                                     Peripheral DAC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __O  uint32_t SWTRIGR;                /* SWTRIGR */
  __IO uint32_t DHR12R1;                /* DHR12R1 */
  __IO uint32_t DHR12L1;                /* DHR12L1 */
  __IO uint32_t DHR8R1;                 /* DHR8R1 */
  __IO uint32_t DHR12R2;                /* DHR12R2 */
  __IO uint32_t DHR12L2;                /* DHR12L2 */
  __IO uint32_t DHR8R2;                 /* DHR8R2 */
  __IO uint32_t DHR12RD;                /* DHR12RD */
  __IO uint32_t DHR12LD;                /* DHR12LD */
  __IO uint32_t DHR8RD;                 /* DHR8RD */
  __I  uint32_t DOR1;                   /* DOR1 */
  __I  uint32_t DOR2;                   /* DOR2 */
}DAC_TypeDef;

/************************************** DAC->CR  ****************************************/
#define DAC_CR_DMAEN2_Pos                     ((uint32_t)28)                    /* DAC channel2 DMA enable */
#define DAC_CR_DMAEN2_Mask                    (((uint32_t)0x01) << 28)
#define DAC_CR_DMAEN2                         DAC_CR_DMAEN2_Mask
#define DAC_CR_MAMP2_Pos                      ((uint32_t)24)                    /* DAC channel2 mask/amplitude selector */
#define DAC_CR_MAMP2_Mask                     (((uint32_t)0x0F) << 24)
#define DAC_CR_MAMP2                          DAC_CR_MAMP2_Mask
#define DAC_CR_MAMP2_0                        (((uint32_t)0x1 << DAC_CR_MAMP2_Pos))
#define DAC_CR_MAMP2_1                        (((uint32_t)0x2 << DAC_CR_MAMP2_Pos))
#define DAC_CR_MAMP2_2                        (((uint32_t)0x4 << DAC_CR_MAMP2_Pos))
#define DAC_CR_MAMP2_3                        (((uint32_t)0x8 << DAC_CR_MAMP2_Pos))
#define DAC_CR_WAVE2_Pos                      ((uint32_t)22)                    /* DAC channel2 noise/triangle wave generation enable */
#define DAC_CR_WAVE2_Mask                     (((uint32_t)0x03) << 22)
#define DAC_CR_WAVE2                          DAC_CR_WAVE2_Mask
#define DAC_CR_WAVE2_0                        (((uint32_t)0x1 << DAC_CR_WAVE2_Pos))
#define DAC_CR_WAVE2_1                        (((uint32_t)0x2 << DAC_CR_WAVE2_Pos))
#define DAC_CR_TSEL2_Pos                      ((uint32_t)19)                    /* DAC channel2 trigger selection */
#define DAC_CR_TSEL2_Mask                     (((uint32_t)0x07) << 19)
#define DAC_CR_TSEL2                          DAC_CR_TSEL2_Mask
#define DAC_CR_TSEL2_0                        (((uint32_t)0x1 << DAC_CR_TSEL2_Pos))
#define DAC_CR_TSEL2_1                        (((uint32_t)0x2 << DAC_CR_TSEL2_Pos))
#define DAC_CR_TSEL2_2                        (((uint32_t)0x4 << DAC_CR_TSEL2_Pos))
#define DAC_CR_TEN2_Pos                       ((uint32_t)18)                    /* DAC channel2 trigger enable */
#define DAC_CR_TEN2_Mask                      (((uint32_t)0x01) << 18)
#define DAC_CR_TEN2                           DAC_CR_TEN2_Mask
#define DAC_CR_BOFF2_Pos                      ((uint32_t)17)                    /* DAC channel2 output buffer disable */
#define DAC_CR_BOFF2_Mask                     (((uint32_t)0x01) << 17)
#define DAC_CR_BOFF2                          DAC_CR_BOFF2_Mask
#define DAC_CR_EN2_Pos                        ((uint32_t)16)                    /* DAC channel2 enable */
#define DAC_CR_EN2_Mask                       (((uint32_t)0x01) << 16)
#define DAC_CR_EN2                            DAC_CR_EN2_Mask
#define DAC_CR_DMAEN1_Pos                     ((uint32_t)12)                    /* DAC channel1 DMA enable */
#define DAC_CR_DMAEN1_Mask                    (((uint32_t)0x01) << 12)
#define DAC_CR_DMAEN1                         DAC_CR_DMAEN1_Mask
#define DAC_CR_MAMP1_Pos                      ((uint32_t)8)                     /* DAC channel1 mask/amplitude selector */
#define DAC_CR_MAMP1_Mask                     (((uint32_t)0x0F) << 8)
#define DAC_CR_MAMP1                          DAC_CR_MAMP1_Mask
#define DAC_CR_MAMP1_0                        (((uint32_t)0x1 << DAC_CR_MAMP1_Pos))
#define DAC_CR_MAMP1_1                        (((uint32_t)0x2 << DAC_CR_MAMP1_Pos))
#define DAC_CR_MAMP1_2                        (((uint32_t)0x4 << DAC_CR_MAMP1_Pos))
#define DAC_CR_MAMP1_3                        (((uint32_t)0x8 << DAC_CR_MAMP1_Pos))
#define DAC_CR_WAVE1_Pos                      ((uint32_t)6)                     /* DAC channel1 noise/triangle wave generation enable */
#define DAC_CR_WAVE1_Mask                     (((uint32_t)0x03) << 6)
#define DAC_CR_WAVE1                          DAC_CR_WAVE1_Mask
#define DAC_CR_WAVE1_0                        (((uint32_t)0x1 << DAC_CR_WAVE1_Pos))
#define DAC_CR_WAVE1_1                        (((uint32_t)0x2 << DAC_CR_WAVE1_Pos))
#define DAC_CR_TSEL1_Pos                      ((uint32_t)3)                     /* DAC channel1 trigger selection */
#define DAC_CR_TSEL1_Mask                     (((uint32_t)0x07) << 3)
#define DAC_CR_TSEL1                          DAC_CR_TSEL1_Mask
#define DAC_CR_TSEL1_0                        (((uint32_t)0x1 << DAC_CR_TSEL1_Pos))
#define DAC_CR_TSEL1_1                        (((uint32_t)0x2 << DAC_CR_TSEL1_Pos))
#define DAC_CR_TSEL1_2                        (((uint32_t)0x4 << DAC_CR_TSEL1_Pos))
#define DAC_CR_TEN1_Pos                       ((uint32_t)2)                     /* DAC channel1 trigger enable */
#define DAC_CR_TEN1_Mask                      (((uint32_t)0x01) << 2)
#define DAC_CR_TEN1                           DAC_CR_TEN1_Mask
#define DAC_CR_BOFF1_Pos                      ((uint32_t)1)                     /* DAC channel1 output buffer disable */
#define DAC_CR_BOFF1_Mask                     (((uint32_t)0x01) << 1)
#define DAC_CR_BOFF1                          DAC_CR_BOFF1_Mask
#define DAC_CR_EN1_Pos                        ((uint32_t)0)                     /* DAC channel1 enable */
#define DAC_CR_EN1_Mask                       (((uint32_t)0x01) << 0)
#define DAC_CR_EN1                            DAC_CR_EN1_Mask

/************************************ DAC->SWTRIGR  *************************************/
#define DAC_SWTRIGR_SWTRIG2_Pos               ((uint32_t)1)                     /* DAC channel2 software trigger */
#define DAC_SWTRIGR_SWTRIG2_Mask              (((uint32_t)0x01) << 1)
#define DAC_SWTRIGR_SWTRIG2                   DAC_SWTRIGR_SWTRIG2_Mask
#define DAC_SWTRIGR_SWTRIG1_Pos               ((uint32_t)0)                     /* DAC channel1 software trigger */
#define DAC_SWTRIGR_SWTRIG1_Mask              (((uint32_t)0x01) << 0)
#define DAC_SWTRIGR_SWTRIG1                   DAC_SWTRIGR_SWTRIG1_Mask

/************************************ DAC->DHR12R1  *************************************/
#define DAC_DHR12R1_DACC1DHR_Pos              ((uint32_t)0)                     /* DAC channel1 12-bit right-aligned data */
#define DAC_DHR12R1_DACC1DHR_Mask             (((uint32_t)0x0FFF) << 0)
#define DAC_DHR12R1_DACC1DHR                  DAC_DHR12R1_DACC1DHR_Mask
#define DAC_DHR12R1_DACC1DHR_0                (((uint32_t)0x1))
#define DAC_DHR12R1_DACC1DHR_1                (((uint32_t)0x2))
#define DAC_DHR12R1_DACC1DHR_2                (((uint32_t)0x4))
#define DAC_DHR12R1_DACC1DHR_3                (((uint32_t)0x8))
#define DAC_DHR12R1_DACC1DHR_4                (((uint32_t)0x10))
#define DAC_DHR12R1_DACC1DHR_5                (((uint32_t)0x20))
#define DAC_DHR12R1_DACC1DHR_6                (((uint32_t)0x40))
#define DAC_DHR12R1_DACC1DHR_7                (((uint32_t)0x80))
#define DAC_DHR12R1_DACC1DHR_8                (((uint32_t)0x100))
#define DAC_DHR12R1_DACC1DHR_9                (((uint32_t)0x200))
#define DAC_DHR12R1_DACC1DHR_10               (((uint32_t)0x400))
#define DAC_DHR12R1_DACC1DHR_11               (((uint32_t)0x800))

/************************************ DAC->DHR12L1  *************************************/
#define DAC_DHR12L1_DACC1DHR_Pos              ((uint32_t)4)                     /* DAC channel1 12-bit left-aligned data */
#define DAC_DHR12L1_DACC1DHR_Mask             (((uint32_t)0x0FFF) << 4)
#define DAC_DHR12L1_DACC1DHR                  DAC_DHR12L1_DACC1DHR_Mask
#define DAC_DHR12L1_DACC1DHR_0                (((uint32_t)0x1 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_1                (((uint32_t)0x2 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_2                (((uint32_t)0x4 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_3                (((uint32_t)0x8 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_4                (((uint32_t)0x10 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_5                (((uint32_t)0x20 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_6                (((uint32_t)0x40 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_7                (((uint32_t)0x80 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_8                (((uint32_t)0x100 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_9                (((uint32_t)0x200 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_10               (((uint32_t)0x400 << DAC_DHR12L1_DACC1DHR_Pos))
#define DAC_DHR12L1_DACC1DHR_11               (((uint32_t)0x800 << DAC_DHR12L1_DACC1DHR_Pos))

/************************************ DAC->DHR8R1  **************************************/
#define DAC_DHR8R1_DACC1DHR_Pos               ((uint32_t)0)                     /* DAC channel1 8-bit right-aligned data */
#define DAC_DHR8R1_DACC1DHR_Mask              (((uint32_t)0xFF) << 0)
#define DAC_DHR8R1_DACC1DHR                   DAC_DHR8R1_DACC1DHR_Mask
#define DAC_DHR8R1_DACC1DHR_0                 (((uint32_t)0x1))
#define DAC_DHR8R1_DACC1DHR_1                 (((uint32_t)0x2))
#define DAC_DHR8R1_DACC1DHR_2                 (((uint32_t)0x4))
#define DAC_DHR8R1_DACC1DHR_3                 (((uint32_t)0x8))
#define DAC_DHR8R1_DACC1DHR_4                 (((uint32_t)0x10))
#define DAC_DHR8R1_DACC1DHR_5                 (((uint32_t)0x20))
#define DAC_DHR8R1_DACC1DHR_6                 (((uint32_t)0x40))
#define DAC_DHR8R1_DACC1DHR_7                 (((uint32_t)0x80))

/************************************ DAC->DHR12R2  *************************************/
#define DAC_DHR12R2_DACC2DHR_Pos              ((uint32_t)0)                     /* DAC channel2 12-bit right-aligned data */
#define DAC_DHR12R2_DACC2DHR_Mask             (((uint32_t)0x0FFF) << 0)
#define DAC_DHR12R2_DACC2DHR                  DAC_DHR12R2_DACC2DHR_Mask
#define DAC_DHR12R2_DACC2DHR_0                (((uint32_t)0x1))
#define DAC_DHR12R2_DACC2DHR_1                (((uint32_t)0x2))
#define DAC_DHR12R2_DACC2DHR_2                (((uint32_t)0x4))
#define DAC_DHR12R2_DACC2DHR_3                (((uint32_t)0x8))
#define DAC_DHR12R2_DACC2DHR_4                (((uint32_t)0x10))
#define DAC_DHR12R2_DACC2DHR_5                (((uint32_t)0x20))
#define DAC_DHR12R2_DACC2DHR_6                (((uint32_t)0x40))
#define DAC_DHR12R2_DACC2DHR_7                (((uint32_t)0x80))
#define DAC_DHR12R2_DACC2DHR_8                (((uint32_t)0x100))
#define DAC_DHR12R2_DACC2DHR_9                (((uint32_t)0x200))
#define DAC_DHR12R2_DACC2DHR_10               (((uint32_t)0x400))
#define DAC_DHR12R2_DACC2DHR_11               (((uint32_t)0x800))

/************************************ DAC->DHR12L2  *************************************/
#define DAC_DHR12L2_DACC2DHR_Pos              ((uint32_t)4)                     /* DAC channel2 12-bit left-aligned data */
#define DAC_DHR12L2_DACC2DHR_Mask             (((uint32_t)0x0FFF) << 4)
#define DAC_DHR12L2_DACC2DHR                  DAC_DHR12L2_DACC2DHR_Mask
#define DAC_DHR12L2_DACC2DHR_0                (((uint32_t)0x1 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_1                (((uint32_t)0x2 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_2                (((uint32_t)0x4 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_3                (((uint32_t)0x8 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_4                (((uint32_t)0x10 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_5                (((uint32_t)0x20 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_6                (((uint32_t)0x40 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_7                (((uint32_t)0x80 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_8                (((uint32_t)0x100 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_9                (((uint32_t)0x200 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_10               (((uint32_t)0x400 << DAC_DHR12L2_DACC2DHR_Pos))
#define DAC_DHR12L2_DACC2DHR_11               (((uint32_t)0x800 << DAC_DHR12L2_DACC2DHR_Pos))

/************************************ DAC->DHR8R2  **************************************/
#define DAC_DHR8R2_DACC2DHR_Pos               ((uint32_t)0)                     /* DAC channel2 8-bit right-aligned data */
#define DAC_DHR8R2_DACC2DHR_Mask              (((uint32_t)0xFF) << 0)
#define DAC_DHR8R2_DACC2DHR                   DAC_DHR8R2_DACC2DHR_Mask
#define DAC_DHR8R2_DACC2DHR_0                 (((uint32_t)0x1))
#define DAC_DHR8R2_DACC2DHR_1                 (((uint32_t)0x2))
#define DAC_DHR8R2_DACC2DHR_2                 (((uint32_t)0x4))
#define DAC_DHR8R2_DACC2DHR_3                 (((uint32_t)0x8))
#define DAC_DHR8R2_DACC2DHR_4                 (((uint32_t)0x10))
#define DAC_DHR8R2_DACC2DHR_5                 (((uint32_t)0x20))
#define DAC_DHR8R2_DACC2DHR_6                 (((uint32_t)0x40))
#define DAC_DHR8R2_DACC2DHR_7                 (((uint32_t)0x80))

/************************************ DAC->DHR12RD  *************************************/
#define DAC_DHR12RD_DACC2DHR_Pos              ((uint32_t)16)                    /* DAC channel2 12-bit right-aligned data */
#define DAC_DHR12RD_DACC2DHR_Mask             (((uint32_t)0x0FFF) << 16)
#define DAC_DHR12RD_DACC2DHR                  DAC_DHR12RD_DACC2DHR_Mask
#define DAC_DHR12RD_DACC2DHR_0                (((uint32_t)0x1 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_1                (((uint32_t)0x2 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_2                (((uint32_t)0x4 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_3                (((uint32_t)0x8 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_4                (((uint32_t)0x10 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_5                (((uint32_t)0x20 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_6                (((uint32_t)0x40 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_7                (((uint32_t)0x80 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_8                (((uint32_t)0x100 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_9                (((uint32_t)0x200 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_10               (((uint32_t)0x400 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC2DHR_11               (((uint32_t)0x800 << DAC_DHR12RD_DACC2DHR_Pos))
#define DAC_DHR12RD_DACC1DHR_Pos              ((uint32_t)0)                     /* DAC channel1 12-bit right-aligned data */
#define DAC_DHR12RD_DACC1DHR_Mask             (((uint32_t)0x0FFF) << 0)
#define DAC_DHR12RD_DACC1DHR                  DAC_DHR12RD_DACC1DHR_Mask
#define DAC_DHR12RD_DACC1DHR_0                (((uint32_t)0x1))
#define DAC_DHR12RD_DACC1DHR_1                (((uint32_t)0x2))
#define DAC_DHR12RD_DACC1DHR_2                (((uint32_t)0x4))
#define DAC_DHR12RD_DACC1DHR_3                (((uint32_t)0x8))
#define DAC_DHR12RD_DACC1DHR_4                (((uint32_t)0x10))
#define DAC_DHR12RD_DACC1DHR_5                (((uint32_t)0x20))
#define DAC_DHR12RD_DACC1DHR_6                (((uint32_t)0x40))
#define DAC_DHR12RD_DACC1DHR_7                (((uint32_t)0x80))
#define DAC_DHR12RD_DACC1DHR_8                (((uint32_t)0x100))
#define DAC_DHR12RD_DACC1DHR_9                (((uint32_t)0x200))
#define DAC_DHR12RD_DACC1DHR_10               (((uint32_t)0x400))
#define DAC_DHR12RD_DACC1DHR_11               (((uint32_t)0x800))

/************************************ DAC->DHR12LD  *************************************/
#define DAC_DHR12LD_DACC2DHR_Pos              ((uint32_t)20)                    /* DAC channel2 12-bit left-aligned data */
#define DAC_DHR12LD_DACC2DHR_Mask             (((uint32_t)0x0FFF) << 20)
#define DAC_DHR12LD_DACC2DHR                  DAC_DHR12LD_DACC2DHR_Mask
#define DAC_DHR12LD_DACC2DHR_0                (((uint32_t)0x1 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_1                (((uint32_t)0x2 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_2                (((uint32_t)0x4 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_3                (((uint32_t)0x8 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_4                (((uint32_t)0x10 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_5                (((uint32_t)0x20 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_6                (((uint32_t)0x40 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_7                (((uint32_t)0x80 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_8                (((uint32_t)0x100 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_9                (((uint32_t)0x200 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_10               (((uint32_t)0x400 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC2DHR_11               (((uint32_t)0x800 << DAC_DHR12LD_DACC2DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_Pos              ((uint32_t)4)                     /* DAC channel1 12-bit left-aligned data */
#define DAC_DHR12LD_DACC1DHR_Mask             (((uint32_t)0x0FFF) << 4)
#define DAC_DHR12LD_DACC1DHR                  DAC_DHR12LD_DACC1DHR_Mask
#define DAC_DHR12LD_DACC1DHR_0                (((uint32_t)0x1 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_1                (((uint32_t)0x2 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_2                (((uint32_t)0x4 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_3                (((uint32_t)0x8 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_4                (((uint32_t)0x10 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_5                (((uint32_t)0x20 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_6                (((uint32_t)0x40 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_7                (((uint32_t)0x80 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_8                (((uint32_t)0x100 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_9                (((uint32_t)0x200 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_10               (((uint32_t)0x400 << DAC_DHR12LD_DACC1DHR_Pos))
#define DAC_DHR12LD_DACC1DHR_11               (((uint32_t)0x800 << DAC_DHR12LD_DACC1DHR_Pos))

/************************************ DAC->DHR8RD  **************************************/
#define DAC_DHR8RD_DACC2DHR_Pos               ((uint32_t)8)                     /* DAC channel2 8-bit right-aligned data */
#define DAC_DHR8RD_DACC2DHR_Mask              (((uint32_t)0xFF) << 8)
#define DAC_DHR8RD_DACC2DHR                   DAC_DHR8RD_DACC2DHR_Mask
#define DAC_DHR8RD_DACC2DHR_0                 (((uint32_t)0x1 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_1                 (((uint32_t)0x2 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_2                 (((uint32_t)0x4 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_3                 (((uint32_t)0x8 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_4                 (((uint32_t)0x10 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_5                 (((uint32_t)0x20 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_6                 (((uint32_t)0x40 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC2DHR_7                 (((uint32_t)0x80 << DAC_DHR8RD_DACC2DHR_Pos))
#define DAC_DHR8RD_DACC1DHR_Pos               ((uint32_t)0)                     /* DAC channel1 8-bit right-aligned data */
#define DAC_DHR8RD_DACC1DHR_Mask              (((uint32_t)0xFF) << 0)
#define DAC_DHR8RD_DACC1DHR                   DAC_DHR8RD_DACC1DHR_Mask
#define DAC_DHR8RD_DACC1DHR_0                 (((uint32_t)0x1))
#define DAC_DHR8RD_DACC1DHR_1                 (((uint32_t)0x2))
#define DAC_DHR8RD_DACC1DHR_2                 (((uint32_t)0x4))
#define DAC_DHR8RD_DACC1DHR_3                 (((uint32_t)0x8))
#define DAC_DHR8RD_DACC1DHR_4                 (((uint32_t)0x10))
#define DAC_DHR8RD_DACC1DHR_5                 (((uint32_t)0x20))
#define DAC_DHR8RD_DACC1DHR_6                 (((uint32_t)0x40))
#define DAC_DHR8RD_DACC1DHR_7                 (((uint32_t)0x80))

/************************************* DAC->DOR1  ***************************************/
#define DAC_DOR1_DACC1DOR_Pos                 ((uint32_t)0)                     /* DAC channel1 data output */
#define DAC_DOR1_DACC1DOR_Mask                (((uint32_t)0x0FFF) << 0)
#define DAC_DOR1_DACC1DOR                     DAC_DOR1_DACC1DOR_Mask
#define DAC_DOR1_DACC1DOR_0                   (((uint32_t)0x1))
#define DAC_DOR1_DACC1DOR_1                   (((uint32_t)0x2))
#define DAC_DOR1_DACC1DOR_2                   (((uint32_t)0x4))
#define DAC_DOR1_DACC1DOR_3                   (((uint32_t)0x8))
#define DAC_DOR1_DACC1DOR_4                   (((uint32_t)0x10))
#define DAC_DOR1_DACC1DOR_5                   (((uint32_t)0x20))
#define DAC_DOR1_DACC1DOR_6                   (((uint32_t)0x40))
#define DAC_DOR1_DACC1DOR_7                   (((uint32_t)0x80))
#define DAC_DOR1_DACC1DOR_8                   (((uint32_t)0x100))
#define DAC_DOR1_DACC1DOR_9                   (((uint32_t)0x200))
#define DAC_DOR1_DACC1DOR_10                  (((uint32_t)0x400))
#define DAC_DOR1_DACC1DOR_11                  (((uint32_t)0x800))

/************************************* DAC->DOR2  ***************************************/
#define DAC_DOR2_DACC2DOR_Pos                 ((uint32_t)0)                     /* DAC channel2 data output */
#define DAC_DOR2_DACC2DOR_Mask                (((uint32_t)0x0FFF) << 0)
#define DAC_DOR2_DACC2DOR                     DAC_DOR2_DACC2DOR_Mask
#define DAC_DOR2_DACC2DOR_0                   (((uint32_t)0x1))
#define DAC_DOR2_DACC2DOR_1                   (((uint32_t)0x2))
#define DAC_DOR2_DACC2DOR_2                   (((uint32_t)0x4))
#define DAC_DOR2_DACC2DOR_3                   (((uint32_t)0x8))
#define DAC_DOR2_DACC2DOR_4                   (((uint32_t)0x10))
#define DAC_DOR2_DACC2DOR_5                   (((uint32_t)0x20))
#define DAC_DOR2_DACC2DOR_6                   (((uint32_t)0x40))
#define DAC_DOR2_DACC2DOR_7                   (((uint32_t)0x80))
#define DAC_DOR2_DACC2DOR_8                   (((uint32_t)0x100))
#define DAC_DOR2_DACC2DOR_9                   (((uint32_t)0x200))
#define DAC_DOR2_DACC2DOR_10                  (((uint32_t)0x400))
#define DAC_DOR2_DACC2DOR_11                  (((uint32_t)0x800))

/*****************************************************************************************
*                                     Peripheral FSMC                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t BCR1;                   /* BCR1 */
  __IO uint32_t BTR1;                   /* BTR1 */
  __IO uint32_t BCR2;                   /* BCR2 */
  __IO uint32_t BTR2;                   /* BTR2 */
  __IO uint32_t BCR3;                   /* BCR3 */
  __IO uint32_t BTR3;                   /* BTR3 */
  __IO uint32_t BCR4;                   /* BCR4 */
  __IO uint32_t BTR4;                   /* BTR4 */
       uint16_t RESERVED1[32];
  __IO uint32_t PCR2;                   /* PCR2 */
  __IO uint32_t SR2;                    /* SR2 */
  __IO uint32_t PMEM2;                  /* PMEM2 */
  __IO uint32_t PATT2;                  /* PATT2 */
       uint16_t RESERVED2[2];
  __IO uint32_t ECCR2;                  /* ECCR2 */
       uint16_t RESERVED3[4];
  __IO uint32_t PCR3;                   /* PCR3 */
  __IO uint32_t SR3;                    /* SR3 */
  __IO uint32_t PMEM3;                  /* PMEM3 */
  __IO uint32_t PATT3;                  /* PATT3 */
       uint16_t RESERVED4[2];
  __IO uint32_t ECCR3;                  /* ECCR3 */
       uint16_t RESERVED5[4];
  __IO uint32_t PCR4;                   /* PCR4 */
  __IO uint32_t SR4;                    /* SR4 */
  __IO uint32_t PMEM4;                  /* PMEM4 */
  __IO uint32_t PATT4;                  /* PATT4 */
  __IO uint32_t PIO4;                   /* PIO4 */
       uint16_t RESERVED6[40];
  __IO uint32_t BWTR1;                  /* BWTR1 */
       uint16_t RESERVED7[2];
  __IO uint32_t BWTR2;                  /* BWTR2 */
       uint16_t RESERVED8[2];
  __IO uint32_t BWTR3;                  /* BWTR3 */
       uint16_t RESERVED9[2];
  __IO uint32_t BWTR4;                  /* BWTR4 */
       uint16_t RESERVED10[104];
  __IO uint32_t NADV;                   /* NADV */
  __IO uint32_t ENCRY;                  /* ENCRY */
  __IO uint32_t DECRY;                  /* DECRY */
}FSMC_TypeDef;

/************************************* FSMC->BCR1  **************************************/
#define FSMC_BCR1_CBURSTRW_Pos                ((uint32_t)19)                    /* Write burst enable */
#define FSMC_BCR1_CBURSTRW_Mask               (((uint32_t)0x01) << 19)
#define FSMC_BCR1_CBURSTRW                    FSMC_BCR1_CBURSTRW_Mask
#define FSMC_BCR1_ASYNCWAIT_Pos               ((uint32_t)15)                    /* Wait signal during asynchronous transfers */
#define FSMC_BCR1_ASYNCWAIT_Mask              (((uint32_t)0x01) << 15)
#define FSMC_BCR1_ASYNCWAIT                   FSMC_BCR1_ASYNCWAIT_Mask
#define FSMC_BCR1_EXTMOD_Pos                  ((uint32_t)14)                    /* Extended mode enable */
#define FSMC_BCR1_EXTMOD_Mask                 (((uint32_t)0x01) << 14)
#define FSMC_BCR1_EXTMOD                      FSMC_BCR1_EXTMOD_Mask
#define FSMC_BCR1_WAITEN_Pos                  ((uint32_t)13)                    /* Wait enable bit */
#define FSMC_BCR1_WAITEN_Mask                 (((uint32_t)0x01) << 13)
#define FSMC_BCR1_WAITEN                      FSMC_BCR1_WAITEN_Mask
#define FSMC_BCR1_WREN_Pos                    ((uint32_t)12)                    /* Write enable bit */
#define FSMC_BCR1_WREN_Mask                   (((uint32_t)0x01) << 12)
#define FSMC_BCR1_WREN                        FSMC_BCR1_WREN_Mask
#define FSMC_BCR1_WAITCFG_Pos                 ((uint32_t)11)                    /* Wait timing configuration */
#define FSMC_BCR1_WAITCFG_Mask                (((uint32_t)0x01) << 11)
#define FSMC_BCR1_WAITCFG                     FSMC_BCR1_WAITCFG_Mask
#define FSMC_BCR1_WRAPMOD_Pos                 ((uint32_t)10)                    /* Wrapped burst mode support */
#define FSMC_BCR1_WRAPMOD_Mask                (((uint32_t)0x01) << 10)
#define FSMC_BCR1_WRAPMOD                     FSMC_BCR1_WRAPMOD_Mask
#define FSMC_BCR1_WAITPOL_Pos                 ((uint32_t)9)                     /* Wait signal polarity bit */
#define FSMC_BCR1_WAITPOL_Mask                (((uint32_t)0x01) << 9)
#define FSMC_BCR1_WAITPOL                     FSMC_BCR1_WAITPOL_Mask
#define FSMC_BCR1_BURSTEN_Pos                 ((uint32_t)8)                     /* Burst enable bit */
#define FSMC_BCR1_BURSTEN_Mask                (((uint32_t)0x01) << 8)
#define FSMC_BCR1_BURSTEN                     FSMC_BCR1_BURSTEN_Mask
#define FSMC_BCR1_FACCEN_Pos                  ((uint32_t)6)                     /* Flash access enable */
#define FSMC_BCR1_FACCEN_Mask                 (((uint32_t)0x01) << 6)
#define FSMC_BCR1_FACCEN                      FSMC_BCR1_FACCEN_Mask
#define FSMC_BCR1_MWID_Pos                    ((uint32_t)4)                     /* Memory databus width */
#define FSMC_BCR1_MWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_BCR1_MWID                        FSMC_BCR1_MWID_Mask
#define FSMC_BCR1_MWID_0                      (((uint32_t)0x1 << FSMC_BCR1_MWID_Pos))
#define FSMC_BCR1_MWID_1                      (((uint32_t)0x2 << FSMC_BCR1_MWID_Pos))
#define FSMC_BCR1_MTYP_Pos                    ((uint32_t)2)                     /* Memory type */
#define FSMC_BCR1_MTYP_Mask                   (((uint32_t)0x03) << 2)
#define FSMC_BCR1_MTYP                        FSMC_BCR1_MTYP_Mask
#define FSMC_BCR1_MTYP_0                      (((uint32_t)0x1 << FSMC_BCR1_MTYP_Pos))
#define FSMC_BCR1_MTYP_1                      (((uint32_t)0x2 << FSMC_BCR1_MTYP_Pos))
#define FSMC_BCR1_MUXEN_Pos                   ((uint32_t)1)                     /* Address/data multiplexing enable bit */
#define FSMC_BCR1_MUXEN_Mask                  (((uint32_t)0x01) << 1)
#define FSMC_BCR1_MUXEN                       FSMC_BCR1_MUXEN_Mask
#define FSMC_BCR1_MBKEN_Pos                   ((uint32_t)0)                     /* Memory bank enable bit */
#define FSMC_BCR1_MBKEN_Mask                  (((uint32_t)0x01) << 0)
#define FSMC_BCR1_MBKEN                       FSMC_BCR1_MBKEN_Mask

/************************************* FSMC->BCR2  **************************************/
#define FSMC_BCR2_CBURSTRW_Pos                ((uint32_t)19)                    /* Write burst enable */
#define FSMC_BCR2_CBURSTRW_Mask               (((uint32_t)0x01) << 19)
#define FSMC_BCR2_CBURSTRW                    FSMC_BCR2_CBURSTRW_Mask
#define FSMC_BCR2_ASYNCWAIT_Pos               ((uint32_t)15)                    /* Wait signal during asynchronous transfers */
#define FSMC_BCR2_ASYNCWAIT_Mask              (((uint32_t)0x01) << 15)
#define FSMC_BCR2_ASYNCWAIT                   FSMC_BCR2_ASYNCWAIT_Mask
#define FSMC_BCR2_EXTMOD_Pos                  ((uint32_t)14)                    /* Extended mode enable */
#define FSMC_BCR2_EXTMOD_Mask                 (((uint32_t)0x01) << 14)
#define FSMC_BCR2_EXTMOD                      FSMC_BCR2_EXTMOD_Mask
#define FSMC_BCR2_WAITEN_Pos                  ((uint32_t)13)                    /* Wait enable bit */
#define FSMC_BCR2_WAITEN_Mask                 (((uint32_t)0x01) << 13)
#define FSMC_BCR2_WAITEN                      FSMC_BCR2_WAITEN_Mask
#define FSMC_BCR2_WREN_Pos                    ((uint32_t)12)                    /* Write enable bit */
#define FSMC_BCR2_WREN_Mask                   (((uint32_t)0x01) << 12)
#define FSMC_BCR2_WREN                        FSMC_BCR2_WREN_Mask
#define FSMC_BCR2_WAITCFG_Pos                 ((uint32_t)11)                    /* Wait timing configuration */
#define FSMC_BCR2_WAITCFG_Mask                (((uint32_t)0x01) << 11)
#define FSMC_BCR2_WAITCFG                     FSMC_BCR2_WAITCFG_Mask
#define FSMC_BCR2_WRAPMOD_Pos                 ((uint32_t)10)                    /* Wrapped burst mode support */
#define FSMC_BCR2_WRAPMOD_Mask                (((uint32_t)0x01) << 10)
#define FSMC_BCR2_WRAPMOD                     FSMC_BCR2_WRAPMOD_Mask
#define FSMC_BCR2_WAITPOL_Pos                 ((uint32_t)9)                     /* Wait signal polarity bit */
#define FSMC_BCR2_WAITPOL_Mask                (((uint32_t)0x01) << 9)
#define FSMC_BCR2_WAITPOL                     FSMC_BCR2_WAITPOL_Mask
#define FSMC_BCR2_BURSTEN_Pos                 ((uint32_t)8)                     /* Burst enable bit */
#define FSMC_BCR2_BURSTEN_Mask                (((uint32_t)0x01) << 8)
#define FSMC_BCR2_BURSTEN                     FSMC_BCR2_BURSTEN_Mask
#define FSMC_BCR2_FACCEN_Pos                  ((uint32_t)6)                     /* Flash access enable */
#define FSMC_BCR2_FACCEN_Mask                 (((uint32_t)0x01) << 6)
#define FSMC_BCR2_FACCEN                      FSMC_BCR2_FACCEN_Mask
#define FSMC_BCR2_MWID_Pos                    ((uint32_t)4)                     /* Memory databus width */
#define FSMC_BCR2_MWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_BCR2_MWID                        FSMC_BCR2_MWID_Mask
#define FSMC_BCR2_MWID_0                      (((uint32_t)0x1 << FSMC_BCR2_MWID_Pos))
#define FSMC_BCR2_MWID_1                      (((uint32_t)0x2 << FSMC_BCR2_MWID_Pos))
#define FSMC_BCR2_MTYP_Pos                    ((uint32_t)2)                     /* Memory type */
#define FSMC_BCR2_MTYP_Mask                   (((uint32_t)0x03) << 2)
#define FSMC_BCR2_MTYP                        FSMC_BCR2_MTYP_Mask
#define FSMC_BCR2_MTYP_0                      (((uint32_t)0x1 << FSMC_BCR2_MTYP_Pos))
#define FSMC_BCR2_MTYP_1                      (((uint32_t)0x2 << FSMC_BCR2_MTYP_Pos))
#define FSMC_BCR2_MUXEN_Pos                   ((uint32_t)1)                     /* Address/data multiplexing enable bit */
#define FSMC_BCR2_MUXEN_Mask                  (((uint32_t)0x01) << 1)
#define FSMC_BCR2_MUXEN                       FSMC_BCR2_MUXEN_Mask
#define FSMC_BCR2_MBKEN_Pos                   ((uint32_t)0)                     /* Memory bank enable bit */
#define FSMC_BCR2_MBKEN_Mask                  (((uint32_t)0x01) << 0)
#define FSMC_BCR2_MBKEN                       FSMC_BCR2_MBKEN_Mask

/************************************* FSMC->BCR3  **************************************/
#define FSMC_BCR3_CBURSTRW_Pos                ((uint32_t)19)                    /* Write burst enable */
#define FSMC_BCR3_CBURSTRW_Mask               (((uint32_t)0x01) << 19)
#define FSMC_BCR3_CBURSTRW                    FSMC_BCR3_CBURSTRW_Mask
#define FSMC_BCR3_ASYNCWAIT_Pos               ((uint32_t)15)                    /* Wait signal during asynchronous transfers */
#define FSMC_BCR3_ASYNCWAIT_Mask              (((uint32_t)0x01) << 15)
#define FSMC_BCR3_ASYNCWAIT                   FSMC_BCR3_ASYNCWAIT_Mask
#define FSMC_BCR3_EXTMOD_Pos                  ((uint32_t)14)                    /* Extended mode enable */
#define FSMC_BCR3_EXTMOD_Mask                 (((uint32_t)0x01) << 14)
#define FSMC_BCR3_EXTMOD                      FSMC_BCR3_EXTMOD_Mask
#define FSMC_BCR3_WAITEN_Pos                  ((uint32_t)13)                    /* Wait enable bit */
#define FSMC_BCR3_WAITEN_Mask                 (((uint32_t)0x01) << 13)
#define FSMC_BCR3_WAITEN                      FSMC_BCR3_WAITEN_Mask
#define FSMC_BCR3_WREN_Pos                    ((uint32_t)12)                    /* Write enable bit */
#define FSMC_BCR3_WREN_Mask                   (((uint32_t)0x01) << 12)
#define FSMC_BCR3_WREN                        FSMC_BCR3_WREN_Mask
#define FSMC_BCR3_WAITCFG_Pos                 ((uint32_t)11)                    /* Wait timing configuration */
#define FSMC_BCR3_WAITCFG_Mask                (((uint32_t)0x01) << 11)
#define FSMC_BCR3_WAITCFG                     FSMC_BCR3_WAITCFG_Mask
#define FSMC_BCR3_WRAPMOD_Pos                 ((uint32_t)10)                    /* Wrapped burst mode support */
#define FSMC_BCR3_WRAPMOD_Mask                (((uint32_t)0x01) << 10)
#define FSMC_BCR3_WRAPMOD                     FSMC_BCR3_WRAPMOD_Mask
#define FSMC_BCR3_WAITPOL_Pos                 ((uint32_t)9)                     /* Wait signal polarity bit */
#define FSMC_BCR3_WAITPOL_Mask                (((uint32_t)0x01) << 9)
#define FSMC_BCR3_WAITPOL                     FSMC_BCR3_WAITPOL_Mask
#define FSMC_BCR3_BURSTEN_Pos                 ((uint32_t)8)                     /* Burst enable bit */
#define FSMC_BCR3_BURSTEN_Mask                (((uint32_t)0x01) << 8)
#define FSMC_BCR3_BURSTEN                     FSMC_BCR3_BURSTEN_Mask
#define FSMC_BCR3_FACCEN_Pos                  ((uint32_t)6)                     /* Flash access enable */
#define FSMC_BCR3_FACCEN_Mask                 (((uint32_t)0x01) << 6)
#define FSMC_BCR3_FACCEN                      FSMC_BCR3_FACCEN_Mask
#define FSMC_BCR3_MWID_Pos                    ((uint32_t)4)                     /* Memory databus width */
#define FSMC_BCR3_MWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_BCR3_MWID                        FSMC_BCR3_MWID_Mask
#define FSMC_BCR3_MWID_0                      (((uint32_t)0x1 << FSMC_BCR3_MWID_Pos))
#define FSMC_BCR3_MWID_1                      (((uint32_t)0x2 << FSMC_BCR3_MWID_Pos))
#define FSMC_BCR3_MTYP_Pos                    ((uint32_t)2)                     /* Memory type */
#define FSMC_BCR3_MTYP_Mask                   (((uint32_t)0x03) << 2)
#define FSMC_BCR3_MTYP                        FSMC_BCR3_MTYP_Mask
#define FSMC_BCR3_MTYP_0                      (((uint32_t)0x1 << FSMC_BCR3_MTYP_Pos))
#define FSMC_BCR3_MTYP_1                      (((uint32_t)0x2 << FSMC_BCR3_MTYP_Pos))
#define FSMC_BCR3_MUXEN_Pos                   ((uint32_t)1)                     /* Address/data multiplexing enable bit */
#define FSMC_BCR3_MUXEN_Mask                  (((uint32_t)0x01) << 1)
#define FSMC_BCR3_MUXEN                       FSMC_BCR3_MUXEN_Mask
#define FSMC_BCR3_MBKEN_Pos                   ((uint32_t)0)                     /* Memory bank enable bit */
#define FSMC_BCR3_MBKEN_Mask                  (((uint32_t)0x01) << 0)
#define FSMC_BCR3_MBKEN                       FSMC_BCR3_MBKEN_Mask

/************************************* FSMC->BCR4  **************************************/
#define FSMC_BCR4_CBURSTRW_Pos                ((uint32_t)19)                    /* Write burst enable */
#define FSMC_BCR4_CBURSTRW_Mask               (((uint32_t)0x01) << 19)
#define FSMC_BCR4_CBURSTRW                    FSMC_BCR4_CBURSTRW_Mask
#define FSMC_BCR4_ASYNCWAIT_Pos               ((uint32_t)15)                    /* Wait signal during asynchronous transfers */
#define FSMC_BCR4_ASYNCWAIT_Mask              (((uint32_t)0x01) << 15)
#define FSMC_BCR4_ASYNCWAIT                   FSMC_BCR4_ASYNCWAIT_Mask
#define FSMC_BCR4_EXTMOD_Pos                  ((uint32_t)14)                    /* Extended mode enable */
#define FSMC_BCR4_EXTMOD_Mask                 (((uint32_t)0x01) << 14)
#define FSMC_BCR4_EXTMOD                      FSMC_BCR4_EXTMOD_Mask
#define FSMC_BCR4_WAITEN_Pos                  ((uint32_t)13)                    /* Wait enable bit */
#define FSMC_BCR4_WAITEN_Mask                 (((uint32_t)0x01) << 13)
#define FSMC_BCR4_WAITEN                      FSMC_BCR4_WAITEN_Mask
#define FSMC_BCR4_WREN_Pos                    ((uint32_t)12)                    /* Write enable bit */
#define FSMC_BCR4_WREN_Mask                   (((uint32_t)0x01) << 12)
#define FSMC_BCR4_WREN                        FSMC_BCR4_WREN_Mask
#define FSMC_BCR4_WAITCFG_Pos                 ((uint32_t)11)                    /* Wait timing configuration */
#define FSMC_BCR4_WAITCFG_Mask                (((uint32_t)0x01) << 11)
#define FSMC_BCR4_WAITCFG                     FSMC_BCR4_WAITCFG_Mask
#define FSMC_BCR4_WRAPMOD_Pos                 ((uint32_t)10)                    /* Wrapped burst mode support */
#define FSMC_BCR4_WRAPMOD_Mask                (((uint32_t)0x01) << 10)
#define FSMC_BCR4_WRAPMOD                     FSMC_BCR4_WRAPMOD_Mask
#define FSMC_BCR4_WAITPOL_Pos                 ((uint32_t)9)                     /* Wait signal polarity bit */
#define FSMC_BCR4_WAITPOL_Mask                (((uint32_t)0x01) << 9)
#define FSMC_BCR4_WAITPOL                     FSMC_BCR4_WAITPOL_Mask
#define FSMC_BCR4_BURSTEN_Pos                 ((uint32_t)8)                     /* Burst enable bit */
#define FSMC_BCR4_BURSTEN_Mask                (((uint32_t)0x01) << 8)
#define FSMC_BCR4_BURSTEN                     FSMC_BCR4_BURSTEN_Mask
#define FSMC_BCR4_FACCEN_Pos                  ((uint32_t)6)                     /* Flash access enable */
#define FSMC_BCR4_FACCEN_Mask                 (((uint32_t)0x01) << 6)
#define FSMC_BCR4_FACCEN                      FSMC_BCR4_FACCEN_Mask
#define FSMC_BCR4_MWID_Pos                    ((uint32_t)4)                     /* Memory databus width */
#define FSMC_BCR4_MWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_BCR4_MWID                        FSMC_BCR4_MWID_Mask
#define FSMC_BCR4_MWID_0                      (((uint32_t)0x1 << FSMC_BCR4_MWID_Pos))
#define FSMC_BCR4_MWID_1                      (((uint32_t)0x2 << FSMC_BCR4_MWID_Pos))
#define FSMC_BCR4_MTYP_Pos                    ((uint32_t)2)                     /* Memory type */
#define FSMC_BCR4_MTYP_Mask                   (((uint32_t)0x03) << 2)
#define FSMC_BCR4_MTYP                        FSMC_BCR4_MTYP_Mask
#define FSMC_BCR4_MTYP_0                      (((uint32_t)0x1 << FSMC_BCR4_MTYP_Pos))
#define FSMC_BCR4_MTYP_1                      (((uint32_t)0x2 << FSMC_BCR4_MTYP_Pos))
#define FSMC_BCR4_MUXEN_Pos                   ((uint32_t)1)                     /* Address/data multiplexing enable bit */
#define FSMC_BCR4_MUXEN_Mask                  (((uint32_t)0x01) << 1)
#define FSMC_BCR4_MUXEN                       FSMC_BCR4_MUXEN_Mask
#define FSMC_BCR4_MBKEN_Pos                   ((uint32_t)0)                     /* Memory bank enable bit */
#define FSMC_BCR4_MBKEN_Mask                  (((uint32_t)0x01) << 0)
#define FSMC_BCR4_MBKEN                       FSMC_BCR4_MBKEN_Mask

/************************************* FSMC->BTR1  **************************************/
#define FSMC_BTR1_ACCMOD_Pos                  ((uint32_t)28)                    /* Access mode */
#define FSMC_BTR1_ACCMOD_Mask                 (((uint32_t)0x03) << 28)
#define FSMC_BTR1_ACCMOD                      FSMC_BTR1_ACCMOD_Mask
#define FSMC_BTR1_ACCMOD_0                    (((uint32_t)0x1 << FSMC_BTR1_ACCMOD_Pos))
#define FSMC_BTR1_ACCMOD_1                    (((uint32_t)0x2 << FSMC_BTR1_ACCMOD_Pos))
#define FSMC_BTR1_DATLAT_Pos                  ((uint32_t)24)                    /* Data latency for synchronous NOR Flash memory */
#define FSMC_BTR1_DATLAT_Mask                 (((uint32_t)0x0F) << 24)
#define FSMC_BTR1_DATLAT                      FSMC_BTR1_DATLAT_Mask
#define FSMC_BTR1_DATLAT_0                    (((uint32_t)0x1 << FSMC_BTR1_DATLAT_Pos))
#define FSMC_BTR1_DATLAT_1                    (((uint32_t)0x2 << FSMC_BTR1_DATLAT_Pos))
#define FSMC_BTR1_DATLAT_2                    (((uint32_t)0x4 << FSMC_BTR1_DATLAT_Pos))
#define FSMC_BTR1_DATLAT_3                    (((uint32_t)0x8 << FSMC_BTR1_DATLAT_Pos))
#define FSMC_BTR1_CLKDIV_Pos                  ((uint32_t)20)                    /* Clock divide ratio */
#define FSMC_BTR1_CLKDIV_Mask                 (((uint32_t)0x0F) << 20)
#define FSMC_BTR1_CLKDIV                      FSMC_BTR1_CLKDIV_Mask
#define FSMC_BTR1_CLKDIV_0                    (((uint32_t)0x1 << FSMC_BTR1_CLKDIV_Pos))
#define FSMC_BTR1_CLKDIV_1                    (((uint32_t)0x2 << FSMC_BTR1_CLKDIV_Pos))
#define FSMC_BTR1_CLKDIV_2                    (((uint32_t)0x4 << FSMC_BTR1_CLKDIV_Pos))
#define FSMC_BTR1_CLKDIV_3                    (((uint32_t)0x8 << FSMC_BTR1_CLKDIV_Pos))
#define FSMC_BTR1_BUSTURN_Pos                 ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BTR1_BUSTURN_Mask                (((uint32_t)0x0F) << 16)
#define FSMC_BTR1_BUSTURN                     FSMC_BTR1_BUSTURN_Mask
#define FSMC_BTR1_BUSTURN_0                   (((uint32_t)0x1 << FSMC_BTR1_BUSTURN_Pos))
#define FSMC_BTR1_BUSTURN_1                   (((uint32_t)0x2 << FSMC_BTR1_BUSTURN_Pos))
#define FSMC_BTR1_BUSTURN_2                   (((uint32_t)0x4 << FSMC_BTR1_BUSTURN_Pos))
#define FSMC_BTR1_BUSTURN_3                   (((uint32_t)0x8 << FSMC_BTR1_BUSTURN_Pos))
#define FSMC_BTR1_DATAST_Pos                  ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BTR1_DATAST_Mask                 (((uint32_t)0xFF) << 8)
#define FSMC_BTR1_DATAST                      FSMC_BTR1_DATAST_Mask
#define FSMC_BTR1_DATAST_0                    (((uint32_t)0x1 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_1                    (((uint32_t)0x2 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_2                    (((uint32_t)0x4 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_3                    (((uint32_t)0x8 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_4                    (((uint32_t)0x10 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_5                    (((uint32_t)0x20 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_6                    (((uint32_t)0x40 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_DATAST_7                    (((uint32_t)0x80 << FSMC_BTR1_DATAST_Pos))
#define FSMC_BTR1_ADDHLD_Pos                  ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BTR1_ADDHLD_Mask                 (((uint32_t)0x0F) << 4)
#define FSMC_BTR1_ADDHLD                      FSMC_BTR1_ADDHLD_Mask
#define FSMC_BTR1_ADDHLD_0                    (((uint32_t)0x1 << FSMC_BTR1_ADDHLD_Pos))
#define FSMC_BTR1_ADDHLD_1                    (((uint32_t)0x2 << FSMC_BTR1_ADDHLD_Pos))
#define FSMC_BTR1_ADDHLD_2                    (((uint32_t)0x4 << FSMC_BTR1_ADDHLD_Pos))
#define FSMC_BTR1_ADDHLD_3                    (((uint32_t)0x8 << FSMC_BTR1_ADDHLD_Pos))
#define FSMC_BTR1_ADDSET_Pos                  ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BTR1_ADDSET_Mask                 (((uint32_t)0x0F) << 0)
#define FSMC_BTR1_ADDSET                      FSMC_BTR1_ADDSET_Mask
#define FSMC_BTR1_ADDSET_0                    (((uint32_t)0x1))
#define FSMC_BTR1_ADDSET_1                    (((uint32_t)0x2))
#define FSMC_BTR1_ADDSET_2                    (((uint32_t)0x4))
#define FSMC_BTR1_ADDSET_3                    (((uint32_t)0x8))

/************************************* FSMC->BTR2  **************************************/
#define FSMC_BTR2_ACCMOD_Pos                  ((uint32_t)28)                    /* Access mode */
#define FSMC_BTR2_ACCMOD_Mask                 (((uint32_t)0x03) << 28)
#define FSMC_BTR2_ACCMOD                      FSMC_BTR2_ACCMOD_Mask
#define FSMC_BTR2_ACCMOD_0                    (((uint32_t)0x1 << FSMC_BTR2_ACCMOD_Pos))
#define FSMC_BTR2_ACCMOD_1                    (((uint32_t)0x2 << FSMC_BTR2_ACCMOD_Pos))
#define FSMC_BTR2_DATLAT_Pos                  ((uint32_t)24)                    /* Data latency for synchronous NOR Flash memory */
#define FSMC_BTR2_DATLAT_Mask                 (((uint32_t)0x0F) << 24)
#define FSMC_BTR2_DATLAT                      FSMC_BTR2_DATLAT_Mask
#define FSMC_BTR2_DATLAT_0                    (((uint32_t)0x1 << FSMC_BTR2_DATLAT_Pos))
#define FSMC_BTR2_DATLAT_1                    (((uint32_t)0x2 << FSMC_BTR2_DATLAT_Pos))
#define FSMC_BTR2_DATLAT_2                    (((uint32_t)0x4 << FSMC_BTR2_DATLAT_Pos))
#define FSMC_BTR2_DATLAT_3                    (((uint32_t)0x8 << FSMC_BTR2_DATLAT_Pos))
#define FSMC_BTR2_CLKDIV_Pos                  ((uint32_t)20)                    /* Clock divide ratio */
#define FSMC_BTR2_CLKDIV_Mask                 (((uint32_t)0x0F) << 20)
#define FSMC_BTR2_CLKDIV                      FSMC_BTR2_CLKDIV_Mask
#define FSMC_BTR2_CLKDIV_0                    (((uint32_t)0x1 << FSMC_BTR2_CLKDIV_Pos))
#define FSMC_BTR2_CLKDIV_1                    (((uint32_t)0x2 << FSMC_BTR2_CLKDIV_Pos))
#define FSMC_BTR2_CLKDIV_2                    (((uint32_t)0x4 << FSMC_BTR2_CLKDIV_Pos))
#define FSMC_BTR2_CLKDIV_3                    (((uint32_t)0x8 << FSMC_BTR2_CLKDIV_Pos))
#define FSMC_BTR2_BUSTURN_Pos                 ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BTR2_BUSTURN_Mask                (((uint32_t)0x0F) << 16)
#define FSMC_BTR2_BUSTURN                     FSMC_BTR2_BUSTURN_Mask
#define FSMC_BTR2_BUSTURN_0                   (((uint32_t)0x1 << FSMC_BTR2_BUSTURN_Pos))
#define FSMC_BTR2_BUSTURN_1                   (((uint32_t)0x2 << FSMC_BTR2_BUSTURN_Pos))
#define FSMC_BTR2_BUSTURN_2                   (((uint32_t)0x4 << FSMC_BTR2_BUSTURN_Pos))
#define FSMC_BTR2_BUSTURN_3                   (((uint32_t)0x8 << FSMC_BTR2_BUSTURN_Pos))
#define FSMC_BTR2_DATAST_Pos                  ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BTR2_DATAST_Mask                 (((uint32_t)0xFF) << 8)
#define FSMC_BTR2_DATAST                      FSMC_BTR2_DATAST_Mask
#define FSMC_BTR2_DATAST_0                    (((uint32_t)0x1 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_1                    (((uint32_t)0x2 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_2                    (((uint32_t)0x4 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_3                    (((uint32_t)0x8 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_4                    (((uint32_t)0x10 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_5                    (((uint32_t)0x20 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_6                    (((uint32_t)0x40 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_DATAST_7                    (((uint32_t)0x80 << FSMC_BTR2_DATAST_Pos))
#define FSMC_BTR2_ADDHLD_Pos                  ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BTR2_ADDHLD_Mask                 (((uint32_t)0x0F) << 4)
#define FSMC_BTR2_ADDHLD                      FSMC_BTR2_ADDHLD_Mask
#define FSMC_BTR2_ADDHLD_0                    (((uint32_t)0x1 << FSMC_BTR2_ADDHLD_Pos))
#define FSMC_BTR2_ADDHLD_1                    (((uint32_t)0x2 << FSMC_BTR2_ADDHLD_Pos))
#define FSMC_BTR2_ADDHLD_2                    (((uint32_t)0x4 << FSMC_BTR2_ADDHLD_Pos))
#define FSMC_BTR2_ADDHLD_3                    (((uint32_t)0x8 << FSMC_BTR2_ADDHLD_Pos))
#define FSMC_BTR2_ADDSET_Pos                  ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BTR2_ADDSET_Mask                 (((uint32_t)0x0F) << 0)
#define FSMC_BTR2_ADDSET                      FSMC_BTR2_ADDSET_Mask
#define FSMC_BTR2_ADDSET_0                    (((uint32_t)0x1))
#define FSMC_BTR2_ADDSET_1                    (((uint32_t)0x2))
#define FSMC_BTR2_ADDSET_2                    (((uint32_t)0x4))
#define FSMC_BTR2_ADDSET_3                    (((uint32_t)0x8))

/************************************* FSMC->BTR3  **************************************/
#define FSMC_BTR3_ACCMOD_Pos                  ((uint32_t)28)                    /* Access mode */
#define FSMC_BTR3_ACCMOD_Mask                 (((uint32_t)0x03) << 28)
#define FSMC_BTR3_ACCMOD                      FSMC_BTR3_ACCMOD_Mask
#define FSMC_BTR3_ACCMOD_0                    (((uint32_t)0x1 << FSMC_BTR3_ACCMOD_Pos))
#define FSMC_BTR3_ACCMOD_1                    (((uint32_t)0x2 << FSMC_BTR3_ACCMOD_Pos))
#define FSMC_BTR3_DATLAT_Pos                  ((uint32_t)24)                    /* Data latency for synchronous NOR Flash memory */
#define FSMC_BTR3_DATLAT_Mask                 (((uint32_t)0x0F) << 24)
#define FSMC_BTR3_DATLAT                      FSMC_BTR3_DATLAT_Mask
#define FSMC_BTR3_DATLAT_0                    (((uint32_t)0x1 << FSMC_BTR3_DATLAT_Pos))
#define FSMC_BTR3_DATLAT_1                    (((uint32_t)0x2 << FSMC_BTR3_DATLAT_Pos))
#define FSMC_BTR3_DATLAT_2                    (((uint32_t)0x4 << FSMC_BTR3_DATLAT_Pos))
#define FSMC_BTR3_DATLAT_3                    (((uint32_t)0x8 << FSMC_BTR3_DATLAT_Pos))
#define FSMC_BTR3_CLKDIV_Pos                  ((uint32_t)20)                    /* Clock divide ratio */
#define FSMC_BTR3_CLKDIV_Mask                 (((uint32_t)0x0F) << 20)
#define FSMC_BTR3_CLKDIV                      FSMC_BTR3_CLKDIV_Mask
#define FSMC_BTR3_CLKDIV_0                    (((uint32_t)0x1 << FSMC_BTR3_CLKDIV_Pos))
#define FSMC_BTR3_CLKDIV_1                    (((uint32_t)0x2 << FSMC_BTR3_CLKDIV_Pos))
#define FSMC_BTR3_CLKDIV_2                    (((uint32_t)0x4 << FSMC_BTR3_CLKDIV_Pos))
#define FSMC_BTR3_CLKDIV_3                    (((uint32_t)0x8 << FSMC_BTR3_CLKDIV_Pos))
#define FSMC_BTR3_BUSTURN_Pos                 ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BTR3_BUSTURN_Mask                (((uint32_t)0x0F) << 16)
#define FSMC_BTR3_BUSTURN                     FSMC_BTR3_BUSTURN_Mask
#define FSMC_BTR3_BUSTURN_0                   (((uint32_t)0x1 << FSMC_BTR3_BUSTURN_Pos))
#define FSMC_BTR3_BUSTURN_1                   (((uint32_t)0x2 << FSMC_BTR3_BUSTURN_Pos))
#define FSMC_BTR3_BUSTURN_2                   (((uint32_t)0x4 << FSMC_BTR3_BUSTURN_Pos))
#define FSMC_BTR3_BUSTURN_3                   (((uint32_t)0x8 << FSMC_BTR3_BUSTURN_Pos))
#define FSMC_BTR3_DATAST_Pos                  ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BTR3_DATAST_Mask                 (((uint32_t)0xFF) << 8)
#define FSMC_BTR3_DATAST                      FSMC_BTR3_DATAST_Mask
#define FSMC_BTR3_DATAST_0                    (((uint32_t)0x1 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_1                    (((uint32_t)0x2 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_2                    (((uint32_t)0x4 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_3                    (((uint32_t)0x8 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_4                    (((uint32_t)0x10 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_5                    (((uint32_t)0x20 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_6                    (((uint32_t)0x40 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_DATAST_7                    (((uint32_t)0x80 << FSMC_BTR3_DATAST_Pos))
#define FSMC_BTR3_ADDHLD_Pos                  ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BTR3_ADDHLD_Mask                 (((uint32_t)0x0F) << 4)
#define FSMC_BTR3_ADDHLD                      FSMC_BTR3_ADDHLD_Mask
#define FSMC_BTR3_ADDHLD_0                    (((uint32_t)0x1 << FSMC_BTR3_ADDHLD_Pos))
#define FSMC_BTR3_ADDHLD_1                    (((uint32_t)0x2 << FSMC_BTR3_ADDHLD_Pos))
#define FSMC_BTR3_ADDHLD_2                    (((uint32_t)0x4 << FSMC_BTR3_ADDHLD_Pos))
#define FSMC_BTR3_ADDHLD_3                    (((uint32_t)0x8 << FSMC_BTR3_ADDHLD_Pos))
#define FSMC_BTR3_ADDSET_Pos                  ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BTR3_ADDSET_Mask                 (((uint32_t)0x0F) << 0)
#define FSMC_BTR3_ADDSET                      FSMC_BTR3_ADDSET_Mask
#define FSMC_BTR3_ADDSET_0                    (((uint32_t)0x1))
#define FSMC_BTR3_ADDSET_1                    (((uint32_t)0x2))
#define FSMC_BTR3_ADDSET_2                    (((uint32_t)0x4))
#define FSMC_BTR3_ADDSET_3                    (((uint32_t)0x8))

/************************************* FSMC->BTR4  **************************************/
#define FSMC_BTR4_ACCMOD_Pos                  ((uint32_t)28)                    /* Access mode */
#define FSMC_BTR4_ACCMOD_Mask                 (((uint32_t)0x03) << 28)
#define FSMC_BTR4_ACCMOD                      FSMC_BTR4_ACCMOD_Mask
#define FSMC_BTR4_ACCMOD_0                    (((uint32_t)0x1 << FSMC_BTR4_ACCMOD_Pos))
#define FSMC_BTR4_ACCMOD_1                    (((uint32_t)0x2 << FSMC_BTR4_ACCMOD_Pos))
#define FSMC_BTR4_DATLAT_Pos                  ((uint32_t)24)                    /* Data latency for synchronous NOR Flash memory */
#define FSMC_BTR4_DATLAT_Mask                 (((uint32_t)0x0F) << 24)
#define FSMC_BTR4_DATLAT                      FSMC_BTR4_DATLAT_Mask
#define FSMC_BTR4_DATLAT_0                    (((uint32_t)0x1 << FSMC_BTR4_DATLAT_Pos))
#define FSMC_BTR4_DATLAT_1                    (((uint32_t)0x2 << FSMC_BTR4_DATLAT_Pos))
#define FSMC_BTR4_DATLAT_2                    (((uint32_t)0x4 << FSMC_BTR4_DATLAT_Pos))
#define FSMC_BTR4_DATLAT_3                    (((uint32_t)0x8 << FSMC_BTR4_DATLAT_Pos))
#define FSMC_BTR4_CLKDIV_Pos                  ((uint32_t)20)                    /* Clock divide ratio */
#define FSMC_BTR4_CLKDIV_Mask                 (((uint32_t)0x0F) << 20)
#define FSMC_BTR4_CLKDIV                      FSMC_BTR4_CLKDIV_Mask
#define FSMC_BTR4_CLKDIV_0                    (((uint32_t)0x1 << FSMC_BTR4_CLKDIV_Pos))
#define FSMC_BTR4_CLKDIV_1                    (((uint32_t)0x2 << FSMC_BTR4_CLKDIV_Pos))
#define FSMC_BTR4_CLKDIV_2                    (((uint32_t)0x4 << FSMC_BTR4_CLKDIV_Pos))
#define FSMC_BTR4_CLKDIV_3                    (((uint32_t)0x8 << FSMC_BTR4_CLKDIV_Pos))
#define FSMC_BTR4_BUSTURN_Pos                 ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BTR4_BUSTURN_Mask                (((uint32_t)0x0F) << 16)
#define FSMC_BTR4_BUSTURN                     FSMC_BTR4_BUSTURN_Mask
#define FSMC_BTR4_BUSTURN_0                   (((uint32_t)0x1 << FSMC_BTR4_BUSTURN_Pos))
#define FSMC_BTR4_BUSTURN_1                   (((uint32_t)0x2 << FSMC_BTR4_BUSTURN_Pos))
#define FSMC_BTR4_BUSTURN_2                   (((uint32_t)0x4 << FSMC_BTR4_BUSTURN_Pos))
#define FSMC_BTR4_BUSTURN_3                   (((uint32_t)0x8 << FSMC_BTR4_BUSTURN_Pos))
#define FSMC_BTR4_DATAST_Pos                  ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BTR4_DATAST_Mask                 (((uint32_t)0xFF) << 8)
#define FSMC_BTR4_DATAST                      FSMC_BTR4_DATAST_Mask
#define FSMC_BTR4_DATAST_0                    (((uint32_t)0x1 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_1                    (((uint32_t)0x2 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_2                    (((uint32_t)0x4 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_3                    (((uint32_t)0x8 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_4                    (((uint32_t)0x10 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_5                    (((uint32_t)0x20 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_6                    (((uint32_t)0x40 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_DATAST_7                    (((uint32_t)0x80 << FSMC_BTR4_DATAST_Pos))
#define FSMC_BTR4_ADDHLD_Pos                  ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BTR4_ADDHLD_Mask                 (((uint32_t)0x0F) << 4)
#define FSMC_BTR4_ADDHLD                      FSMC_BTR4_ADDHLD_Mask
#define FSMC_BTR4_ADDHLD_0                    (((uint32_t)0x1 << FSMC_BTR4_ADDHLD_Pos))
#define FSMC_BTR4_ADDHLD_1                    (((uint32_t)0x2 << FSMC_BTR4_ADDHLD_Pos))
#define FSMC_BTR4_ADDHLD_2                    (((uint32_t)0x4 << FSMC_BTR4_ADDHLD_Pos))
#define FSMC_BTR4_ADDHLD_3                    (((uint32_t)0x8 << FSMC_BTR4_ADDHLD_Pos))
#define FSMC_BTR4_ADDSET_Pos                  ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BTR4_ADDSET_Mask                 (((uint32_t)0x0F) << 0)
#define FSMC_BTR4_ADDSET                      FSMC_BTR4_ADDSET_Mask
#define FSMC_BTR4_ADDSET_0                    (((uint32_t)0x1))
#define FSMC_BTR4_ADDSET_1                    (((uint32_t)0x2))
#define FSMC_BTR4_ADDSET_2                    (((uint32_t)0x4))
#define FSMC_BTR4_ADDSET_3                    (((uint32_t)0x8))

/************************************ FSMC->BWTR1  **************************************/
#define FSMC_BWTR1_ACCMOD_Pos                 ((uint32_t)28)                    /* Access mode */
#define FSMC_BWTR1_ACCMOD_Mask                (((uint32_t)0x03) << 28)
#define FSMC_BWTR1_ACCMOD                     FSMC_BWTR1_ACCMOD_Mask
#define FSMC_BWTR1_ACCMOD_0                   (((uint32_t)0x1 << FSMC_BWTR1_ACCMOD_Pos))
#define FSMC_BWTR1_ACCMOD_1                   (((uint32_t)0x2 << FSMC_BWTR1_ACCMOD_Pos))
#define FSMC_BWTR1_BUSTURN_Pos                ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BWTR1_BUSTURN_Mask               (((uint32_t)0x0F) << 16)
#define FSMC_BWTR1_BUSTURN                    FSMC_BWTR1_BUSTURN_Mask
#define FSMC_BWTR1_BUSTURN_0                  (((uint32_t)0x1 << FSMC_BWTR1_BUSTURN_Pos))
#define FSMC_BWTR1_BUSTURN_1                  (((uint32_t)0x2 << FSMC_BWTR1_BUSTURN_Pos))
#define FSMC_BWTR1_BUSTURN_2                  (((uint32_t)0x4 << FSMC_BWTR1_BUSTURN_Pos))
#define FSMC_BWTR1_BUSTURN_3                  (((uint32_t)0x8 << FSMC_BWTR1_BUSTURN_Pos))
#define FSMC_BWTR1_DATAST_Pos                 ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BWTR1_DATAST_Mask                (((uint32_t)0xFF) << 8)
#define FSMC_BWTR1_DATAST                     FSMC_BWTR1_DATAST_Mask
#define FSMC_BWTR1_DATAST_0                   (((uint32_t)0x1 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_1                   (((uint32_t)0x2 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_2                   (((uint32_t)0x4 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_3                   (((uint32_t)0x8 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_4                   (((uint32_t)0x10 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_5                   (((uint32_t)0x20 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_6                   (((uint32_t)0x40 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_DATAST_7                   (((uint32_t)0x80 << FSMC_BWTR1_DATAST_Pos))
#define FSMC_BWTR1_ADDHLD_Pos                 ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BWTR1_ADDHLD_Mask                (((uint32_t)0x0F) << 4)
#define FSMC_BWTR1_ADDHLD                     FSMC_BWTR1_ADDHLD_Mask
#define FSMC_BWTR1_ADDHLD_0                   (((uint32_t)0x1 << FSMC_BWTR1_ADDHLD_Pos))
#define FSMC_BWTR1_ADDHLD_1                   (((uint32_t)0x2 << FSMC_BWTR1_ADDHLD_Pos))
#define FSMC_BWTR1_ADDHLD_2                   (((uint32_t)0x4 << FSMC_BWTR1_ADDHLD_Pos))
#define FSMC_BWTR1_ADDHLD_3                   (((uint32_t)0x8 << FSMC_BWTR1_ADDHLD_Pos))
#define FSMC_BWTR1_ADDSET_Pos                 ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BWTR1_ADDSET_Mask                (((uint32_t)0x0F) << 0)
#define FSMC_BWTR1_ADDSET                     FSMC_BWTR1_ADDSET_Mask
#define FSMC_BWTR1_ADDSET_0                   (((uint32_t)0x1))
#define FSMC_BWTR1_ADDSET_1                   (((uint32_t)0x2))
#define FSMC_BWTR1_ADDSET_2                   (((uint32_t)0x4))
#define FSMC_BWTR1_ADDSET_3                   (((uint32_t)0x8))

/************************************ FSMC->BWTR2  **************************************/
#define FSMC_BWTR2_ACCMOD_Pos                 ((uint32_t)28)                    /* Access mode */
#define FSMC_BWTR2_ACCMOD_Mask                (((uint32_t)0x03) << 28)
#define FSMC_BWTR2_ACCMOD                     FSMC_BWTR2_ACCMOD_Mask
#define FSMC_BWTR2_ACCMOD_0                   (((uint32_t)0x1 << FSMC_BWTR2_ACCMOD_Pos))
#define FSMC_BWTR2_ACCMOD_1                   (((uint32_t)0x2 << FSMC_BWTR2_ACCMOD_Pos))
#define FSMC_BWTR2_BUSTURN_Pos                ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BWTR2_BUSTURN_Mask               (((uint32_t)0x0F) << 16)
#define FSMC_BWTR2_BUSTURN                    FSMC_BWTR2_BUSTURN_Mask
#define FSMC_BWTR2_BUSTURN_0                  (((uint32_t)0x1 << FSMC_BWTR2_BUSTURN_Pos))
#define FSMC_BWTR2_BUSTURN_1                  (((uint32_t)0x2 << FSMC_BWTR2_BUSTURN_Pos))
#define FSMC_BWTR2_BUSTURN_2                  (((uint32_t)0x4 << FSMC_BWTR2_BUSTURN_Pos))
#define FSMC_BWTR2_BUSTURN_3                  (((uint32_t)0x8 << FSMC_BWTR2_BUSTURN_Pos))
#define FSMC_BWTR2_DATAST_Pos                 ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BWTR2_DATAST_Mask                (((uint32_t)0xFF) << 8)
#define FSMC_BWTR2_DATAST                     FSMC_BWTR2_DATAST_Mask
#define FSMC_BWTR2_DATAST_0                   (((uint32_t)0x1 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_1                   (((uint32_t)0x2 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_2                   (((uint32_t)0x4 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_3                   (((uint32_t)0x8 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_4                   (((uint32_t)0x10 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_5                   (((uint32_t)0x20 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_6                   (((uint32_t)0x40 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_DATAST_7                   (((uint32_t)0x80 << FSMC_BWTR2_DATAST_Pos))
#define FSMC_BWTR2_ADDHLD_Pos                 ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BWTR2_ADDHLD_Mask                (((uint32_t)0x0F) << 4)
#define FSMC_BWTR2_ADDHLD                     FSMC_BWTR2_ADDHLD_Mask
#define FSMC_BWTR2_ADDHLD_0                   (((uint32_t)0x1 << FSMC_BWTR2_ADDHLD_Pos))
#define FSMC_BWTR2_ADDHLD_1                   (((uint32_t)0x2 << FSMC_BWTR2_ADDHLD_Pos))
#define FSMC_BWTR2_ADDHLD_2                   (((uint32_t)0x4 << FSMC_BWTR2_ADDHLD_Pos))
#define FSMC_BWTR2_ADDHLD_3                   (((uint32_t)0x8 << FSMC_BWTR2_ADDHLD_Pos))
#define FSMC_BWTR2_ADDSET_Pos                 ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BWTR2_ADDSET_Mask                (((uint32_t)0x0F) << 0)
#define FSMC_BWTR2_ADDSET                     FSMC_BWTR2_ADDSET_Mask
#define FSMC_BWTR2_ADDSET_0                   (((uint32_t)0x1))
#define FSMC_BWTR2_ADDSET_1                   (((uint32_t)0x2))
#define FSMC_BWTR2_ADDSET_2                   (((uint32_t)0x4))
#define FSMC_BWTR2_ADDSET_3                   (((uint32_t)0x8))

/************************************ FSMC->BWTR3  **************************************/
#define FSMC_BWTR3_ACCMOD_Pos                 ((uint32_t)28)                    /* Access mode */
#define FSMC_BWTR3_ACCMOD_Mask                (((uint32_t)0x03) << 28)
#define FSMC_BWTR3_ACCMOD                     FSMC_BWTR3_ACCMOD_Mask
#define FSMC_BWTR3_ACCMOD_0                   (((uint32_t)0x1 << FSMC_BWTR3_ACCMOD_Pos))
#define FSMC_BWTR3_ACCMOD_1                   (((uint32_t)0x2 << FSMC_BWTR3_ACCMOD_Pos))
#define FSMC_BWTR3_BUSTURN_Pos                ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BWTR3_BUSTURN_Mask               (((uint32_t)0x0F) << 16)
#define FSMC_BWTR3_BUSTURN                    FSMC_BWTR3_BUSTURN_Mask
#define FSMC_BWTR3_BUSTURN_0                  (((uint32_t)0x1 << FSMC_BWTR3_BUSTURN_Pos))
#define FSMC_BWTR3_BUSTURN_1                  (((uint32_t)0x2 << FSMC_BWTR3_BUSTURN_Pos))
#define FSMC_BWTR3_BUSTURN_2                  (((uint32_t)0x4 << FSMC_BWTR3_BUSTURN_Pos))
#define FSMC_BWTR3_BUSTURN_3                  (((uint32_t)0x8 << FSMC_BWTR3_BUSTURN_Pos))
#define FSMC_BWTR3_DATAST_Pos                 ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BWTR3_DATAST_Mask                (((uint32_t)0xFF) << 8)
#define FSMC_BWTR3_DATAST                     FSMC_BWTR3_DATAST_Mask
#define FSMC_BWTR3_DATAST_0                   (((uint32_t)0x1 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_1                   (((uint32_t)0x2 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_2                   (((uint32_t)0x4 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_3                   (((uint32_t)0x8 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_4                   (((uint32_t)0x10 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_5                   (((uint32_t)0x20 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_6                   (((uint32_t)0x40 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_DATAST_7                   (((uint32_t)0x80 << FSMC_BWTR3_DATAST_Pos))
#define FSMC_BWTR3_ADDHLD_Pos                 ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BWTR3_ADDHLD_Mask                (((uint32_t)0x0F) << 4)
#define FSMC_BWTR3_ADDHLD                     FSMC_BWTR3_ADDHLD_Mask
#define FSMC_BWTR3_ADDHLD_0                   (((uint32_t)0x1 << FSMC_BWTR3_ADDHLD_Pos))
#define FSMC_BWTR3_ADDHLD_1                   (((uint32_t)0x2 << FSMC_BWTR3_ADDHLD_Pos))
#define FSMC_BWTR3_ADDHLD_2                   (((uint32_t)0x4 << FSMC_BWTR3_ADDHLD_Pos))
#define FSMC_BWTR3_ADDHLD_3                   (((uint32_t)0x8 << FSMC_BWTR3_ADDHLD_Pos))
#define FSMC_BWTR3_ADDSET_Pos                 ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BWTR3_ADDSET_Mask                (((uint32_t)0x0F) << 0)
#define FSMC_BWTR3_ADDSET                     FSMC_BWTR3_ADDSET_Mask
#define FSMC_BWTR3_ADDSET_0                   (((uint32_t)0x1))
#define FSMC_BWTR3_ADDSET_1                   (((uint32_t)0x2))
#define FSMC_BWTR3_ADDSET_2                   (((uint32_t)0x4))
#define FSMC_BWTR3_ADDSET_3                   (((uint32_t)0x8))

/************************************ FSMC->BWTR4  **************************************/
#define FSMC_BWTR4_ACCMOD_Pos                 ((uint32_t)28)                    /* Access mode */
#define FSMC_BWTR4_ACCMOD_Mask                (((uint32_t)0x03) << 28)
#define FSMC_BWTR4_ACCMOD                     FSMC_BWTR4_ACCMOD_Mask
#define FSMC_BWTR4_ACCMOD_0                   (((uint32_t)0x1 << FSMC_BWTR4_ACCMOD_Pos))
#define FSMC_BWTR4_ACCMOD_1                   (((uint32_t)0x2 << FSMC_BWTR4_ACCMOD_Pos))
#define FSMC_BWTR4_BUSTURN_Pos                ((uint32_t)16)                    /* Bus turnaround phase duration */
#define FSMC_BWTR4_BUSTURN_Mask               (((uint32_t)0x0F) << 16)
#define FSMC_BWTR4_BUSTURN                    FSMC_BWTR4_BUSTURN_Mask
#define FSMC_BWTR4_BUSTURN_0                  (((uint32_t)0x1 << FSMC_BWTR4_BUSTURN_Pos))
#define FSMC_BWTR4_BUSTURN_1                  (((uint32_t)0x2 << FSMC_BWTR4_BUSTURN_Pos))
#define FSMC_BWTR4_BUSTURN_2                  (((uint32_t)0x4 << FSMC_BWTR4_BUSTURN_Pos))
#define FSMC_BWTR4_BUSTURN_3                  (((uint32_t)0x8 << FSMC_BWTR4_BUSTURN_Pos))
#define FSMC_BWTR4_DATAST_Pos                 ((uint32_t)8)                     /* Data-phase duration */
#define FSMC_BWTR4_DATAST_Mask                (((uint32_t)0xFF) << 8)
#define FSMC_BWTR4_DATAST                     FSMC_BWTR4_DATAST_Mask
#define FSMC_BWTR4_DATAST_0                   (((uint32_t)0x1 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_1                   (((uint32_t)0x2 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_2                   (((uint32_t)0x4 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_3                   (((uint32_t)0x8 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_4                   (((uint32_t)0x10 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_5                   (((uint32_t)0x20 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_6                   (((uint32_t)0x40 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_DATAST_7                   (((uint32_t)0x80 << FSMC_BWTR4_DATAST_Pos))
#define FSMC_BWTR4_ADDHLD_Pos                 ((uint32_t)4)                     /* Address-hold phase duration */
#define FSMC_BWTR4_ADDHLD_Mask                (((uint32_t)0x0F) << 4)
#define FSMC_BWTR4_ADDHLD                     FSMC_BWTR4_ADDHLD_Mask
#define FSMC_BWTR4_ADDHLD_0                   (((uint32_t)0x1 << FSMC_BWTR4_ADDHLD_Pos))
#define FSMC_BWTR4_ADDHLD_1                   (((uint32_t)0x2 << FSMC_BWTR4_ADDHLD_Pos))
#define FSMC_BWTR4_ADDHLD_2                   (((uint32_t)0x4 << FSMC_BWTR4_ADDHLD_Pos))
#define FSMC_BWTR4_ADDHLD_3                   (((uint32_t)0x8 << FSMC_BWTR4_ADDHLD_Pos))
#define FSMC_BWTR4_ADDSET_Pos                 ((uint32_t)0)                     /* Address setup phase duration */
#define FSMC_BWTR4_ADDSET_Mask                (((uint32_t)0x0F) << 0)
#define FSMC_BWTR4_ADDSET                     FSMC_BWTR4_ADDSET_Mask
#define FSMC_BWTR4_ADDSET_0                   (((uint32_t)0x1))
#define FSMC_BWTR4_ADDSET_1                   (((uint32_t)0x2))
#define FSMC_BWTR4_ADDSET_2                   (((uint32_t)0x4))
#define FSMC_BWTR4_ADDSET_3                   (((uint32_t)0x8))

/************************************* FSMC->NADV  **************************************/
#define FSMC_NADV_ADV_POL_Pos                 ((uint32_t)1)                     /* NADV polarity */
#define FSMC_NADV_ADV_POL_Mask                (((uint32_t)0x01) << 1)
#define FSMC_NADV_ADV_POL                     FSMC_NADV_ADV_POL_Mask

/************************************ FSMC->ENCRY  **************************************/
#define FSMC_ENCRY_ENCRYEN_Pos                ((uint32_t)0)                     /* The output data to the memory encryption */
#define FSMC_ENCRY_ENCRYEN_Mask               (((uint32_t)0x01) << 0)
#define FSMC_ENCRY_ENCRYEN                    FSMC_ENCRY_ENCRYEN_Mask

/************************************ FSMC->DECRY  **************************************/
#define FSMC_DECRY_DECRYEN_Pos                ((uint32_t)0)                     /* The output data from the memory decryption */
#define FSMC_DECRY_DECRYEN_Mask               (((uint32_t)0x01) << 0)
#define FSMC_DECRY_DECRYEN                    FSMC_DECRY_DECRYEN_Mask

/************************************* FSMC->PCR2  **************************************/
#define FSMC_PCR2_ECCPS_Pos                   ((uint32_t)17)                    /* ECC page size */
#define FSMC_PCR2_ECCPS_Mask                  (((uint32_t)0x07) << 17)
#define FSMC_PCR2_ECCPS                       FSMC_PCR2_ECCPS_Mask
#define FSMC_PCR2_ECCPS_0                     (((uint32_t)0x1 << FSMC_PCR2_ECCPS_Pos))
#define FSMC_PCR2_ECCPS_1                     (((uint32_t)0x2 << FSMC_PCR2_ECCPS_Pos))
#define FSMC_PCR2_ECCPS_2                     (((uint32_t)0x4 << FSMC_PCR2_ECCPS_Pos))
#define FSMC_PCR2_TAR_Pos                     ((uint32_t)13)                    /* The latency from ALE to RE */
#define FSMC_PCR2_TAR_Mask                    (((uint32_t)0x0F) << 13)
#define FSMC_PCR2_TAR                         FSMC_PCR2_TAR_Mask
#define FSMC_PCR2_TAR_0                       (((uint32_t)0x1 << FSMC_PCR2_TAR_Pos))
#define FSMC_PCR2_TAR_1                       (((uint32_t)0x2 << FSMC_PCR2_TAR_Pos))
#define FSMC_PCR2_TAR_2                       (((uint32_t)0x4 << FSMC_PCR2_TAR_Pos))
#define FSMC_PCR2_TAR_3                       (((uint32_t)0x8 << FSMC_PCR2_TAR_Pos))
#define FSMC_PCR2_TCLR_Pos                    ((uint32_t)9)                     /* The latency from CLE to RE */
#define FSMC_PCR2_TCLR_Mask                   (((uint32_t)0x0F) << 9)
#define FSMC_PCR2_TCLR                        FSMC_PCR2_TCLR_Mask
#define FSMC_PCR2_TCLR_0                      (((uint32_t)0x1 << FSMC_PCR2_TCLR_Pos))
#define FSMC_PCR2_TCLR_1                      (((uint32_t)0x2 << FSMC_PCR2_TCLR_Pos))
#define FSMC_PCR2_TCLR_2                      (((uint32_t)0x4 << FSMC_PCR2_TCLR_Pos))
#define FSMC_PCR2_TCLR_3                      (((uint32_t)0x8 << FSMC_PCR2_TCLR_Pos))
#define FSMC_PCR2_TSEL_Pos                    ((uint32_t)8)                     /* TAR and TCLR function selection */
#define FSMC_PCR2_TSEL_Mask                   (((uint32_t)0x01) << 8)
#define FSMC_PCR2_TSEL                        FSMC_PCR2_TSEL_Mask
#define FSMC_PCR2_ECCEN_Pos                   ((uint32_t)6)                     /* ECC circuit enable bit */
#define FSMC_PCR2_ECCEN_Mask                  (((uint32_t)0x01) << 6)
#define FSMC_PCR2_ECCEN                       FSMC_PCR2_ECCEN_Mask
#define FSMC_PCR2_PWID_Pos                    ((uint32_t)4)                     /* Data bus width */
#define FSMC_PCR2_PWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_PCR2_PWID                        FSMC_PCR2_PWID_Mask
#define FSMC_PCR2_PWID_0                      (((uint32_t)0x1 << FSMC_PCR2_PWID_Pos))
#define FSMC_PCR2_PWID_1                      (((uint32_t)0x2 << FSMC_PCR2_PWID_Pos))
#define FSMC_PCR2_PTYP_Pos                    ((uint32_t)3)                     /* Memory type */
#define FSMC_PCR2_PTYP_Mask                   (((uint32_t)0x01) << 3)
#define FSMC_PCR2_PTYP                        FSMC_PCR2_PTYP_Mask
#define FSMC_PCR2_PBKEN_Pos                   ((uint32_t)2)                     /* PC card/NAND memory bank enable */
#define FSMC_PCR2_PBKEN_Mask                  (((uint32_t)0x01) << 2)
#define FSMC_PCR2_PBKEN                       FSMC_PCR2_PBKEN_Mask
#define FSMC_PCR2_PWAITEN_Pos                 ((uint32_t)1)                     /* Wait function enable */
#define FSMC_PCR2_PWAITEN_Mask                (((uint32_t)0x01) << 1)
#define FSMC_PCR2_PWAITEN                     FSMC_PCR2_PWAITEN_Mask

/************************************* FSMC->PCR3  **************************************/
#define FSMC_PCR3_ECCPS_Pos                   ((uint32_t)17)                    /* ECC page size */
#define FSMC_PCR3_ECCPS_Mask                  (((uint32_t)0x07) << 17)
#define FSMC_PCR3_ECCPS                       FSMC_PCR3_ECCPS_Mask
#define FSMC_PCR3_ECCPS_0                     (((uint32_t)0x1 << FSMC_PCR3_ECCPS_Pos))
#define FSMC_PCR3_ECCPS_1                     (((uint32_t)0x2 << FSMC_PCR3_ECCPS_Pos))
#define FSMC_PCR3_ECCPS_2                     (((uint32_t)0x4 << FSMC_PCR3_ECCPS_Pos))
#define FSMC_PCR3_TAR_Pos                     ((uint32_t)13)                    /* The latency from ALE to RE */
#define FSMC_PCR3_TAR_Mask                    (((uint32_t)0x0F) << 13)
#define FSMC_PCR3_TAR                         FSMC_PCR3_TAR_Mask
#define FSMC_PCR3_TAR_0                       (((uint32_t)0x1 << FSMC_PCR3_TAR_Pos))
#define FSMC_PCR3_TAR_1                       (((uint32_t)0x2 << FSMC_PCR3_TAR_Pos))
#define FSMC_PCR3_TAR_2                       (((uint32_t)0x4 << FSMC_PCR3_TAR_Pos))
#define FSMC_PCR3_TAR_3                       (((uint32_t)0x8 << FSMC_PCR3_TAR_Pos))
#define FSMC_PCR3_TCLR_Pos                    ((uint32_t)9)                     /* The latency from CLE to RE */
#define FSMC_PCR3_TCLR_Mask                   (((uint32_t)0x0F) << 9)
#define FSMC_PCR3_TCLR                        FSMC_PCR3_TCLR_Mask
#define FSMC_PCR3_TCLR_0                      (((uint32_t)0x1 << FSMC_PCR3_TCLR_Pos))
#define FSMC_PCR3_TCLR_1                      (((uint32_t)0x2 << FSMC_PCR3_TCLR_Pos))
#define FSMC_PCR3_TCLR_2                      (((uint32_t)0x4 << FSMC_PCR3_TCLR_Pos))
#define FSMC_PCR3_TCLR_3                      (((uint32_t)0x8 << FSMC_PCR3_TCLR_Pos))
#define FSMC_PCR3_TSEL_Pos                    ((uint32_t)8)                     /* TAR and TCLR function selection */
#define FSMC_PCR3_TSEL_Mask                   (((uint32_t)0x01) << 8)
#define FSMC_PCR3_TSEL                        FSMC_PCR3_TSEL_Mask
#define FSMC_PCR3_ECCEN_Pos                   ((uint32_t)6)                     /* ECC circuit enable bit */
#define FSMC_PCR3_ECCEN_Mask                  (((uint32_t)0x01) << 6)
#define FSMC_PCR3_ECCEN                       FSMC_PCR3_ECCEN_Mask
#define FSMC_PCR3_PWID_Pos                    ((uint32_t)4)                     /* Data bus width */
#define FSMC_PCR3_PWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_PCR3_PWID                        FSMC_PCR3_PWID_Mask
#define FSMC_PCR3_PWID_0                      (((uint32_t)0x1 << FSMC_PCR3_PWID_Pos))
#define FSMC_PCR3_PWID_1                      (((uint32_t)0x2 << FSMC_PCR3_PWID_Pos))
#define FSMC_PCR3_PTYP_Pos                    ((uint32_t)3)                     /* Memory type */
#define FSMC_PCR3_PTYP_Mask                   (((uint32_t)0x01) << 3)
#define FSMC_PCR3_PTYP                        FSMC_PCR3_PTYP_Mask
#define FSMC_PCR3_PBKEN_Pos                   ((uint32_t)2)                     /* PC card/NAND memory bank enable */
#define FSMC_PCR3_PBKEN_Mask                  (((uint32_t)0x01) << 2)
#define FSMC_PCR3_PBKEN                       FSMC_PCR3_PBKEN_Mask
#define FSMC_PCR3_PWAITEN_Pos                 ((uint32_t)1)                     /* Wait function enable */
#define FSMC_PCR3_PWAITEN_Mask                (((uint32_t)0x01) << 1)
#define FSMC_PCR3_PWAITEN                     FSMC_PCR3_PWAITEN_Mask

/************************************* FSMC->PCR4  **************************************/
#define FSMC_PCR4_ECCPS_Pos                   ((uint32_t)17)                    /* ECC page size */
#define FSMC_PCR4_ECCPS_Mask                  (((uint32_t)0x07) << 17)
#define FSMC_PCR4_ECCPS                       FSMC_PCR4_ECCPS_Mask
#define FSMC_PCR4_ECCPS_0                     (((uint32_t)0x1 << FSMC_PCR4_ECCPS_Pos))
#define FSMC_PCR4_ECCPS_1                     (((uint32_t)0x2 << FSMC_PCR4_ECCPS_Pos))
#define FSMC_PCR4_ECCPS_2                     (((uint32_t)0x4 << FSMC_PCR4_ECCPS_Pos))
#define FSMC_PCR4_TAR_Pos                     ((uint32_t)13)                    /* The latency from ALE to RE */
#define FSMC_PCR4_TAR_Mask                    (((uint32_t)0x0F) << 13)
#define FSMC_PCR4_TAR                         FSMC_PCR4_TAR_Mask
#define FSMC_PCR4_TAR_0                       (((uint32_t)0x1 << FSMC_PCR4_TAR_Pos))
#define FSMC_PCR4_TAR_1                       (((uint32_t)0x2 << FSMC_PCR4_TAR_Pos))
#define FSMC_PCR4_TAR_2                       (((uint32_t)0x4 << FSMC_PCR4_TAR_Pos))
#define FSMC_PCR4_TAR_3                       (((uint32_t)0x8 << FSMC_PCR4_TAR_Pos))
#define FSMC_PCR4_TCLR_Pos                    ((uint32_t)9)                     /* The latency from CLE to RE */
#define FSMC_PCR4_TCLR_Mask                   (((uint32_t)0x0F) << 9)
#define FSMC_PCR4_TCLR                        FSMC_PCR4_TCLR_Mask
#define FSMC_PCR4_TCLR_0                      (((uint32_t)0x1 << FSMC_PCR4_TCLR_Pos))
#define FSMC_PCR4_TCLR_1                      (((uint32_t)0x2 << FSMC_PCR4_TCLR_Pos))
#define FSMC_PCR4_TCLR_2                      (((uint32_t)0x4 << FSMC_PCR4_TCLR_Pos))
#define FSMC_PCR4_TCLR_3                      (((uint32_t)0x8 << FSMC_PCR4_TCLR_Pos))
#define FSMC_PCR4_TSEL_Pos                    ((uint32_t)8)                     /* TAR and TCLR function selection */
#define FSMC_PCR4_TSEL_Mask                   (((uint32_t)0x01) << 8)
#define FSMC_PCR4_TSEL                        FSMC_PCR4_TSEL_Mask
#define FSMC_PCR4_ECCEN_Pos                   ((uint32_t)6)                     /* ECC circuit enable bit */
#define FSMC_PCR4_ECCEN_Mask                  (((uint32_t)0x01) << 6)
#define FSMC_PCR4_ECCEN                       FSMC_PCR4_ECCEN_Mask
#define FSMC_PCR4_PWID_Pos                    ((uint32_t)4)                     /* Data bus width */
#define FSMC_PCR4_PWID_Mask                   (((uint32_t)0x03) << 4)
#define FSMC_PCR4_PWID                        FSMC_PCR4_PWID_Mask
#define FSMC_PCR4_PWID_0                      (((uint32_t)0x1 << FSMC_PCR4_PWID_Pos))
#define FSMC_PCR4_PWID_1                      (((uint32_t)0x2 << FSMC_PCR4_PWID_Pos))
#define FSMC_PCR4_PTYP_Pos                    ((uint32_t)3)                     /* Memory type */
#define FSMC_PCR4_PTYP_Mask                   (((uint32_t)0x01) << 3)
#define FSMC_PCR4_PTYP                        FSMC_PCR4_PTYP_Mask
#define FSMC_PCR4_PBKEN_Pos                   ((uint32_t)2)                     /* PC card/NAND memory bank enable */
#define FSMC_PCR4_PBKEN_Mask                  (((uint32_t)0x01) << 2)
#define FSMC_PCR4_PBKEN                       FSMC_PCR4_PBKEN_Mask
#define FSMC_PCR4_PWAITEN_Pos                 ((uint32_t)1)                     /* Wait function enable */
#define FSMC_PCR4_PWAITEN_Mask                (((uint32_t)0x01) << 1)
#define FSMC_PCR4_PWAITEN                     FSMC_PCR4_PWAITEN_Mask

/************************************* FSMC->SR2  ***************************************/
#define FSMC_SR2_FEMPT_Pos                    ((uint32_t)6)                     /* FIFO empty flag */
#define FSMC_SR2_FEMPT_Mask                   (((uint32_t)0x01) << 6)
#define FSMC_SR2_FEMPT                        FSMC_SR2_FEMPT_Mask
#define FSMC_SR2_IFEN_Pos                     ((uint32_t)5)                     /* Interrupt falling edge detection enable */
#define FSMC_SR2_IFEN_Mask                    (((uint32_t)0x01) << 5)
#define FSMC_SR2_IFEN                         FSMC_SR2_IFEN_Mask
#define FSMC_SR2_ILEN_Pos                     ((uint32_t)4)                     /* Interrupt detection with high level enable */
#define FSMC_SR2_ILEN_Mask                    (((uint32_t)0x01) << 4)
#define FSMC_SR2_ILEN                         FSMC_SR2_ILEN_Mask
#define FSMC_SR2_IREN_Pos                     ((uint32_t)3)                     /* Interrupt rising edge detection enable */
#define FSMC_SR2_IREN_Mask                    (((uint32_t)0x01) << 3)
#define FSMC_SR2_IREN                         FSMC_SR2_IREN_Mask
#define FSMC_SR2_IFS_Pos                      ((uint32_t)2)                     /* State of a falling edge of interrupt */
#define FSMC_SR2_IFS_Mask                     (((uint32_t)0x01) << 2)
#define FSMC_SR2_IFS                          FSMC_SR2_IFS_Mask
#define FSMC_SR2_ILS_Pos                      ((uint32_t)1)                     /* State of a high level of interrupt */
#define FSMC_SR2_ILS_Mask                     (((uint32_t)0x01) << 1)
#define FSMC_SR2_ILS                          FSMC_SR2_ILS_Mask
#define FSMC_SR2_IRS_Pos                      ((uint32_t)0)                     /* State of a rising edge of interrupt */
#define FSMC_SR2_IRS_Mask                     (((uint32_t)0x01) << 0)
#define FSMC_SR2_IRS                          FSMC_SR2_IRS_Mask

/************************************* FSMC->SR3  ***************************************/
#define FSMC_SR3_FEMPT_Pos                    ((uint32_t)6)                     /* FIFO empty flag */
#define FSMC_SR3_FEMPT_Mask                   (((uint32_t)0x01) << 6)
#define FSMC_SR3_FEMPT                        FSMC_SR3_FEMPT_Mask
#define FSMC_SR3_IFEN_Pos                     ((uint32_t)5)                     /* Interrupt falling edge detection enable */
#define FSMC_SR3_IFEN_Mask                    (((uint32_t)0x01) << 5)
#define FSMC_SR3_IFEN                         FSMC_SR3_IFEN_Mask
#define FSMC_SR3_ILEN_Pos                     ((uint32_t)4)                     /* Interrupt detection with high level enable */
#define FSMC_SR3_ILEN_Mask                    (((uint32_t)0x01) << 4)
#define FSMC_SR3_ILEN                         FSMC_SR3_ILEN_Mask
#define FSMC_SR3_IREN_Pos                     ((uint32_t)3)                     /* Interrupt rising edge detection enable */
#define FSMC_SR3_IREN_Mask                    (((uint32_t)0x01) << 3)
#define FSMC_SR3_IREN                         FSMC_SR3_IREN_Mask
#define FSMC_SR3_IFS_Pos                      ((uint32_t)2)                     /* State of a falling edge of interrupt */
#define FSMC_SR3_IFS_Mask                     (((uint32_t)0x01) << 2)
#define FSMC_SR3_IFS                          FSMC_SR3_IFS_Mask
#define FSMC_SR3_ILS_Pos                      ((uint32_t)1)                     /* State of a high level of interrupt */
#define FSMC_SR3_ILS_Mask                     (((uint32_t)0x01) << 1)
#define FSMC_SR3_ILS                          FSMC_SR3_ILS_Mask
#define FSMC_SR3_IRS_Pos                      ((uint32_t)0)                     /* State of a rising edge of interrupt */
#define FSMC_SR3_IRS_Mask                     (((uint32_t)0x01) << 0)
#define FSMC_SR3_IRS                          FSMC_SR3_IRS_Mask

/************************************* FSMC->SR4  ***************************************/
#define FSMC_SR4_FEMPT_Pos                    ((uint32_t)6)                     /* FIFO empty flag */
#define FSMC_SR4_FEMPT_Mask                   (((uint32_t)0x01) << 6)
#define FSMC_SR4_FEMPT                        FSMC_SR4_FEMPT_Mask
#define FSMC_SR4_IFEN_Pos                     ((uint32_t)5)                     /* Interrupt falling edge detection enable */
#define FSMC_SR4_IFEN_Mask                    (((uint32_t)0x01) << 5)
#define FSMC_SR4_IFEN                         FSMC_SR4_IFEN_Mask
#define FSMC_SR4_ILEN_Pos                     ((uint32_t)4)                     /* Interrupt detection with high level enable */
#define FSMC_SR4_ILEN_Mask                    (((uint32_t)0x01) << 4)
#define FSMC_SR4_ILEN                         FSMC_SR4_ILEN_Mask
#define FSMC_SR4_IREN_Pos                     ((uint32_t)3)                     /* Interrupt rising edge detection enable */
#define FSMC_SR4_IREN_Mask                    (((uint32_t)0x01) << 3)
#define FSMC_SR4_IREN                         FSMC_SR4_IREN_Mask
#define FSMC_SR4_IFS_Pos                      ((uint32_t)2)                     /* State of a falling edge of interrupt */
#define FSMC_SR4_IFS_Mask                     (((uint32_t)0x01) << 2)
#define FSMC_SR4_IFS                          FSMC_SR4_IFS_Mask
#define FSMC_SR4_ILS_Pos                      ((uint32_t)1)                     /* State of a high level of interrupt */
#define FSMC_SR4_ILS_Mask                     (((uint32_t)0x01) << 1)
#define FSMC_SR4_ILS                          FSMC_SR4_ILS_Mask
#define FSMC_SR4_IRS_Pos                      ((uint32_t)0)                     /* State of a rising edge of interrupt */
#define FSMC_SR4_IRS_Mask                     (((uint32_t)0x01) << 0)
#define FSMC_SR4_IRS                          FSMC_SR4_IRS_Mask

/************************************ FSMC->PMEM2  **************************************/
#define FSMC_PMEM2_MEMHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in general memory */
#define FSMC_PMEM2_MEMHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PMEM2_MEMHIZx                    FSMC_PMEM2_MEMHIZx_Mask
#define FSMC_PMEM2_MEMHIZx_0                  (((uint32_t)0x1 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_1                  (((uint32_t)0x2 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_2                  (((uint32_t)0x4 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_3                  (((uint32_t)0x8 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_4                  (((uint32_t)0x10 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_5                  (((uint32_t)0x20 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_6                  (((uint32_t)0x40 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHIZx_7                  (((uint32_t)0x80 << FSMC_PMEM2_MEMHIZx_Pos))
#define FSMC_PMEM2_MEMHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in general memory */
#define FSMC_PMEM2_MEMHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PMEM2_MEMHOLDx                   FSMC_PMEM2_MEMHOLDx_Mask
#define FSMC_PMEM2_MEMHOLDx_0                 (((uint32_t)0x1 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_1                 (((uint32_t)0x2 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_2                 (((uint32_t)0x4 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_3                 (((uint32_t)0x8 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_4                 (((uint32_t)0x10 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_5                 (((uint32_t)0x20 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_6                 (((uint32_t)0x40 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMHOLDx_7                 (((uint32_t)0x80 << FSMC_PMEM2_MEMHOLDx_Pos))
#define FSMC_PMEM2_MEMWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in general memory */
#define FSMC_PMEM2_MEMWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PMEM2_MEMWAITx                   FSMC_PMEM2_MEMWAITx_Mask
#define FSMC_PMEM2_MEMWAITx_0                 (((uint32_t)0x1 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_1                 (((uint32_t)0x2 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_2                 (((uint32_t)0x4 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_3                 (((uint32_t)0x8 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_4                 (((uint32_t)0x10 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_5                 (((uint32_t)0x20 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_6                 (((uint32_t)0x40 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMWAITx_7                 (((uint32_t)0x80 << FSMC_PMEM2_MEMWAITx_Pos))
#define FSMC_PMEM2_MEMSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in general memory */
#define FSMC_PMEM2_MEMSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PMEM2_MEMSETx                    FSMC_PMEM2_MEMSETx_Mask
#define FSMC_PMEM2_MEMSETx_0                  (((uint32_t)0x1))
#define FSMC_PMEM2_MEMSETx_1                  (((uint32_t)0x2))
#define FSMC_PMEM2_MEMSETx_2                  (((uint32_t)0x4))
#define FSMC_PMEM2_MEMSETx_3                  (((uint32_t)0x8))
#define FSMC_PMEM2_MEMSETx_4                  (((uint32_t)0x10))
#define FSMC_PMEM2_MEMSETx_5                  (((uint32_t)0x20))
#define FSMC_PMEM2_MEMSETx_6                  (((uint32_t)0x40))
#define FSMC_PMEM2_MEMSETx_7                  (((uint32_t)0x80))

/************************************ FSMC->PMEM3  **************************************/
#define FSMC_PMEM3_MEMHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in general memory */
#define FSMC_PMEM3_MEMHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PMEM3_MEMHIZx                    FSMC_PMEM3_MEMHIZx_Mask
#define FSMC_PMEM3_MEMHIZx_0                  (((uint32_t)0x1 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_1                  (((uint32_t)0x2 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_2                  (((uint32_t)0x4 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_3                  (((uint32_t)0x8 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_4                  (((uint32_t)0x10 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_5                  (((uint32_t)0x20 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_6                  (((uint32_t)0x40 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHIZx_7                  (((uint32_t)0x80 << FSMC_PMEM3_MEMHIZx_Pos))
#define FSMC_PMEM3_MEMHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in general memory */
#define FSMC_PMEM3_MEMHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PMEM3_MEMHOLDx                   FSMC_PMEM3_MEMHOLDx_Mask
#define FSMC_PMEM3_MEMHOLDx_0                 (((uint32_t)0x1 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_1                 (((uint32_t)0x2 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_2                 (((uint32_t)0x4 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_3                 (((uint32_t)0x8 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_4                 (((uint32_t)0x10 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_5                 (((uint32_t)0x20 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_6                 (((uint32_t)0x40 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMHOLDx_7                 (((uint32_t)0x80 << FSMC_PMEM3_MEMHOLDx_Pos))
#define FSMC_PMEM3_MEMWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in general memory */
#define FSMC_PMEM3_MEMWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PMEM3_MEMWAITx                   FSMC_PMEM3_MEMWAITx_Mask
#define FSMC_PMEM3_MEMWAITx_0                 (((uint32_t)0x1 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_1                 (((uint32_t)0x2 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_2                 (((uint32_t)0x4 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_3                 (((uint32_t)0x8 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_4                 (((uint32_t)0x10 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_5                 (((uint32_t)0x20 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_6                 (((uint32_t)0x40 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMWAITx_7                 (((uint32_t)0x80 << FSMC_PMEM3_MEMWAITx_Pos))
#define FSMC_PMEM3_MEMSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in general memory */
#define FSMC_PMEM3_MEMSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PMEM3_MEMSETx                    FSMC_PMEM3_MEMSETx_Mask
#define FSMC_PMEM3_MEMSETx_0                  (((uint32_t)0x1))
#define FSMC_PMEM3_MEMSETx_1                  (((uint32_t)0x2))
#define FSMC_PMEM3_MEMSETx_2                  (((uint32_t)0x4))
#define FSMC_PMEM3_MEMSETx_3                  (((uint32_t)0x8))
#define FSMC_PMEM3_MEMSETx_4                  (((uint32_t)0x10))
#define FSMC_PMEM3_MEMSETx_5                  (((uint32_t)0x20))
#define FSMC_PMEM3_MEMSETx_6                  (((uint32_t)0x40))
#define FSMC_PMEM3_MEMSETx_7                  (((uint32_t)0x80))

/************************************ FSMC->PMEM4  **************************************/
#define FSMC_PMEM4_MEMHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in general memory */
#define FSMC_PMEM4_MEMHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PMEM4_MEMHIZx                    FSMC_PMEM4_MEMHIZx_Mask
#define FSMC_PMEM4_MEMHIZx_0                  (((uint32_t)0x1 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_1                  (((uint32_t)0x2 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_2                  (((uint32_t)0x4 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_3                  (((uint32_t)0x8 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_4                  (((uint32_t)0x10 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_5                  (((uint32_t)0x20 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_6                  (((uint32_t)0x40 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHIZx_7                  (((uint32_t)0x80 << FSMC_PMEM4_MEMHIZx_Pos))
#define FSMC_PMEM4_MEMHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in general memory */
#define FSMC_PMEM4_MEMHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PMEM4_MEMHOLDx                   FSMC_PMEM4_MEMHOLDx_Mask
#define FSMC_PMEM4_MEMHOLDx_0                 (((uint32_t)0x1 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_1                 (((uint32_t)0x2 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_2                 (((uint32_t)0x4 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_3                 (((uint32_t)0x8 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_4                 (((uint32_t)0x10 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_5                 (((uint32_t)0x20 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_6                 (((uint32_t)0x40 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMHOLDx_7                 (((uint32_t)0x80 << FSMC_PMEM4_MEMHOLDx_Pos))
#define FSMC_PMEM4_MEMWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in general memory */
#define FSMC_PMEM4_MEMWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PMEM4_MEMWAITx                   FSMC_PMEM4_MEMWAITx_Mask
#define FSMC_PMEM4_MEMWAITx_0                 (((uint32_t)0x1 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_1                 (((uint32_t)0x2 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_2                 (((uint32_t)0x4 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_3                 (((uint32_t)0x8 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_4                 (((uint32_t)0x10 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_5                 (((uint32_t)0x20 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_6                 (((uint32_t)0x40 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMWAITx_7                 (((uint32_t)0x80 << FSMC_PMEM4_MEMWAITx_Pos))
#define FSMC_PMEM4_MEMSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in general memory */
#define FSMC_PMEM4_MEMSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PMEM4_MEMSETx                    FSMC_PMEM4_MEMSETx_Mask
#define FSMC_PMEM4_MEMSETx_0                  (((uint32_t)0x1))
#define FSMC_PMEM4_MEMSETx_1                  (((uint32_t)0x2))
#define FSMC_PMEM4_MEMSETx_2                  (((uint32_t)0x4))
#define FSMC_PMEM4_MEMSETx_3                  (((uint32_t)0x8))
#define FSMC_PMEM4_MEMSETx_4                  (((uint32_t)0x10))
#define FSMC_PMEM4_MEMSETx_5                  (((uint32_t)0x20))
#define FSMC_PMEM4_MEMSETx_6                  (((uint32_t)0x40))
#define FSMC_PMEM4_MEMSETx_7                  (((uint32_t)0x80))

/************************************ FSMC->PATT2  **************************************/
#define FSMC_PATT2_ATTHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in attribute memory */
#define FSMC_PATT2_ATTHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PATT2_ATTHIZx                    FSMC_PATT2_ATTHIZx_Mask
#define FSMC_PATT2_ATTHIZx_0                  (((uint32_t)0x1 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_1                  (((uint32_t)0x2 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_2                  (((uint32_t)0x4 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_3                  (((uint32_t)0x8 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_4                  (((uint32_t)0x10 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_5                  (((uint32_t)0x20 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_6                  (((uint32_t)0x40 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHIZx_7                  (((uint32_t)0x80 << FSMC_PATT2_ATTHIZx_Pos))
#define FSMC_PATT2_ATTHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in attribute memory */
#define FSMC_PATT2_ATTHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PATT2_ATTHOLDx                   FSMC_PATT2_ATTHOLDx_Mask
#define FSMC_PATT2_ATTHOLDx_0                 (((uint32_t)0x1 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_1                 (((uint32_t)0x2 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_2                 (((uint32_t)0x4 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_3                 (((uint32_t)0x8 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_4                 (((uint32_t)0x10 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_5                 (((uint32_t)0x20 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_6                 (((uint32_t)0x40 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTHOLDx_7                 (((uint32_t)0x80 << FSMC_PATT2_ATTHOLDx_Pos))
#define FSMC_PATT2_ATTWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in attribute memory */
#define FSMC_PATT2_ATTWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PATT2_ATTWAITx                   FSMC_PATT2_ATTWAITx_Mask
#define FSMC_PATT2_ATTWAITx_0                 (((uint32_t)0x1 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_1                 (((uint32_t)0x2 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_2                 (((uint32_t)0x4 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_3                 (((uint32_t)0x8 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_4                 (((uint32_t)0x10 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_5                 (((uint32_t)0x20 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_6                 (((uint32_t)0x40 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTWAITx_7                 (((uint32_t)0x80 << FSMC_PATT2_ATTWAITx_Pos))
#define FSMC_PATT2_ATTSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in attribute memory */
#define FSMC_PATT2_ATTSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PATT2_ATTSETx                    FSMC_PATT2_ATTSETx_Mask
#define FSMC_PATT2_ATTSETx_0                  (((uint32_t)0x1))
#define FSMC_PATT2_ATTSETx_1                  (((uint32_t)0x2))
#define FSMC_PATT2_ATTSETx_2                  (((uint32_t)0x4))
#define FSMC_PATT2_ATTSETx_3                  (((uint32_t)0x8))
#define FSMC_PATT2_ATTSETx_4                  (((uint32_t)0x10))
#define FSMC_PATT2_ATTSETx_5                  (((uint32_t)0x20))
#define FSMC_PATT2_ATTSETx_6                  (((uint32_t)0x40))
#define FSMC_PATT2_ATTSETx_7                  (((uint32_t)0x80))

/************************************ FSMC->PATT3  **************************************/
#define FSMC_PATT3_ATTHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in attribute memory */
#define FSMC_PATT3_ATTHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PATT3_ATTHIZx                    FSMC_PATT3_ATTHIZx_Mask
#define FSMC_PATT3_ATTHIZx_0                  (((uint32_t)0x1 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_1                  (((uint32_t)0x2 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_2                  (((uint32_t)0x4 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_3                  (((uint32_t)0x8 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_4                  (((uint32_t)0x10 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_5                  (((uint32_t)0x20 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_6                  (((uint32_t)0x40 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHIZx_7                  (((uint32_t)0x80 << FSMC_PATT3_ATTHIZx_Pos))
#define FSMC_PATT3_ATTHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in attribute memory */
#define FSMC_PATT3_ATTHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PATT3_ATTHOLDx                   FSMC_PATT3_ATTHOLDx_Mask
#define FSMC_PATT3_ATTHOLDx_0                 (((uint32_t)0x1 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_1                 (((uint32_t)0x2 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_2                 (((uint32_t)0x4 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_3                 (((uint32_t)0x8 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_4                 (((uint32_t)0x10 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_5                 (((uint32_t)0x20 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_6                 (((uint32_t)0x40 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTHOLDx_7                 (((uint32_t)0x80 << FSMC_PATT3_ATTHOLDx_Pos))
#define FSMC_PATT3_ATTWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in attribute memory */
#define FSMC_PATT3_ATTWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PATT3_ATTWAITx                   FSMC_PATT3_ATTWAITx_Mask
#define FSMC_PATT3_ATTWAITx_0                 (((uint32_t)0x1 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_1                 (((uint32_t)0x2 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_2                 (((uint32_t)0x4 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_3                 (((uint32_t)0x8 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_4                 (((uint32_t)0x10 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_5                 (((uint32_t)0x20 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_6                 (((uint32_t)0x40 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTWAITx_7                 (((uint32_t)0x80 << FSMC_PATT3_ATTWAITx_Pos))
#define FSMC_PATT3_ATTSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in attribute memory */
#define FSMC_PATT3_ATTSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PATT3_ATTSETx                    FSMC_PATT3_ATTSETx_Mask
#define FSMC_PATT3_ATTSETx_0                  (((uint32_t)0x1))
#define FSMC_PATT3_ATTSETx_1                  (((uint32_t)0x2))
#define FSMC_PATT3_ATTSETx_2                  (((uint32_t)0x4))
#define FSMC_PATT3_ATTSETx_3                  (((uint32_t)0x8))
#define FSMC_PATT3_ATTSETx_4                  (((uint32_t)0x10))
#define FSMC_PATT3_ATTSETx_5                  (((uint32_t)0x20))
#define FSMC_PATT3_ATTSETx_6                  (((uint32_t)0x40))
#define FSMC_PATT3_ATTSETx_7                  (((uint32_t)0x80))

/************************************ FSMC->PATT4  **************************************/
#define FSMC_PATT4_ATTHIZx_Pos                ((uint32_t)24)                    /* Hi-Z time of the x data bus in attribute memory */
#define FSMC_PATT4_ATTHIZx_Mask               (((uint32_t)0xFF) << 24)
#define FSMC_PATT4_ATTHIZx                    FSMC_PATT4_ATTHIZx_Mask
#define FSMC_PATT4_ATTHIZx_0                  (((uint32_t)0x1 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_1                  (((uint32_t)0x2 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_2                  (((uint32_t)0x4 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_3                  (((uint32_t)0x8 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_4                  (((uint32_t)0x10 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_5                  (((uint32_t)0x20 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_6                  (((uint32_t)0x40 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHIZx_7                  (((uint32_t)0x80 << FSMC_PATT4_ATTHIZx_Pos))
#define FSMC_PATT4_ATTHOLDx_Pos               ((uint32_t)16)                    /* Hold time of the x data bus in attribute memory */
#define FSMC_PATT4_ATTHOLDx_Mask              (((uint32_t)0xFF) << 16)
#define FSMC_PATT4_ATTHOLDx                   FSMC_PATT4_ATTHOLDx_Mask
#define FSMC_PATT4_ATTHOLDx_0                 (((uint32_t)0x1 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_1                 (((uint32_t)0x2 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_2                 (((uint32_t)0x4 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_3                 (((uint32_t)0x8 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_4                 (((uint32_t)0x10 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_5                 (((uint32_t)0x20 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_6                 (((uint32_t)0x40 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTHOLDx_7                 (((uint32_t)0x80 << FSMC_PATT4_ATTHOLDx_Pos))
#define FSMC_PATT4_ATTWAITx_Pos               ((uint32_t)8)                     /* Wait time of the x data bus in attribute memory */
#define FSMC_PATT4_ATTWAITx_Mask              (((uint32_t)0xFF) << 8)
#define FSMC_PATT4_ATTWAITx                   FSMC_PATT4_ATTWAITx_Mask
#define FSMC_PATT4_ATTWAITx_0                 (((uint32_t)0x1 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_1                 (((uint32_t)0x2 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_2                 (((uint32_t)0x4 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_3                 (((uint32_t)0x8 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_4                 (((uint32_t)0x10 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_5                 (((uint32_t)0x20 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_6                 (((uint32_t)0x40 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTWAITx_7                 (((uint32_t)0x80 << FSMC_PATT4_ATTWAITx_Pos))
#define FSMC_PATT4_ATTSETx_Pos                ((uint32_t)0)                     /* Setup time of the x data bus in attribute memory */
#define FSMC_PATT4_ATTSETx_Mask               (((uint32_t)0xFF) << 0)
#define FSMC_PATT4_ATTSETx                    FSMC_PATT4_ATTSETx_Mask
#define FSMC_PATT4_ATTSETx_0                  (((uint32_t)0x1))
#define FSMC_PATT4_ATTSETx_1                  (((uint32_t)0x2))
#define FSMC_PATT4_ATTSETx_2                  (((uint32_t)0x4))
#define FSMC_PATT4_ATTSETx_3                  (((uint32_t)0x8))
#define FSMC_PATT4_ATTSETx_4                  (((uint32_t)0x10))
#define FSMC_PATT4_ATTSETx_5                  (((uint32_t)0x20))
#define FSMC_PATT4_ATTSETx_6                  (((uint32_t)0x40))
#define FSMC_PATT4_ATTSETx_7                  (((uint32_t)0x80))

/************************************* FSMC->PIO4  **************************************/
#define FSMC_PIO4_IOHIZx_Pos                  ((uint32_t)24)                    /* Hi-Z time of the x data bus in I/O space */
#define FSMC_PIO4_IOHIZx_Mask                 (((uint32_t)0xFF) << 24)
#define FSMC_PIO4_IOHIZx                      FSMC_PIO4_IOHIZx_Mask
#define FSMC_PIO4_IOHIZx_0                    (((uint32_t)0x1 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_1                    (((uint32_t)0x2 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_2                    (((uint32_t)0x4 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_3                    (((uint32_t)0x8 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_4                    (((uint32_t)0x10 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_5                    (((uint32_t)0x20 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_6                    (((uint32_t)0x40 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHIZx_7                    (((uint32_t)0x80 << FSMC_PIO4_IOHIZx_Pos))
#define FSMC_PIO4_IOHOLDx_Pos                 ((uint32_t)16)                    /* Hold time of the x data bus in I/O space */
#define FSMC_PIO4_IOHOLDx_Mask                (((uint32_t)0xFF) << 16)
#define FSMC_PIO4_IOHOLDx                     FSMC_PIO4_IOHOLDx_Mask
#define FSMC_PIO4_IOHOLDx_0                   (((uint32_t)0x1 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_1                   (((uint32_t)0x2 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_2                   (((uint32_t)0x4 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_3                   (((uint32_t)0x8 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_4                   (((uint32_t)0x10 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_5                   (((uint32_t)0x20 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_6                   (((uint32_t)0x40 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOHOLDx_7                   (((uint32_t)0x80 << FSMC_PIO4_IOHOLDx_Pos))
#define FSMC_PIO4_IOWAITx_Pos                 ((uint32_t)8)                     /* Wait time of the x data bus in I/O space */
#define FSMC_PIO4_IOWAITx_Mask                (((uint32_t)0xFF) << 8)
#define FSMC_PIO4_IOWAITx                     FSMC_PIO4_IOWAITx_Mask
#define FSMC_PIO4_IOWAITx_0                   (((uint32_t)0x1 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_1                   (((uint32_t)0x2 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_2                   (((uint32_t)0x4 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_3                   (((uint32_t)0x8 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_4                   (((uint32_t)0x10 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_5                   (((uint32_t)0x20 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_6                   (((uint32_t)0x40 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOWAITx_7                   (((uint32_t)0x80 << FSMC_PIO4_IOWAITx_Pos))
#define FSMC_PIO4_IOSETx_Pos                  ((uint32_t)0)                     /* Setup time of the x data bus in I/O space */
#define FSMC_PIO4_IOSETx_Mask                 (((uint32_t)0xFF) << 0)
#define FSMC_PIO4_IOSETx                      FSMC_PIO4_IOSETx_Mask
#define FSMC_PIO4_IOSETx_0                    (((uint32_t)0x1))
#define FSMC_PIO4_IOSETx_1                    (((uint32_t)0x2))
#define FSMC_PIO4_IOSETx_2                    (((uint32_t)0x4))
#define FSMC_PIO4_IOSETx_3                    (((uint32_t)0x8))
#define FSMC_PIO4_IOSETx_4                    (((uint32_t)0x10))
#define FSMC_PIO4_IOSETx_5                    (((uint32_t)0x20))
#define FSMC_PIO4_IOSETx_6                    (((uint32_t)0x40))
#define FSMC_PIO4_IOSETx_7                    (((uint32_t)0x80))

/************************************ FSMC->ECCR2  **************************************/
#define FSMC_ECCR2_ECCx_Pos                   ((uint32_t)0)                     /* ECC result */
#define FSMC_ECCR2_ECCx_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define FSMC_ECCR2_ECCx                       FSMC_ECCR2_ECCx_Mask

/************************************ FSMC->ECCR3  **************************************/
#define FSMC_ECCR3_ECCx_Pos                   ((uint32_t)0)                     /* ECC result */
#define FSMC_ECCR3_ECCx_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define FSMC_ECCR3_ECCx                       FSMC_ECCR3_ECCx_Mask

/*****************************************************************************************
*                                     Peripheral TIM                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t SMCR;                   /* SMCR */
  __IO uint32_t DIER;                   /* DIER */
  __IO uint32_t SR;                     /* SR */
  __O  uint32_t EGR;                    /* EGR */
  union{
    __IO uint32_t CCMR1_Output;         /* CCMR1_Output */
    __IO uint32_t CCMR1_Input;          /* CCMR1_Input */
  };
  union{
    __IO uint32_t CCMR2_Output;         /* CCMR2_Output */
    __IO uint32_t CCMR2_Input;          /* CCMR2_Input */
  };
  __IO uint32_t CCER;                   /* CCER */
  __IO uint32_t CNT;                    /* CNT */
  __IO uint32_t PSC;                    /* PSC */
  __IO uint32_t ARR;                    /* ARR */
  __IO uint32_t RCR;                    /* RCR */
  __IO uint32_t CCR1;                   /* CCR1 */
  __IO uint32_t CCR2;                   /* CCR2 */
  __IO uint32_t CCR3;                   /* CCR3 */
  __IO uint32_t CCR4;                   /* CCR4 */
  __IO uint32_t BDTR;                   /* BDTR */
  __IO uint32_t DCR;                    /* DCR */
  __IO uint32_t DMAR;                   /* DMAR */
}TIM_TypeDef;

/************************************** TIM->CR1  ***************************************/
#define TIM_CR1_CKD_Pos                       ((uint32_t)8)                     /* Clock division factor */
#define TIM_CR1_CKD_Mask                      (((uint32_t)0x03) << 8)
#define TIM_CR1_CKD                           TIM_CR1_CKD_Mask
#define TIM_CR1_CKD_0                         (((uint32_t)0x1 << TIM_CR1_CKD_Pos))
#define TIM_CR1_CKD_1                         (((uint32_t)0x2 << TIM_CR1_CKD_Pos))
#define TIM_CR1_ARPE_Pos                      ((uint32_t)7)                     /* Auto-reload preload enable */
#define TIM_CR1_ARPE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR1_ARPE                          TIM_CR1_ARPE_Mask
#define TIM_CR1_CMS_Pos                       ((uint32_t)5)                     /* Center-aligned mode selection */
#define TIM_CR1_CMS_Mask                      (((uint32_t)0x03) << 5)
#define TIM_CR1_CMS                           TIM_CR1_CMS_Mask
#define TIM_CR1_CMS_0                         (((uint32_t)0x1 << TIM_CR1_CMS_Pos))
#define TIM_CR1_CMS_1                         (((uint32_t)0x2 << TIM_CR1_CMS_Pos))
#define TIM_CR1_DIR_Pos                       ((uint32_t)4)                     /* Direction */
#define TIM_CR1_DIR_Mask                      (((uint32_t)0x01) << 4)
#define TIM_CR1_DIR                           TIM_CR1_DIR_Mask
#define TIM_CR1_OPM_Pos                       ((uint32_t)3)                     /* One pulse mode */
#define TIM_CR1_OPM_Mask                      (((uint32_t)0x01) << 3)
#define TIM_CR1_OPM                           TIM_CR1_OPM_Mask
#define TIM_CR1_URS_Pos                       ((uint32_t)2)                     /* Update request source */
#define TIM_CR1_URS_Mask                      (((uint32_t)0x01) << 2)
#define TIM_CR1_URS                           TIM_CR1_URS_Mask
#define TIM_CR1_UDIS_Pos                      ((uint32_t)1)                     /* Update disable */
#define TIM_CR1_UDIS_Mask                     (((uint32_t)0x01) << 1)
#define TIM_CR1_UDIS                          TIM_CR1_UDIS_Mask
#define TIM_CR1_CEN_Pos                       ((uint32_t)0)                     /* Counter enable */
#define TIM_CR1_CEN_Mask                      (((uint32_t)0x01) << 0)
#define TIM_CR1_CEN                           TIM_CR1_CEN_Mask

/************************************** TIM->CR2  ***************************************/
#define TIM_CR2_OIS4_Pos                      ((uint32_t)14)                    /* OC4 output idle state */
#define TIM_CR2_OIS4_Mask                     (((uint32_t)0x01) << 14)
#define TIM_CR2_OIS4                          TIM_CR2_OIS4_Mask
#define TIM_CR2_OIS3N_Pos                     ((uint32_t)13)                    /* OC3N output idle state */
#define TIM_CR2_OIS3N_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CR2_OIS3N                         TIM_CR2_OIS3N_Mask
#define TIM_CR2_OIS3_Pos                      ((uint32_t)12)                    /* OC3 Output Idle state */
#define TIM_CR2_OIS3_Mask                     (((uint32_t)0x01) << 12)
#define TIM_CR2_OIS3                          TIM_CR2_OIS3_Mask
#define TIM_CR2_OIS2N_Pos                     ((uint32_t)11)                    /* OC2N output idle state */
#define TIM_CR2_OIS2N_Mask                    (((uint32_t)0x01) << 11)
#define TIM_CR2_OIS2N                         TIM_CR2_OIS2N_Mask
#define TIM_CR2_OIS2_Pos                      ((uint32_t)10)                    /* OC2 output idle state */
#define TIM_CR2_OIS2_Mask                     (((uint32_t)0x01) << 10)
#define TIM_CR2_OIS2                          TIM_CR2_OIS2_Mask
#define TIM_CR2_OIS1N_Pos                     ((uint32_t)9)                     /* OC1N output idle state */
#define TIM_CR2_OIS1N_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CR2_OIS1N                         TIM_CR2_OIS1N_Mask
#define TIM_CR2_OIS1_Pos                      ((uint32_t)8)                     /* OC1 output idle state  */
#define TIM_CR2_OIS1_Mask                     (((uint32_t)0x01) << 8)
#define TIM_CR2_OIS1                          TIM_CR2_OIS1_Mask
#define TIM_CR2_TI1S_Pos                      ((uint32_t)7)                     /* TI1 selection */
#define TIM_CR2_TI1S_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR2_TI1S                          TIM_CR2_TI1S_Mask
#define TIM_CR2_MMS_Pos                       ((uint32_t)4)                     /* Master mode selection */
#define TIM_CR2_MMS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_CR2_MMS                           TIM_CR2_MMS_Mask
#define TIM_CR2_MMS_0                         (((uint32_t)0x1 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_1                         (((uint32_t)0x2 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_2                         (((uint32_t)0x4 << TIM_CR2_MMS_Pos))
#define TIM_CR2_CCDS_Pos                      ((uint32_t)3)                     /* Capture/Compare DMA selection */
#define TIM_CR2_CCDS_Mask                     (((uint32_t)0x01) << 3)
#define TIM_CR2_CCDS                          TIM_CR2_CCDS_Mask
#define TIM_CR2_CCUS_Pos                      ((uint32_t)2)                     /* Capture/Compare control update selection */
#define TIM_CR2_CCUS_Mask                     (((uint32_t)0x01) << 2)
#define TIM_CR2_CCUS                          TIM_CR2_CCUS_Mask
#define TIM_CR2_CCPC_Pos                      ((uint32_t)0)                     /* Capture/Compare preloaded control */
#define TIM_CR2_CCPC_Mask                     (((uint32_t)0x01) << 0)
#define TIM_CR2_CCPC                          TIM_CR2_CCPC_Mask

/************************************* TIM->SMCR  ***************************************/
#define TIM_SMCR_ETP_Pos                      ((uint32_t)15)                    /* External trigger polarity */
#define TIM_SMCR_ETP_Mask                     (((uint32_t)0x01) << 15)
#define TIM_SMCR_ETP                          TIM_SMCR_ETP_Mask
#define TIM_SMCR_ECE_Pos                      ((uint32_t)14)                    /* External clock enable */
#define TIM_SMCR_ECE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_SMCR_ECE                          TIM_SMCR_ECE_Mask
#define TIM_SMCR_ETPS_Pos                     ((uint32_t)12)                    /* External trigger prescaler */
#define TIM_SMCR_ETPS_Mask                    (((uint32_t)0x03) << 12)
#define TIM_SMCR_ETPS                         TIM_SMCR_ETPS_Mask
#define TIM_SMCR_ETPS_0                       (((uint32_t)0x1 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETPS_1                       (((uint32_t)0x2 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETF_Pos                      ((uint32_t)8)                     /* External trigger filter */
#define TIM_SMCR_ETF_Mask                     (((uint32_t)0x0F) << 8)
#define TIM_SMCR_ETF                          TIM_SMCR_ETF_Mask
#define TIM_SMCR_ETF_0                        (((uint32_t)0x1 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_1                        (((uint32_t)0x2 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_2                        (((uint32_t)0x4 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_3                        (((uint32_t)0x8 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_MSM_Pos                      ((uint32_t)7)                     /* Master/slave mode */
#define TIM_SMCR_MSM_Mask                     (((uint32_t)0x01) << 7)
#define TIM_SMCR_MSM                          TIM_SMCR_MSM_Mask
#define TIM_SMCR_TS_Pos                       ((uint32_t)4)                     /* Trigger selection */
#define TIM_SMCR_TS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_SMCR_TS                           TIM_SMCR_TS_Mask
#define TIM_SMCR_TS_0                         (((uint32_t)0x1 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_1                         (((uint32_t)0x2 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_2                         (((uint32_t)0x4 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_SMS_Pos                      ((uint32_t)0)                     /* Slave mode selection */
#define TIM_SMCR_SMS_Mask                     (((uint32_t)0x07) << 0)
#define TIM_SMCR_SMS                          TIM_SMCR_SMS_Mask
#define TIM_SMCR_SMS_0                        (((uint32_t)0x1))
#define TIM_SMCR_SMS_1                        (((uint32_t)0x2))
#define TIM_SMCR_SMS_2                        (((uint32_t)0x4))

/************************************* TIM->DIER  ***************************************/
#define TIM_DIER_TDE_Pos                      ((uint32_t)14)                    /* Trigger DMA request enable */
#define TIM_DIER_TDE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_DIER_TDE                          TIM_DIER_TDE_Mask
#define TIM_DIER_COMDE_Pos                    ((uint32_t)13)                    /* COM DMA request enable */
#define TIM_DIER_COMDE_Mask                   (((uint32_t)0x01) << 13)
#define TIM_DIER_COMDE                        TIM_DIER_COMDE_Mask
#define TIM_DIER_CC4DE_Pos                    ((uint32_t)12)                    /* Capture/Compare 4 DMA request enable */
#define TIM_DIER_CC4DE_Mask                   (((uint32_t)0x01) << 12)
#define TIM_DIER_CC4DE                        TIM_DIER_CC4DE_Mask
#define TIM_DIER_CC3DE_Pos                    ((uint32_t)11)                    /* Capture/Compare 3 DMA request enable */
#define TIM_DIER_CC3DE_Mask                   (((uint32_t)0x01) << 11)
#define TIM_DIER_CC3DE                        TIM_DIER_CC3DE_Mask
#define TIM_DIER_CC2DE_Pos                    ((uint32_t)10)                    /* Capture/Compare 2 DMA request enable */
#define TIM_DIER_CC2DE_Mask                   (((uint32_t)0x01) << 10)
#define TIM_DIER_CC2DE                        TIM_DIER_CC2DE_Mask
#define TIM_DIER_CC1DE_Pos                    ((uint32_t)9)                     /* Capture/Compare 1 DMA request enable */
#define TIM_DIER_CC1DE_Mask                   (((uint32_t)0x01) << 9)
#define TIM_DIER_CC1DE                        TIM_DIER_CC1DE_Mask
#define TIM_DIER_UDE_Pos                      ((uint32_t)8)                     /* Update DMA request enable */
#define TIM_DIER_UDE_Mask                     (((uint32_t)0x01) << 8)
#define TIM_DIER_UDE                          TIM_DIER_UDE_Mask
#define TIM_DIER_BIE_Pos                      ((uint32_t)7)                     /* Break interrupt enable */
#define TIM_DIER_BIE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_DIER_BIE                          TIM_DIER_BIE_Mask
#define TIM_DIER_TIE_Pos                      ((uint32_t)6)                     /* Trigger interrupt enable */
#define TIM_DIER_TIE_Mask                     (((uint32_t)0x01) << 6)
#define TIM_DIER_TIE                          TIM_DIER_TIE_Mask
#define TIM_DIER_COMIE_Pos                    ((uint32_t)5)                     /* COM interrupt enable */
#define TIM_DIER_COMIE_Mask                   (((uint32_t)0x01) << 5)
#define TIM_DIER_COMIE                        TIM_DIER_COMIE_Mask
#define TIM_DIER_CC4IE_Pos                    ((uint32_t)4)                     /* Capture/Compare 4 interrupt enable */
#define TIM_DIER_CC4IE_Mask                   (((uint32_t)0x01) << 4)
#define TIM_DIER_CC4IE                        TIM_DIER_CC4IE_Mask
#define TIM_DIER_CC3IE_Pos                    ((uint32_t)3)                     /* Capture/Compare 3 interrupt enable */
#define TIM_DIER_CC3IE_Mask                   (((uint32_t)0x01) << 3)
#define TIM_DIER_CC3IE                        TIM_DIER_CC3IE_Mask
#define TIM_DIER_CC2IE_Pos                    ((uint32_t)2)                     /* Capture/Compare 2 interrupt enable */
#define TIM_DIER_CC2IE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_DIER_CC2IE                        TIM_DIER_CC2IE_Mask
#define TIM_DIER_CC1IE_Pos                    ((uint32_t)1)                     /* Capture/Compare 1 interrupt enable */
#define TIM_DIER_CC1IE_Mask                   (((uint32_t)0x01) << 1)
#define TIM_DIER_CC1IE                        TIM_DIER_CC1IE_Mask
#define TIM_DIER_UIE_Pos                      ((uint32_t)0)                     /* Update interrupt enable */
#define TIM_DIER_UIE_Mask                     (((uint32_t)0x01) << 0)
#define TIM_DIER_UIE                          TIM_DIER_UIE_Mask

/************************************** TIM->SR  ****************************************/
#define TIM_SR_CC4OF_Pos                      ((uint32_t)12)                    /* Capture/Compare 4 overcapture flag */
#define TIM_SR_CC4OF_Mask                     (((uint32_t)0x01) << 12)
#define TIM_SR_CC4OF                          TIM_SR_CC4OF_Mask
#define TIM_SR_CC3OF_Pos                      ((uint32_t)11)                    /* Capture/Compare 3 overcapture flag */
#define TIM_SR_CC3OF_Mask                     (((uint32_t)0x01) << 11)
#define TIM_SR_CC3OF                          TIM_SR_CC3OF_Mask
#define TIM_SR_CC2OF_Pos                      ((uint32_t)10)                    /* Capture/Compare 2 overcapture flag */
#define TIM_SR_CC2OF_Mask                     (((uint32_t)0x01) << 10)
#define TIM_SR_CC2OF                          TIM_SR_CC2OF_Mask
#define TIM_SR_CC1OF_Pos                      ((uint32_t)9)                     /* Capture/Compare 1 overcapture flag */
#define TIM_SR_CC1OF_Mask                     (((uint32_t)0x01) << 9)
#define TIM_SR_CC1OF                          TIM_SR_CC1OF_Mask
#define TIM_SR_BIF_Pos                        ((uint32_t)7)                     /* Break interrupt flag */
#define TIM_SR_BIF_Mask                       (((uint32_t)0x01) << 7)
#define TIM_SR_BIF                            TIM_SR_BIF_Mask
#define TIM_SR_TIF_Pos                        ((uint32_t)6)                     /* Trigger interrupt flag */
#define TIM_SR_TIF_Mask                       (((uint32_t)0x01) << 6)
#define TIM_SR_TIF                            TIM_SR_TIF_Mask
#define TIM_SR_COMIF_Pos                      ((uint32_t)5)                     /* COM interrupt flag */
#define TIM_SR_COMIF_Mask                     (((uint32_t)0x01) << 5)
#define TIM_SR_COMIF                          TIM_SR_COMIF_Mask
#define TIM_SR_CC4IF_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 interrupt flag */
#define TIM_SR_CC4IF_Mask                     (((uint32_t)0x01) << 4)
#define TIM_SR_CC4IF                          TIM_SR_CC4IF_Mask
#define TIM_SR_CC3IF_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 interrupt flag */
#define TIM_SR_CC3IF_Mask                     (((uint32_t)0x01) << 3)
#define TIM_SR_CC3IF                          TIM_SR_CC3IF_Mask
#define TIM_SR_CC2IF_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 interrupt flag */
#define TIM_SR_CC2IF_Mask                     (((uint32_t)0x01) << 2)
#define TIM_SR_CC2IF                          TIM_SR_CC2IF_Mask
#define TIM_SR_CC1IF_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 interrupt flag */
#define TIM_SR_CC1IF_Mask                     (((uint32_t)0x01) << 1)
#define TIM_SR_CC1IF                          TIM_SR_CC1IF_Mask
#define TIM_SR_UIF_Pos                        ((uint32_t)0)                     /* Update interrupt flag */
#define TIM_SR_UIF_Mask                       (((uint32_t)0x01) << 0)
#define TIM_SR_UIF                            TIM_SR_UIF_Mask

/************************************** TIM->EGR  ***************************************/
#define TIM_EGR_BG_Pos                        ((uint32_t)7)                     /* Break generation */
#define TIM_EGR_BG_Mask                       (((uint32_t)0x01) << 7)
#define TIM_EGR_BG                            TIM_EGR_BG_Mask
#define TIM_EGR_TG_Pos                        ((uint32_t)6)                     /* Trigger generation */
#define TIM_EGR_TG_Mask                       (((uint32_t)0x01) << 6)
#define TIM_EGR_TG                            TIM_EGR_TG_Mask
#define TIM_EGR_COMG_Pos                      ((uint32_t)5)                     /* Capture/Compare control update generation */
#define TIM_EGR_COMG_Mask                     (((uint32_t)0x01) << 5)
#define TIM_EGR_COMG                          TIM_EGR_COMG_Mask
#define TIM_EGR_CC4G_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 generation */
#define TIM_EGR_CC4G_Mask                     (((uint32_t)0x01) << 4)
#define TIM_EGR_CC4G                          TIM_EGR_CC4G_Mask
#define TIM_EGR_CC3G_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 generation */
#define TIM_EGR_CC3G_Mask                     (((uint32_t)0x01) << 3)
#define TIM_EGR_CC3G                          TIM_EGR_CC3G_Mask
#define TIM_EGR_CC2G_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 generation */
#define TIM_EGR_CC2G_Mask                     (((uint32_t)0x01) << 2)
#define TIM_EGR_CC2G                          TIM_EGR_CC2G_Mask
#define TIM_EGR_CC1G_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 generation */
#define TIM_EGR_CC1G_Mask                     (((uint32_t)0x01) << 1)
#define TIM_EGR_CC1G                          TIM_EGR_CC1G_Mask
#define TIM_EGR_UG_Pos                        ((uint32_t)0)                     /* Update generation */
#define TIM_EGR_UG_Mask                       (((uint32_t)0x01) << 0)
#define TIM_EGR_UG                            TIM_EGR_UG_Mask

/********************************* TIM->CCMR1_Output  ***********************************/
#define TIM_CCMR1_Output_OC2CE_Pos            ((uint32_t)15)                    /* Output Compare 2 clear enable */
#define TIM_CCMR1_Output_OC2CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR1_Output_OC2CE                TIM_CCMR1_Output_OC2CE_Mask
#define TIM_CCMR1_Output_OC2M_Pos             ((uint32_t)12)                    /* Output Compare 2 mode */
#define TIM_CCMR1_Output_OC2M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR1_Output_OC2M                 TIM_CCMR1_Output_OC2M_Mask
#define TIM_CCMR1_Output_OC2M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2PE_Pos            ((uint32_t)11)                    /* Output Compare 2 preload enable */
#define TIM_CCMR1_Output_OC2PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR1_Output_OC2PE                TIM_CCMR1_Output_OC2PE_Mask
#define TIM_CCMR1_Output_OC2FE_Pos            ((uint32_t)10)                    /* Output Compare 2 fast enable */
#define TIM_CCMR1_Output_OC2FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR1_Output_OC2FE                TIM_CCMR1_Output_OC2FE_Mask
#define TIM_CCMR1_Output_CC2S_Pos             ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Output_CC2S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Output_CC2S                 TIM_CCMR1_Output_CC2S_Mask
#define TIM_CCMR1_Output_CC2S_0               (((uint32_t)0x1 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_CC2S_1               (((uint32_t)0x2 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_OC1CE_Pos            ((uint32_t)7)                     /* Output Compare 1 clear enable */
#define TIM_CCMR1_Output_OC1CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR1_Output_OC1CE                TIM_CCMR1_Output_OC1CE_Mask
#define TIM_CCMR1_Output_OC1M_Pos             ((uint32_t)4)                     /* Output Compare 1 mode */
#define TIM_CCMR1_Output_OC1M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR1_Output_OC1M                 TIM_CCMR1_Output_OC1M_Mask
#define TIM_CCMR1_Output_OC1M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1PE_Pos            ((uint32_t)3)                     /* Output Compare 1 preload enable */
#define TIM_CCMR1_Output_OC1PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR1_Output_OC1PE                TIM_CCMR1_Output_OC1PE_Mask
#define TIM_CCMR1_Output_OC1FE_Pos            ((uint32_t)2)                     /* Output Compare 1 fast enable */
#define TIM_CCMR1_Output_OC1FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR1_Output_OC1FE                TIM_CCMR1_Output_OC1FE_Mask
#define TIM_CCMR1_Output_CC1S_Pos             ((uint32_t)0)                     /* Capture/Compare 1 selection */
#define TIM_CCMR1_Output_CC1S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Output_CC1S                 TIM_CCMR1_Output_CC1S_Mask
#define TIM_CCMR1_Output_CC1S_0               (((uint32_t)0x1))
#define TIM_CCMR1_Output_CC1S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR1_Input  ***********************************/
#define TIM_CCMR1_Input_IC2F_Pos              ((uint32_t)12)                    /* Input capture 2 filter */
#define TIM_CCMR1_Input_IC2F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR1_Input_IC2F                  TIM_CCMR1_Input_IC2F_Mask
#define TIM_CCMR1_Input_IC2F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2PSC_Pos            ((uint32_t)10)                    /* Input capture 2 prescaler */
#define TIM_CCMR1_Input_IC2PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR1_Input_IC2PSC                TIM_CCMR1_Input_IC2PSC_Mask
#define TIM_CCMR1_Input_IC2PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_IC2PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_CC2S_Pos              ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Input_CC2S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Input_CC2S                  TIM_CCMR1_Input_CC2S_Mask
#define TIM_CCMR1_Input_CC2S_0                (((uint32_t)0x1 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_CC2S_1                (((uint32_t)0x2 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_IC1F_Pos              ((uint32_t)4)                     /* Input capture 1 filter */
#define TIM_CCMR1_Input_IC1F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR1_Input_IC1F                  TIM_CCMR1_Input_IC1F_Mask
#define TIM_CCMR1_Input_IC1F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1PSC_Pos            ((uint32_t)2)                     /* Input capture 1 prescaler */
#define TIM_CCMR1_Input_IC1PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR1_Input_IC1PSC                TIM_CCMR1_Input_IC1PSC_Mask
#define TIM_CCMR1_Input_IC1PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_IC1PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_CC1S_Pos              ((uint32_t)0)                     /* Capture/Compare 1 Selection */
#define TIM_CCMR1_Input_CC1S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Input_CC1S                  TIM_CCMR1_Input_CC1S_Mask
#define TIM_CCMR1_Input_CC1S_0                (((uint32_t)0x1))
#define TIM_CCMR1_Input_CC1S_1                (((uint32_t)0x2))

/********************************* TIM->CCMR2_Output  ***********************************/
#define TIM_CCMR2_Output_OC4CE_Pos            ((uint32_t)15)                    /* Output compare 4 clear enable */
#define TIM_CCMR2_Output_OC4CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR2_Output_OC4CE                TIM_CCMR2_Output_OC4CE_Mask
#define TIM_CCMR2_Output_OC4M_Pos             ((uint32_t)12)                    /* Output compare 4 mode */
#define TIM_CCMR2_Output_OC4M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR2_Output_OC4M                 TIM_CCMR2_Output_OC4M_Mask
#define TIM_CCMR2_Output_OC4M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4PE_Pos            ((uint32_t)11)                    /* Output compare 4 preload enable */
#define TIM_CCMR2_Output_OC4PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR2_Output_OC4PE                TIM_CCMR2_Output_OC4PE_Mask
#define TIM_CCMR2_Output_OC4FE_Pos            ((uint32_t)10)                    /* Output compare 4 fast enable */
#define TIM_CCMR2_Output_OC4FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR2_Output_OC4FE                TIM_CCMR2_Output_OC4FE_Mask
#define TIM_CCMR2_Output_CC4S_Pos             ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Output_CC4S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Output_CC4S                 TIM_CCMR2_Output_CC4S_Mask
#define TIM_CCMR2_Output_CC4S_0               (((uint32_t)0x1 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_CC4S_1               (((uint32_t)0x2 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_OC3CE_Pos            ((uint32_t)7)                     /* Output compare 3 clear enable */
#define TIM_CCMR2_Output_OC3CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR2_Output_OC3CE                TIM_CCMR2_Output_OC3CE_Mask
#define TIM_CCMR2_Output_OC3M_Pos             ((uint32_t)4)                     /* Output compare 3 mode */
#define TIM_CCMR2_Output_OC3M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR2_Output_OC3M                 TIM_CCMR2_Output_OC3M_Mask
#define TIM_CCMR2_Output_OC3M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3PE_Pos            ((uint32_t)3)                     /* Output compare 3 preload enable */
#define TIM_CCMR2_Output_OC3PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR2_Output_OC3PE                TIM_CCMR2_Output_OC3PE_Mask
#define TIM_CCMR2_Output_OC3FE_Pos            ((uint32_t)2)                     /* Output compare 3 fast enable */
#define TIM_CCMR2_Output_OC3FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR2_Output_OC3FE                TIM_CCMR2_Output_OC3FE_Mask
#define TIM_CCMR2_Output_CC3S_Pos             ((uint32_t)0)                     /* Capture/Compare 3 selection */
#define TIM_CCMR2_Output_CC3S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Output_CC3S                 TIM_CCMR2_Output_CC3S_Mask
#define TIM_CCMR2_Output_CC3S_0               (((uint32_t)0x1))
#define TIM_CCMR2_Output_CC3S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR2_Input  ***********************************/
#define TIM_CCMR2_Input_IC4F_Pos              ((uint32_t)12)                    /* Input capture 4 filter */
#define TIM_CCMR2_Input_IC4F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR2_Input_IC4F                  TIM_CCMR2_Input_IC4F_Mask
#define TIM_CCMR2_Input_IC4F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4PSC_Pos            ((uint32_t)10)                    /* Input capture 4 prescaler */
#define TIM_CCMR2_Input_IC4PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR2_Input_IC4PSC                TIM_CCMR2_Input_IC4PSC_Mask
#define TIM_CCMR2_Input_IC4PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_IC4PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_CC4S_Pos              ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Input_CC4S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Input_CC4S                  TIM_CCMR2_Input_CC4S_Mask
#define TIM_CCMR2_Input_CC4S_0                (((uint32_t)0x1 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_CC4S_1                (((uint32_t)0x2 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_IC3F_Pos              ((uint32_t)4)                     /* Input capture 3 filter */
#define TIM_CCMR2_Input_IC3F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR2_Input_IC3F                  TIM_CCMR2_Input_IC3F_Mask
#define TIM_CCMR2_Input_IC3F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3PSC_Pos            ((uint32_t)2)                     /* Input capture 3 prescaler */
#define TIM_CCMR2_Input_IC3PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR2_Input_IC3PSC                TIM_CCMR2_Input_IC3PSC_Mask
#define TIM_CCMR2_Input_IC3PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_IC3PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_CC3S_Pos              ((uint32_t)0)                     /* Capture/Compare 3 selection */
#define TIM_CCMR2_Input_CC3S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Input_CC3S                  TIM_CCMR2_Input_CC3S_Mask
#define TIM_CCMR2_Input_CC3S_0                (((uint32_t)0x1))
#define TIM_CCMR2_Input_CC3S_1                (((uint32_t)0x2))

/************************************* TIM->CCER  ***************************************/
#define TIM_CCER_CC4NP_Pos                    ((uint32_t)15)                    /* Capture/Compare 4 complementary output polarity */
#define TIM_CCER_CC4NP_Mask                   (((uint32_t)0x01) << 15)
#define TIM_CCER_CC4NP                        TIM_CCER_CC4NP_Mask
#define TIM_CCER_CC4P_Pos                     ((uint32_t)13)                    /* Capture/Compare 4 output polarity */
#define TIM_CCER_CC4P_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CCER_CC4P                         TIM_CCER_CC4P_Mask
#define TIM_CCER_CC4E_Pos                     ((uint32_t)12)                    /* Capture/Compare 4 output enable */
#define TIM_CCER_CC4E_Mask                    (((uint32_t)0x01) << 12)
#define TIM_CCER_CC4E                         TIM_CCER_CC4E_Mask
#define TIM_CCER_CC3NP_Pos                    ((uint32_t)11)                    /* Capture/Compare 3 complementary output polarity */
#define TIM_CCER_CC3NP_Mask                   (((uint32_t)0x01) << 11)
#define TIM_CCER_CC3NP                        TIM_CCER_CC3NP_Mask
#define TIM_CCER_CC3NE_Pos                    ((uint32_t)10)                    /* Capture/Compare 3 complementary output enable */
#define TIM_CCER_CC3NE_Mask                   (((uint32_t)0x01) << 10)
#define TIM_CCER_CC3NE                        TIM_CCER_CC3NE_Mask
#define TIM_CCER_CC3P_Pos                     ((uint32_t)9)                     /* Capture/Compare 3 output polarity */
#define TIM_CCER_CC3P_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CCER_CC3P                         TIM_CCER_CC3P_Mask
#define TIM_CCER_CC3E_Pos                     ((uint32_t)8)                     /* Capture/Compare 3 output enable */
#define TIM_CCER_CC3E_Mask                    (((uint32_t)0x01) << 8)
#define TIM_CCER_CC3E                         TIM_CCER_CC3E_Mask
#define TIM_CCER_CC2NP_Pos                    ((uint32_t)7)                     /* Capture/Compare 2 complementary output polarity */
#define TIM_CCER_CC2NP_Mask                   (((uint32_t)0x01) << 7)
#define TIM_CCER_CC2NP                        TIM_CCER_CC2NP_Mask
#define TIM_CCER_CC2NE_Pos                    ((uint32_t)6)                     /* Capture/Compare 2 complementary output enable */
#define TIM_CCER_CC2NE_Mask                   (((uint32_t)0x01) << 6)
#define TIM_CCER_CC2NE                        TIM_CCER_CC2NE_Mask
#define TIM_CCER_CC2P_Pos                     ((uint32_t)5)                     /* Capture/Compare 2 output polarity */
#define TIM_CCER_CC2P_Mask                    (((uint32_t)0x01) << 5)
#define TIM_CCER_CC2P                         TIM_CCER_CC2P_Mask
#define TIM_CCER_CC2E_Pos                     ((uint32_t)4)                     /* Capture/Compare 2 output enable */
#define TIM_CCER_CC2E_Mask                    (((uint32_t)0x01) << 4)
#define TIM_CCER_CC2E                         TIM_CCER_CC2E_Mask
#define TIM_CCER_CC1NP_Pos                    ((uint32_t)3)                     /* Capture/Compare 1 complementary output polarity */
#define TIM_CCER_CC1NP_Mask                   (((uint32_t)0x01) << 3)
#define TIM_CCER_CC1NP                        TIM_CCER_CC1NP_Mask
#define TIM_CCER_CC1NE_Pos                    ((uint32_t)2)                     /* Capture/Compare 1 complementary output enable */
#define TIM_CCER_CC1NE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_CCER_CC1NE                        TIM_CCER_CC1NE_Mask
#define TIM_CCER_CC1P_Pos                     ((uint32_t)1)                     /* Capture/Compare 1 output polarity */
#define TIM_CCER_CC1P_Mask                    (((uint32_t)0x01) << 1)
#define TIM_CCER_CC1P                         TIM_CCER_CC1P_Mask
#define TIM_CCER_CC1E_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 output enable */
#define TIM_CCER_CC1E_Mask                    (((uint32_t)0x01) << 0)
#define TIM_CCER_CC1E                         TIM_CCER_CC1E_Mask

/************************************** TIM->CNT  ***************************************/
#define TIM_CNT_CNT_Pos                       ((uint32_t)0)                     /* Counter value */
#define TIM_CNT_CNT_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_CNT_CNT                           TIM_CNT_CNT_Mask

/************************************** TIM->PSC  ***************************************/
#define TIM_PSC_PSC_Pos                       ((uint32_t)0)                     /* Prescaler value */
#define TIM_PSC_PSC_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_PSC_PSC                           TIM_PSC_PSC_Mask

/************************************** TIM->ARR  ***************************************/
#define TIM_ARR_ARR_Pos                       ((uint32_t)0)                     /* Auto-reload value */
#define TIM_ARR_ARR_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_ARR_ARR                           TIM_ARR_ARR_Mask

/************************************** TIM->RCR  ***************************************/
#define TIM_RCR_REP_Pos                       ((uint32_t)0)                     /* Repetition counter value */
#define TIM_RCR_REP_Mask                      (((uint32_t)0xFF) << 0)
#define TIM_RCR_REP                           TIM_RCR_REP_Mask
#define TIM_RCR_REP_0                         (((uint32_t)0x1))
#define TIM_RCR_REP_1                         (((uint32_t)0x2))
#define TIM_RCR_REP_2                         (((uint32_t)0x4))
#define TIM_RCR_REP_3                         (((uint32_t)0x8))
#define TIM_RCR_REP_4                         (((uint32_t)0x10))
#define TIM_RCR_REP_5                         (((uint32_t)0x20))
#define TIM_RCR_REP_6                         (((uint32_t)0x40))
#define TIM_RCR_REP_7                         (((uint32_t)0x80))

/************************************* TIM->CCR1  ***************************************/
#define TIM_CCR1_CCR1_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 value */
#define TIM_CCR1_CCR1_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR1_CCR1                         TIM_CCR1_CCR1_Mask

/************************************* TIM->CCR2  ***************************************/
#define TIM_CCR2_CCR2_Pos                     ((uint32_t)0)                     /* Capture/Compare 2 value */
#define TIM_CCR2_CCR2_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR2_CCR2                         TIM_CCR2_CCR2_Mask

/************************************* TIM->CCR3  ***************************************/
#define TIM_CCR3_CCR3_Pos                     ((uint32_t)0)                     /* Capture/Compare 3 value */
#define TIM_CCR3_CCR3_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR3_CCR3                         TIM_CCR3_CCR3_Mask

/************************************* TIM->CCR4  ***************************************/
#define TIM_CCR4_CCR4_Pos                     ((uint32_t)0)                     /* Capture/Compare 4 value */
#define TIM_CCR4_CCR4_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR4_CCR4                         TIM_CCR4_CCR4_Mask

/************************************* TIM->BDTR  ***************************************/
#define TIM_BDTR_MOE_Pos                      ((uint32_t)15)                    /* Main output enable */
#define TIM_BDTR_MOE_Mask                     (((uint32_t)0x01) << 15)
#define TIM_BDTR_MOE                          TIM_BDTR_MOE_Mask
#define TIM_BDTR_AOE_Pos                      ((uint32_t)14)                    /* Automatic output enable */
#define TIM_BDTR_AOE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_BDTR_AOE                          TIM_BDTR_AOE_Mask
#define TIM_BDTR_BKP_Pos                      ((uint32_t)13)                    /* Break polarity */
#define TIM_BDTR_BKP_Mask                     (((uint32_t)0x01) << 13)
#define TIM_BDTR_BKP                          TIM_BDTR_BKP_Mask
#define TIM_BDTR_BKE_Pos                      ((uint32_t)12)                    /* Break enable */
#define TIM_BDTR_BKE_Mask                     (((uint32_t)0x01) << 12)
#define TIM_BDTR_BKE                          TIM_BDTR_BKE_Mask
#define TIM_BDTR_OSSR_Pos                     ((uint32_t)11)                    /* Off-state selection for Run mode */
#define TIM_BDTR_OSSR_Mask                    (((uint32_t)0x01) << 11)
#define TIM_BDTR_OSSR                         TIM_BDTR_OSSR_Mask
#define TIM_BDTR_OSSI_Pos                     ((uint32_t)10)                    /* Off-state selection for Idle mode */
#define TIM_BDTR_OSSI_Mask                    (((uint32_t)0x01) << 10)
#define TIM_BDTR_OSSI                         TIM_BDTR_OSSI_Mask
#define TIM_BDTR_LOCK_Pos                     ((uint32_t)8)                     /* Lock configuration */
#define TIM_BDTR_LOCK_Mask                    (((uint32_t)0x03) << 8)
#define TIM_BDTR_LOCK                         TIM_BDTR_LOCK_Mask
#define TIM_BDTR_LOCK_0                       (((uint32_t)0x1 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_LOCK_1                       (((uint32_t)0x2 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_DTG_Pos                      ((uint32_t)0)                     /* Dead-time generator setup */
#define TIM_BDTR_DTG_Mask                     (((uint32_t)0xFF) << 0)
#define TIM_BDTR_DTG                          TIM_BDTR_DTG_Mask
#define TIM_BDTR_DTG_0                        (((uint32_t)0x1))
#define TIM_BDTR_DTG_1                        (((uint32_t)0x2))
#define TIM_BDTR_DTG_2                        (((uint32_t)0x4))
#define TIM_BDTR_DTG_3                        (((uint32_t)0x8))
#define TIM_BDTR_DTG_4                        (((uint32_t)0x10))
#define TIM_BDTR_DTG_5                        (((uint32_t)0x20))
#define TIM_BDTR_DTG_6                        (((uint32_t)0x40))
#define TIM_BDTR_DTG_7                        (((uint32_t)0x80))

/************************************** TIM->DCR  ***************************************/
#define TIM_DCR_DBL_Pos                       ((uint32_t)8)                     /* DMA burst length */
#define TIM_DCR_DBL_Mask                      (((uint32_t)0x1F) << 8)
#define TIM_DCR_DBL                           TIM_DCR_DBL_Mask
#define TIM_DCR_DBL_0                         (((uint32_t)0x1 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_1                         (((uint32_t)0x2 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_2                         (((uint32_t)0x4 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_3                         (((uint32_t)0x8 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_4                         (((uint32_t)0x10 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBA_Pos                       ((uint32_t)0)                     /* DMA base address */
#define TIM_DCR_DBA_Mask                      (((uint32_t)0x1F) << 0)
#define TIM_DCR_DBA                           TIM_DCR_DBA_Mask
#define TIM_DCR_DBA_0                         (((uint32_t)0x1))
#define TIM_DCR_DBA_1                         (((uint32_t)0x2))
#define TIM_DCR_DBA_2                         (((uint32_t)0x4))
#define TIM_DCR_DBA_3                         (((uint32_t)0x8))
#define TIM_DCR_DBA_4                         (((uint32_t)0x10))

/************************************* TIM->DMAR  ***************************************/
#define TIM_DMAR_DMAB_Pos                     ((uint32_t)0)                     /* DMA register for burst accesses */
#define TIM_DMAR_DMAB_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_DMAR_DMAB                         TIM_DMAR_DMAB_Mask

/*****************************************************************************************
*                                     Peripheral RTC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CRH;                    /* CRH */
  __IO uint32_t CRL;                    /* CRL */
  __O  uint32_t PRLH;                   /* PRLH */
  __O  uint32_t PRLL;                   /* PRLL */
  __I  uint32_t DIVH;                   /* DIVH */
  __I  uint32_t DIVL;                   /* DIVL */
  __IO uint32_t CNTH;                   /* CNTH */
  __IO uint32_t CNTL;                   /* CNTL */
  __O  uint32_t ALRH;                   /* ALRH */
  __O  uint32_t ALRL;                   /* ALRL */
       uint16_t RESERVED1[4];
  __IO uint32_t WUT;                    /* WUT */
}RTC_TypeDef;

/************************************** RTC->CRH  ***************************************/
#define RTC_CRH_RSM_MD_Pos                    ((uint32_t)15)                    /* RSM mode in which the reload condition of RTCDIVx can be set */
#define RTC_CRH_RSM_MD_Mask                   (((uint32_t)0x01) << 15)
#define RTC_CRH_RSM_MD                        RTC_CRH_RSM_MD_Mask
#define RTC_CRH_WUTIE_Pos                     ((uint32_t)8)                     /* Wake-up counter interrupt enable */
#define RTC_CRH_WUTIE_Mask                    (((uint32_t)0x01) << 8)
#define RTC_CRH_WUTIE                         RTC_CRH_WUTIE_Mask
#define RTC_CRH_OWIE_Pos                      ((uint32_t)2)                     /* Overflow interrupt enable */
#define RTC_CRH_OWIE_Mask                     (((uint32_t)0x01) << 2)
#define RTC_CRH_OWIE                          RTC_CRH_OWIE_Mask
#define RTC_CRH_ALRIE_Pos                     ((uint32_t)1)                     /* Alarm interrupt enable */
#define RTC_CRH_ALRIE_Mask                    (((uint32_t)0x01) << 1)
#define RTC_CRH_ALRIE                         RTC_CRH_ALRIE_Mask
#define RTC_CRH_SECIE_Pos                     ((uint32_t)0)                     /* Second interrupt enable */
#define RTC_CRH_SECIE_Mask                    (((uint32_t)0x01) << 0)
#define RTC_CRH_SECIE                         RTC_CRH_SECIE_Mask

/************************************** RTC->CRL  ***************************************/
#define RTC_CRL_WUTF_Pos                      ((uint32_t)8)                     /* Wake-up counter interrupt flag */
#define RTC_CRL_WUTF_Mask                     (((uint32_t)0x01) << 8)
#define RTC_CRL_WUTF                          RTC_CRL_WUTF_Mask
#define RTC_CRL_RTOFF_Pos                     ((uint32_t)5)                     /* RTC operation OFF */
#define RTC_CRL_RTOFF_Mask                    (((uint32_t)0x01) << 5)
#define RTC_CRL_RTOFF                         RTC_CRL_RTOFF_Mask
#define RTC_CRL_CNF_Pos                       ((uint32_t)4)                     /* Configuration flag */
#define RTC_CRL_CNF_Mask                      (((uint32_t)0x01) << 4)
#define RTC_CRL_CNF                           RTC_CRL_CNF_Mask
#define RTC_CRL_RSF_Pos                       ((uint32_t)3)                     /* Registers synchronized flag */
#define RTC_CRL_RSF_Mask                      (((uint32_t)0x01) << 3)
#define RTC_CRL_RSF                           RTC_CRL_RSF_Mask
#define RTC_CRL_OWF_Pos                       ((uint32_t)2)                     /* Overflow flag */
#define RTC_CRL_OWF_Mask                      (((uint32_t)0x01) << 2)
#define RTC_CRL_OWF                           RTC_CRL_OWF_Mask
#define RTC_CRL_ALRF_Pos                      ((uint32_t)1)                     /* Alarm flag */
#define RTC_CRL_ALRF_Mask                     (((uint32_t)0x01) << 1)
#define RTC_CRL_ALRF                          RTC_CRL_ALRF_Mask
#define RTC_CRL_SECF_Pos                      ((uint32_t)0)                     /* Second flag */
#define RTC_CRL_SECF_Mask                     (((uint32_t)0x01) << 0)
#define RTC_CRL_SECF                          RTC_CRL_SECF_Mask

/************************************* RTC->PRLH  ***************************************/
#define RTC_PRLH_PRL_Pos                      ((uint32_t)0)                     /* RTC prescaler reload value high */
#define RTC_PRLH_PRL_Mask                     (((uint32_t)0x0F) << 0)
#define RTC_PRLH_PRL                          RTC_PRLH_PRL_Mask
#define RTC_PRLH_PRL_0                        (((uint32_t)0x1))
#define RTC_PRLH_PRL_1                        (((uint32_t)0x2))
#define RTC_PRLH_PRL_2                        (((uint32_t)0x4))
#define RTC_PRLH_PRL_3                        (((uint32_t)0x8))

/************************************* RTC->PRLL  ***************************************/
#define RTC_PRLL_PRL_Pos                      ((uint32_t)0)                     /* RTC prescaler reload value low */
#define RTC_PRLL_PRL_Mask                     (((uint32_t)0xFFFF) << 0)
#define RTC_PRLL_PRL                          RTC_PRLL_PRL_Mask

/************************************* RTC->DIVH  ***************************************/
#define RTC_DIVH_RTC_DIV_Pos                  ((uint32_t)0)                     /* RTC clock divider high */
#define RTC_DIVH_RTC_DIV_Mask                 (((uint32_t)0x0F) << 0)
#define RTC_DIVH_RTC_DIV                      RTC_DIVH_RTC_DIV_Mask
#define RTC_DIVH_RTC_DIV_0                    (((uint32_t)0x1))
#define RTC_DIVH_RTC_DIV_1                    (((uint32_t)0x2))
#define RTC_DIVH_RTC_DIV_2                    (((uint32_t)0x4))
#define RTC_DIVH_RTC_DIV_3                    (((uint32_t)0x8))

/************************************* RTC->DIVL  ***************************************/
#define RTC_DIVL_RTC_DIV_Pos                  ((uint32_t)0)                     /* RTC clock divider low */
#define RTC_DIVL_RTC_DIV_Mask                 (((uint32_t)0xFFFF) << 0)
#define RTC_DIVL_RTC_DIV                      RTC_DIVL_RTC_DIV_Mask

/************************************* RTC->CNTH  ***************************************/
#define RTC_CNTH_RTC_CNT_Pos                  ((uint32_t)0)                     /* RTC counter high */
#define RTC_CNTH_RTC_CNT_Mask                 (((uint32_t)0xFFFF) << 0)
#define RTC_CNTH_RTC_CNT                      RTC_CNTH_RTC_CNT_Mask

/************************************* RTC->CNTL  ***************************************/
#define RTC_CNTL_RTC_CNT_Pos                  ((uint32_t)0)                     /* RTC counter low */
#define RTC_CNTL_RTC_CNT_Mask                 (((uint32_t)0xFFFF) << 0)
#define RTC_CNTL_RTC_CNT                      RTC_CNTL_RTC_CNT_Mask

/************************************* RTC->ALRH  ***************************************/
#define RTC_ALRH_RTC_ALR_Pos                  ((uint32_t)0)                     /* RTC alarm high */
#define RTC_ALRH_RTC_ALR_Mask                 (((uint32_t)0xFFFF) << 0)
#define RTC_ALRH_RTC_ALR                      RTC_ALRH_RTC_ALR_Mask

/************************************* RTC->ALRL  ***************************************/
#define RTC_ALRL_RTC_ALR_Pos                  ((uint32_t)0)                     /* RTC alarm low */
#define RTC_ALRL_RTC_ALR_Mask                 (((uint32_t)0xFFFF) << 0)
#define RTC_ALRL_RTC_ALR                      RTC_ALRL_RTC_ALR_Mask

/************************************** RTC->WUT  ***************************************/
#define RTC_WUT_WUT_Pos                       ((uint32_t)0)                     /* Wakeup auto-reload value bits */
#define RTC_WUT_WUT_Mask                      (((uint32_t)0xFFFF) << 0)
#define RTC_WUT_WUT                           RTC_WUT_WUT_Mask

/*****************************************************************************************
*                                     Peripheral IWDG                                    *
*****************************************************************************************/
typedef struct{
  __O  uint32_t KR;                     /* KR */
  __IO uint32_t PR;                     /* PR */
  __IO uint32_t RLR;                    /* RLR */
  __I  uint32_t SR;                     /* SR */
  __IO uint32_t WINR;                   /* WINR */
}IWDG_TypeDef;

/************************************** IWDG->KR  ***************************************/
#define IWDG_KR_KEY_Pos                       ((uint32_t)0)                     /* Key value, write only, read 0x0000) */
#define IWDG_KR_KEY_Mask                      (((uint32_t)0xFFFF) << 0)
#define IWDG_KR_KEY                           IWDG_KR_KEY_Mask

/************************************** IWDG->PR  ***************************************/
#define IWDG_PR_PR_Pos                        ((uint32_t)0)                     /* Prescaler divider */
#define IWDG_PR_PR_Mask                       (((uint32_t)0x07) << 0)
#define IWDG_PR_PR                            IWDG_PR_PR_Mask
#define IWDG_PR_PR_0                          (((uint32_t)0x1))
#define IWDG_PR_PR_1                          (((uint32_t)0x2))
#define IWDG_PR_PR_2                          (((uint32_t)0x4))

/************************************* IWDG->RLR  ***************************************/
#define IWDG_RLR_RL_Pos                       ((uint32_t)0)                     /* Watchdog counter reload value */
#define IWDG_RLR_RL_Mask                      (((uint32_t)0x0FFF) << 0)
#define IWDG_RLR_RL                           IWDG_RLR_RL_Mask
#define IWDG_RLR_RL_0                         (((uint32_t)0x1))
#define IWDG_RLR_RL_1                         (((uint32_t)0x2))
#define IWDG_RLR_RL_2                         (((uint32_t)0x4))
#define IWDG_RLR_RL_3                         (((uint32_t)0x8))
#define IWDG_RLR_RL_4                         (((uint32_t)0x10))
#define IWDG_RLR_RL_5                         (((uint32_t)0x20))
#define IWDG_RLR_RL_6                         (((uint32_t)0x40))
#define IWDG_RLR_RL_7                         (((uint32_t)0x80))
#define IWDG_RLR_RL_8                         (((uint32_t)0x100))
#define IWDG_RLR_RL_9                         (((uint32_t)0x200))
#define IWDG_RLR_RL_10                        (((uint32_t)0x400))
#define IWDG_RLR_RL_11                        (((uint32_t)0x800))

/************************************** IWDG->SR  ***************************************/
#define IWDG_SR_RVU_Pos                       ((uint32_t)1)                     /* Watchdog counter reload value update */
#define IWDG_SR_RVU_Mask                      (((uint32_t)0x01) << 1)
#define IWDG_SR_RVU                           IWDG_SR_RVU_Mask
#define IWDG_SR_PVU_Pos                       ((uint32_t)0)                     /* Watchdog prescaler value update */
#define IWDG_SR_PVU_Mask                      (((uint32_t)0x01) << 0)
#define IWDG_SR_PVU                           IWDG_SR_PVU_Mask

/************************************* IWDG->WINR  **************************************/
#define IWDG_WINR_WIN_Pos                     ((uint32_t)0)                     /* Watchdog counter window value */
#define IWDG_WINR_WIN_Mask                    (((uint32_t)0x0FFF) << 0)
#define IWDG_WINR_WIN                         IWDG_WINR_WIN_Mask
#define IWDG_WINR_WIN_0                       (((uint32_t)0x1))
#define IWDG_WINR_WIN_1                       (((uint32_t)0x2))
#define IWDG_WINR_WIN_2                       (((uint32_t)0x4))
#define IWDG_WINR_WIN_3                       (((uint32_t)0x8))
#define IWDG_WINR_WIN_4                       (((uint32_t)0x10))
#define IWDG_WINR_WIN_5                       (((uint32_t)0x20))
#define IWDG_WINR_WIN_6                       (((uint32_t)0x40))
#define IWDG_WINR_WIN_7                       (((uint32_t)0x80))
#define IWDG_WINR_WIN_8                       (((uint32_t)0x100))
#define IWDG_WINR_WIN_9                       (((uint32_t)0x200))
#define IWDG_WINR_WIN_10                      (((uint32_t)0x400))
#define IWDG_WINR_WIN_11                      (((uint32_t)0x800))

/*****************************************************************************************
*                                     Peripheral WWDG                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CFR;                    /* CFR */
  __IO uint32_t SR;                     /* SR */
}WWDG_TypeDef;

/************************************** WWDG->CR  ***************************************/
#define WWDG_CR_WDGA_Pos                      ((uint32_t)7)                     /* Activation bit */
#define WWDG_CR_WDGA_Mask                     (((uint32_t)0x01) << 7)
#define WWDG_CR_WDGA                          WWDG_CR_WDGA_Mask
#define WWDG_CR_T_Pos                         ((uint32_t)0)                     /* 7-bit counter, MSB to LSB */
#define WWDG_CR_T_Mask                        (((uint32_t)0x7F) << 0)
#define WWDG_CR_T                             WWDG_CR_T_Mask
#define WWDG_CR_T_0                           (((uint32_t)0x1))
#define WWDG_CR_T_1                           (((uint32_t)0x2))
#define WWDG_CR_T_2                           (((uint32_t)0x4))
#define WWDG_CR_T_3                           (((uint32_t)0x8))
#define WWDG_CR_T_4                           (((uint32_t)0x10))
#define WWDG_CR_T_5                           (((uint32_t)0x20))
#define WWDG_CR_T_6                           (((uint32_t)0x40))

/************************************* WWDG->CFR  ***************************************/
#define WWDG_CFR_EWI_Pos                      ((uint32_t)9)                     /* Early wakeup interrupt */
#define WWDG_CFR_EWI_Mask                     (((uint32_t)0x01) << 9)
#define WWDG_CFR_EWI                          WWDG_CFR_EWI_Mask
#define WWDG_CFR_WDGTB_Pos                    ((uint32_t)7)                     /* Timer base */
#define WWDG_CFR_WDGTB_Mask                   (((uint32_t)0x03) << 7)
#define WWDG_CFR_WDGTB                        WWDG_CFR_WDGTB_Mask
#define WWDG_CFR_WDGTB_0                      (((uint32_t)0x1 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_WDGTB_1                      (((uint32_t)0x2 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_W_Pos                        ((uint32_t)0)                     /* 7-bit window value */
#define WWDG_CFR_W_Mask                       (((uint32_t)0x7F) << 0)
#define WWDG_CFR_W                            WWDG_CFR_W_Mask
#define WWDG_CFR_W_0                          (((uint32_t)0x1))
#define WWDG_CFR_W_1                          (((uint32_t)0x2))
#define WWDG_CFR_W_2                          (((uint32_t)0x4))
#define WWDG_CFR_W_3                          (((uint32_t)0x8))
#define WWDG_CFR_W_4                          (((uint32_t)0x10))
#define WWDG_CFR_W_5                          (((uint32_t)0x20))
#define WWDG_CFR_W_6                          (((uint32_t)0x40))

/************************************** WWDG->SR  ***************************************/
#define WWDG_SR_EWIF_Pos                      ((uint32_t)0)                     /* Early wakeup interrupt flag */
#define WWDG_SR_EWIF_Mask                     (((uint32_t)0x01) << 0)
#define WWDG_SR_EWIF                          WWDG_SR_EWIF_Mask

/*****************************************************************************************
*                                     Peripheral USB                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t EP0R;                   /* EP0R */
  __IO uint32_t EP1R;                   /* EP1R */
  __IO uint32_t EP2R;                   /* EP2R */
  __IO uint32_t EP3R;                   /* EP3R */
  __IO uint32_t EP4R;                   /* EP4R */
  __IO uint32_t EP5R;                   /* EP5R */
  __IO uint32_t EP6R;                   /* EP6R */
  __IO uint32_t EP7R;                   /* EP7R */
       uint16_t RESERVED1[16];
  __IO uint32_t CNTR;                   /* CNTR */
  __IO uint32_t ISTR;                   /* ISTR */
  __I  uint32_t FNR;                    /* FNR */
  __IO uint32_t DADDR;                  /* DADDR */
  __IO uint32_t BTABLE;                 /* BTABLE */
}USB_TypeDef;

/************************************* USB->CNTR  ***************************************/
#define USB_CNTR_CTRM_Pos                     ((uint32_t)15)                    /* Correct transfer interrupt mask */
#define USB_CNTR_CTRM_Mask                    (((uint32_t)0x01) << 15)
#define USB_CNTR_CTRM                         USB_CNTR_CTRM_Mask
#define USB_CNTR_PMAOVRM_Pos                  ((uint32_t)14)                    /* Packet memory area over/underrun interrupt mask */
#define USB_CNTR_PMAOVRM_Mask                 (((uint32_t)0x01) << 14)
#define USB_CNTR_PMAOVRM                      USB_CNTR_PMAOVRM_Mask
#define USB_CNTR_ERRM_Pos                     ((uint32_t)13)                    /* Error interrupt mask */
#define USB_CNTR_ERRM_Mask                    (((uint32_t)0x01) << 13)
#define USB_CNTR_ERRM                         USB_CNTR_ERRM_Mask
#define USB_CNTR_WKUPM_Pos                    ((uint32_t)12)                    /* Wakeup interrupt mask */
#define USB_CNTR_WKUPM_Mask                   (((uint32_t)0x01) << 12)
#define USB_CNTR_WKUPM                        USB_CNTR_WKUPM_Mask
#define USB_CNTR_SUSPM_Pos                    ((uint32_t)11)                    /* Suspend mode interrupt mask */
#define USB_CNTR_SUSPM_Mask                   (((uint32_t)0x01) << 11)
#define USB_CNTR_SUSPM                        USB_CNTR_SUSPM_Mask
#define USB_CNTR_RESETM_Pos                   ((uint32_t)10)                    /* USB reset interrupt mask */
#define USB_CNTR_RESETM_Mask                  (((uint32_t)0x01) << 10)
#define USB_CNTR_RESETM                       USB_CNTR_RESETM_Mask
#define USB_CNTR_SOFM_Pos                     ((uint32_t)9)                     /* Start of frame interrupt mask */
#define USB_CNTR_SOFM_Mask                    (((uint32_t)0x01) << 9)
#define USB_CNTR_SOFM                         USB_CNTR_SOFM_Mask
#define USB_CNTR_ESOFM_Pos                    ((uint32_t)8)                     /* Expected start of frame interrupt mask */
#define USB_CNTR_ESOFM_Mask                   (((uint32_t)0x01) << 8)
#define USB_CNTR_ESOFM                        USB_CNTR_ESOFM_Mask
#define USB_CNTR_RESUME_Pos                   ((uint32_t)4)                     /* Resume request */
#define USB_CNTR_RESUME_Mask                  (((uint32_t)0x01) << 4)
#define USB_CNTR_RESUME                       USB_CNTR_RESUME_Mask
#define USB_CNTR_FSUSP_Pos                    ((uint32_t)3)                     /* Force suspend */
#define USB_CNTR_FSUSP_Mask                   (((uint32_t)0x01) << 3)
#define USB_CNTR_FSUSP                        USB_CNTR_FSUSP_Mask
#define USB_CNTR_FRES_Pos                     ((uint32_t)0)                     /* Force USB reset */
#define USB_CNTR_FRES_Mask                    (((uint32_t)0x01) << 0)
#define USB_CNTR_FRES                         USB_CNTR_FRES_Mask

/************************************* USB->ISTR  ***************************************/
#define USB_ISTR_CTR_Pos                      ((uint32_t)15)                    /* Correct transfer */
#define USB_ISTR_CTR_Mask                     (((uint32_t)0x01) << 15)
#define USB_ISTR_CTR                          USB_ISTR_CTR_Mask
#define USB_ISTR_PMAOVR_Pos                   ((uint32_t)14)                    /* Packet memory area over/underrun */
#define USB_ISTR_PMAOVR_Mask                  (((uint32_t)0x01) << 14)
#define USB_ISTR_PMAOVR                       USB_ISTR_PMAOVR_Mask
#define USB_ISTR_ERR_Pos                      ((uint32_t)13)                    /* Error */
#define USB_ISTR_ERR_Mask                     (((uint32_t)0x01) << 13)
#define USB_ISTR_ERR                          USB_ISTR_ERR_Mask
#define USB_ISTR_WKUP_Pos                     ((uint32_t)12)                    /* Wakeup request */
#define USB_ISTR_WKUP_Mask                    (((uint32_t)0x01) << 12)
#define USB_ISTR_WKUP                         USB_ISTR_WKUP_Mask
#define USB_ISTR_SUSP_Pos                     ((uint32_t)11)                    /* Suspend mode request */
#define USB_ISTR_SUSP_Mask                    (((uint32_t)0x01) << 11)
#define USB_ISTR_SUSP                         USB_ISTR_SUSP_Mask
#define USB_ISTR_RESET_Pos                    ((uint32_t)10)                    /* USB reset request */
#define USB_ISTR_RESET_Mask                   (((uint32_t)0x01) << 10)
#define USB_ISTR_RESET                        USB_ISTR_RESET_Mask
#define USB_ISTR_SOF_Pos                      ((uint32_t)9)                     /* Start of frame */
#define USB_ISTR_SOF_Mask                     (((uint32_t)0x01) << 9)
#define USB_ISTR_SOF                          USB_ISTR_SOF_Mask
#define USB_ISTR_ESOF_Pos                     ((uint32_t)8)                     /* Expected start of frame */
#define USB_ISTR_ESOF_Mask                    (((uint32_t)0x01) << 8)
#define USB_ISTR_ESOF                         USB_ISTR_ESOF_Mask
#define USB_ISTR_DIR_Pos                      ((uint32_t)4)                     /* Direction of transaction */
#define USB_ISTR_DIR_Mask                     (((uint32_t)0x01) << 4)
#define USB_ISTR_DIR                          USB_ISTR_DIR_Mask
#define USB_ISTR_EP_ID_Pos                    ((uint32_t)0)                     /* Endpoint Identifier */
#define USB_ISTR_EP_ID_Mask                   (((uint32_t)0x0F) << 0)
#define USB_ISTR_EP_ID                        USB_ISTR_EP_ID_Mask
#define USB_ISTR_EP_ID_0                      (((uint32_t)0x1))
#define USB_ISTR_EP_ID_1                      (((uint32_t)0x2))
#define USB_ISTR_EP_ID_2                      (((uint32_t)0x4))
#define USB_ISTR_EP_ID_3                      (((uint32_t)0x8))

/************************************** USB->FNR  ***************************************/
#define USB_FNR_RXDP_Pos                      ((uint32_t)15)                    /* Receive data+line status */
#define USB_FNR_RXDP_Mask                     (((uint32_t)0x01) << 15)
#define USB_FNR_RXDP                          USB_FNR_RXDP_Mask
#define USB_FNR_RXDM_Pos                      ((uint32_t)14)                    /* Receive data-line status */
#define USB_FNR_RXDM_Mask                     (((uint32_t)0x01) << 14)
#define USB_FNR_RXDM                          USB_FNR_RXDM_Mask
#define USB_FNR_LCK_Pos                       ((uint32_t)13)                    /* Locked */
#define USB_FNR_LCK_Mask                      (((uint32_t)0x01) << 13)
#define USB_FNR_LCK                           USB_FNR_LCK_Mask
#define USB_FNR_LSOF_Pos                      ((uint32_t)11)                    /* Lost SOF */
#define USB_FNR_LSOF_Mask                     (((uint32_t)0x03) << 11)
#define USB_FNR_LSOF                          USB_FNR_LSOF_Mask
#define USB_FNR_LSOF_0                        (((uint32_t)0x1 << USB_FNR_LSOF_Pos))
#define USB_FNR_LSOF_1                        (((uint32_t)0x2 << USB_FNR_LSOF_Pos))
#define USB_FNR_FN_Pos                        ((uint32_t)0)                     /* Frame number */
#define USB_FNR_FN_Mask                       (((uint32_t)0x07FF) << 0)
#define USB_FNR_FN                            USB_FNR_FN_Mask
#define USB_FNR_FN_0                          (((uint32_t)0x1))
#define USB_FNR_FN_1                          (((uint32_t)0x2))
#define USB_FNR_FN_2                          (((uint32_t)0x4))
#define USB_FNR_FN_3                          (((uint32_t)0x8))
#define USB_FNR_FN_4                          (((uint32_t)0x10))
#define USB_FNR_FN_5                          (((uint32_t)0x20))
#define USB_FNR_FN_6                          (((uint32_t)0x40))
#define USB_FNR_FN_7                          (((uint32_t)0x80))
#define USB_FNR_FN_8                          (((uint32_t)0x100))
#define USB_FNR_FN_9                          (((uint32_t)0x200))
#define USB_FNR_FN_10                         (((uint32_t)0x400))

/************************************* USB->DADDR  **************************************/
#define USB_DADDR_EF_Pos                      ((uint32_t)7)                     /* Enable function */
#define USB_DADDR_EF_Mask                     (((uint32_t)0x01) << 7)
#define USB_DADDR_EF                          USB_DADDR_EF_Mask
#define USB_DADDR_ADD_Pos                     ((uint32_t)0)                     /* Device address */
#define USB_DADDR_ADD_Mask                    (((uint32_t)0x7F) << 0)
#define USB_DADDR_ADD                         USB_DADDR_ADD_Mask
#define USB_DADDR_ADD_0                       (((uint32_t)0x1))
#define USB_DADDR_ADD_1                       (((uint32_t)0x2))
#define USB_DADDR_ADD_2                       (((uint32_t)0x4))
#define USB_DADDR_ADD_3                       (((uint32_t)0x8))
#define USB_DADDR_ADD_4                       (((uint32_t)0x10))
#define USB_DADDR_ADD_5                       (((uint32_t)0x20))
#define USB_DADDR_ADD_6                       (((uint32_t)0x40))

/************************************ USB->BTABLE  **************************************/
#define USB_BTABLE_BTABLE_Pos                 ((uint32_t)3)                     /* Buffer table */
#define USB_BTABLE_BTABLE_Mask                (((uint32_t)0x1FFF) << 3)
#define USB_BTABLE_BTABLE                     USB_BTABLE_BTABLE_Mask
#define USB_BTABLE_BTABLE_0                   (((uint32_t)0x1 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_1                   (((uint32_t)0x2 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_2                   (((uint32_t)0x4 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_3                   (((uint32_t)0x8 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_4                   (((uint32_t)0x10 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_5                   (((uint32_t)0x20 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_6                   (((uint32_t)0x40 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_7                   (((uint32_t)0x80 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_8                   (((uint32_t)0x100 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_9                   (((uint32_t)0x200 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_10                  (((uint32_t)0x400 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_11                  (((uint32_t)0x800 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_12                  (((uint32_t)0x1000 << USB_BTABLE_BTABLE_Pos))

/************************************* USB->EP0R  ***************************************/
#define USB_EP0R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP0R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP0R_CTR_RX                       USB_EP0R_CTR_RX_Mask
#define USB_EP0R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP0R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP0R_DTOG_RX                      USB_EP0R_DTOG_RX_Mask
#define USB_EP0R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP0R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP0R_STAT_RX                      USB_EP0R_STAT_RX_Mask
#define USB_EP0R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP0R_STAT_RX_Pos))
#define USB_EP0R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP0R_STAT_RX_Pos))
#define USB_EP0R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP0R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP0R_SETUP                        USB_EP0R_SETUP_Mask
#define USB_EP0R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP0R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP0R_EP_TYPE                      USB_EP0R_EP_TYPE_Mask
#define USB_EP0R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP0R_EP_TYPE_Pos))
#define USB_EP0R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP0R_EP_TYPE_Pos))
#define USB_EP0R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP0R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP0R_EP_KIND                      USB_EP0R_EP_KIND_Mask
#define USB_EP0R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP0R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP0R_CTR_TX                       USB_EP0R_CTR_TX_Mask
#define USB_EP0R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP0R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP0R_DTOG_TX                      USB_EP0R_DTOG_TX_Mask
#define USB_EP0R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP0R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP0R_STAT_TX                      USB_EP0R_STAT_TX_Mask
#define USB_EP0R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP0R_STAT_TX_Pos))
#define USB_EP0R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP0R_STAT_TX_Pos))
#define USB_EP0R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP0R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP0R_EA                           USB_EP0R_EA_Mask
#define USB_EP0R_EA_0                         (((uint32_t)0x1))
#define USB_EP0R_EA_1                         (((uint32_t)0x2))
#define USB_EP0R_EA_2                         (((uint32_t)0x4))
#define USB_EP0R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP1R  ***************************************/
#define USB_EP1R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP1R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP1R_CTR_RX                       USB_EP1R_CTR_RX_Mask
#define USB_EP1R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP1R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP1R_DTOG_RX                      USB_EP1R_DTOG_RX_Mask
#define USB_EP1R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP1R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP1R_STAT_RX                      USB_EP1R_STAT_RX_Mask
#define USB_EP1R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP1R_STAT_RX_Pos))
#define USB_EP1R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP1R_STAT_RX_Pos))
#define USB_EP1R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP1R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP1R_SETUP                        USB_EP1R_SETUP_Mask
#define USB_EP1R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP1R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP1R_EP_TYPE                      USB_EP1R_EP_TYPE_Mask
#define USB_EP1R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP1R_EP_TYPE_Pos))
#define USB_EP1R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP1R_EP_TYPE_Pos))
#define USB_EP1R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP1R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP1R_EP_KIND                      USB_EP1R_EP_KIND_Mask
#define USB_EP1R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP1R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP1R_CTR_TX                       USB_EP1R_CTR_TX_Mask
#define USB_EP1R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP1R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP1R_DTOG_TX                      USB_EP1R_DTOG_TX_Mask
#define USB_EP1R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP1R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP1R_STAT_TX                      USB_EP1R_STAT_TX_Mask
#define USB_EP1R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP1R_STAT_TX_Pos))
#define USB_EP1R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP1R_STAT_TX_Pos))
#define USB_EP1R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP1R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP1R_EA                           USB_EP1R_EA_Mask
#define USB_EP1R_EA_0                         (((uint32_t)0x1))
#define USB_EP1R_EA_1                         (((uint32_t)0x2))
#define USB_EP1R_EA_2                         (((uint32_t)0x4))
#define USB_EP1R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP2R  ***************************************/
#define USB_EP2R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP2R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP2R_CTR_RX                       USB_EP2R_CTR_RX_Mask
#define USB_EP2R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP2R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP2R_DTOG_RX                      USB_EP2R_DTOG_RX_Mask
#define USB_EP2R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP2R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP2R_STAT_RX                      USB_EP2R_STAT_RX_Mask
#define USB_EP2R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP2R_STAT_RX_Pos))
#define USB_EP2R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP2R_STAT_RX_Pos))
#define USB_EP2R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP2R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP2R_SETUP                        USB_EP2R_SETUP_Mask
#define USB_EP2R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP2R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP2R_EP_TYPE                      USB_EP2R_EP_TYPE_Mask
#define USB_EP2R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP2R_EP_TYPE_Pos))
#define USB_EP2R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP2R_EP_TYPE_Pos))
#define USB_EP2R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP2R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP2R_EP_KIND                      USB_EP2R_EP_KIND_Mask
#define USB_EP2R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP2R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP2R_CTR_TX                       USB_EP2R_CTR_TX_Mask
#define USB_EP2R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP2R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP2R_DTOG_TX                      USB_EP2R_DTOG_TX_Mask
#define USB_EP2R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP2R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP2R_STAT_TX                      USB_EP2R_STAT_TX_Mask
#define USB_EP2R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP2R_STAT_TX_Pos))
#define USB_EP2R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP2R_STAT_TX_Pos))
#define USB_EP2R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP2R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP2R_EA                           USB_EP2R_EA_Mask
#define USB_EP2R_EA_0                         (((uint32_t)0x1))
#define USB_EP2R_EA_1                         (((uint32_t)0x2))
#define USB_EP2R_EA_2                         (((uint32_t)0x4))
#define USB_EP2R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP3R  ***************************************/
#define USB_EP3R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP3R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP3R_CTR_RX                       USB_EP3R_CTR_RX_Mask
#define USB_EP3R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP3R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP3R_DTOG_RX                      USB_EP3R_DTOG_RX_Mask
#define USB_EP3R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP3R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP3R_STAT_RX                      USB_EP3R_STAT_RX_Mask
#define USB_EP3R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP3R_STAT_RX_Pos))
#define USB_EP3R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP3R_STAT_RX_Pos))
#define USB_EP3R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP3R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP3R_SETUP                        USB_EP3R_SETUP_Mask
#define USB_EP3R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP3R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP3R_EP_TYPE                      USB_EP3R_EP_TYPE_Mask
#define USB_EP3R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP3R_EP_TYPE_Pos))
#define USB_EP3R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP3R_EP_TYPE_Pos))
#define USB_EP3R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP3R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP3R_EP_KIND                      USB_EP3R_EP_KIND_Mask
#define USB_EP3R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP3R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP3R_CTR_TX                       USB_EP3R_CTR_TX_Mask
#define USB_EP3R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP3R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP3R_DTOG_TX                      USB_EP3R_DTOG_TX_Mask
#define USB_EP3R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP3R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP3R_STAT_TX                      USB_EP3R_STAT_TX_Mask
#define USB_EP3R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP3R_STAT_TX_Pos))
#define USB_EP3R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP3R_STAT_TX_Pos))
#define USB_EP3R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP3R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP3R_EA                           USB_EP3R_EA_Mask
#define USB_EP3R_EA_0                         (((uint32_t)0x1))
#define USB_EP3R_EA_1                         (((uint32_t)0x2))
#define USB_EP3R_EA_2                         (((uint32_t)0x4))
#define USB_EP3R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP4R  ***************************************/
#define USB_EP4R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP4R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP4R_CTR_RX                       USB_EP4R_CTR_RX_Mask
#define USB_EP4R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP4R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP4R_DTOG_RX                      USB_EP4R_DTOG_RX_Mask
#define USB_EP4R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP4R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP4R_STAT_RX                      USB_EP4R_STAT_RX_Mask
#define USB_EP4R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP4R_STAT_RX_Pos))
#define USB_EP4R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP4R_STAT_RX_Pos))
#define USB_EP4R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP4R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP4R_SETUP                        USB_EP4R_SETUP_Mask
#define USB_EP4R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP4R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP4R_EP_TYPE                      USB_EP4R_EP_TYPE_Mask
#define USB_EP4R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP4R_EP_TYPE_Pos))
#define USB_EP4R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP4R_EP_TYPE_Pos))
#define USB_EP4R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP4R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP4R_EP_KIND                      USB_EP4R_EP_KIND_Mask
#define USB_EP4R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP4R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP4R_CTR_TX                       USB_EP4R_CTR_TX_Mask
#define USB_EP4R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP4R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP4R_DTOG_TX                      USB_EP4R_DTOG_TX_Mask
#define USB_EP4R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP4R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP4R_STAT_TX                      USB_EP4R_STAT_TX_Mask
#define USB_EP4R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP4R_STAT_TX_Pos))
#define USB_EP4R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP4R_STAT_TX_Pos))
#define USB_EP4R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP4R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP4R_EA                           USB_EP4R_EA_Mask
#define USB_EP4R_EA_0                         (((uint32_t)0x1))
#define USB_EP4R_EA_1                         (((uint32_t)0x2))
#define USB_EP4R_EA_2                         (((uint32_t)0x4))
#define USB_EP4R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP5R  ***************************************/
#define USB_EP5R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP5R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP5R_CTR_RX                       USB_EP5R_CTR_RX_Mask
#define USB_EP5R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP5R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP5R_DTOG_RX                      USB_EP5R_DTOG_RX_Mask
#define USB_EP5R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP5R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP5R_STAT_RX                      USB_EP5R_STAT_RX_Mask
#define USB_EP5R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP5R_STAT_RX_Pos))
#define USB_EP5R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP5R_STAT_RX_Pos))
#define USB_EP5R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP5R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP5R_SETUP                        USB_EP5R_SETUP_Mask
#define USB_EP5R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP5R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP5R_EP_TYPE                      USB_EP5R_EP_TYPE_Mask
#define USB_EP5R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP5R_EP_TYPE_Pos))
#define USB_EP5R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP5R_EP_TYPE_Pos))
#define USB_EP5R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP5R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP5R_EP_KIND                      USB_EP5R_EP_KIND_Mask
#define USB_EP5R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP5R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP5R_CTR_TX                       USB_EP5R_CTR_TX_Mask
#define USB_EP5R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP5R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP5R_DTOG_TX                      USB_EP5R_DTOG_TX_Mask
#define USB_EP5R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP5R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP5R_STAT_TX                      USB_EP5R_STAT_TX_Mask
#define USB_EP5R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP5R_STAT_TX_Pos))
#define USB_EP5R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP5R_STAT_TX_Pos))
#define USB_EP5R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP5R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP5R_EA                           USB_EP5R_EA_Mask
#define USB_EP5R_EA_0                         (((uint32_t)0x1))
#define USB_EP5R_EA_1                         (((uint32_t)0x2))
#define USB_EP5R_EA_2                         (((uint32_t)0x4))
#define USB_EP5R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP6R  ***************************************/
#define USB_EP6R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP6R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP6R_CTR_RX                       USB_EP6R_CTR_RX_Mask
#define USB_EP6R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP6R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP6R_DTOG_RX                      USB_EP6R_DTOG_RX_Mask
#define USB_EP6R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP6R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP6R_STAT_RX                      USB_EP6R_STAT_RX_Mask
#define USB_EP6R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP6R_STAT_RX_Pos))
#define USB_EP6R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP6R_STAT_RX_Pos))
#define USB_EP6R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP6R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP6R_SETUP                        USB_EP6R_SETUP_Mask
#define USB_EP6R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP6R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP6R_EP_TYPE                      USB_EP6R_EP_TYPE_Mask
#define USB_EP6R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP6R_EP_TYPE_Pos))
#define USB_EP6R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP6R_EP_TYPE_Pos))
#define USB_EP6R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP6R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP6R_EP_KIND                      USB_EP6R_EP_KIND_Mask
#define USB_EP6R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP6R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP6R_CTR_TX                       USB_EP6R_CTR_TX_Mask
#define USB_EP6R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP6R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP6R_DTOG_TX                      USB_EP6R_DTOG_TX_Mask
#define USB_EP6R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP6R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP6R_STAT_TX                      USB_EP6R_STAT_TX_Mask
#define USB_EP6R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP6R_STAT_TX_Pos))
#define USB_EP6R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP6R_STAT_TX_Pos))
#define USB_EP6R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP6R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP6R_EA                           USB_EP6R_EA_Mask
#define USB_EP6R_EA_0                         (((uint32_t)0x1))
#define USB_EP6R_EA_1                         (((uint32_t)0x2))
#define USB_EP6R_EA_2                         (((uint32_t)0x4))
#define USB_EP6R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP7R  ***************************************/
#define USB_EP7R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP7R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP7R_CTR_RX                       USB_EP7R_CTR_RX_Mask
#define USB_EP7R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP7R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP7R_DTOG_RX                      USB_EP7R_DTOG_RX_Mask
#define USB_EP7R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits, for reception transfers */
#define USB_EP7R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP7R_STAT_RX                      USB_EP7R_STAT_RX_Mask
#define USB_EP7R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP7R_STAT_RX_Pos))
#define USB_EP7R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP7R_STAT_RX_Pos))
#define USB_EP7R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP7R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP7R_SETUP                        USB_EP7R_SETUP_Mask
#define USB_EP7R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP7R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP7R_EP_TYPE                      USB_EP7R_EP_TYPE_Mask
#define USB_EP7R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP7R_EP_TYPE_Pos))
#define USB_EP7R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP7R_EP_TYPE_Pos))
#define USB_EP7R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP7R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP7R_EP_KIND                      USB_EP7R_EP_KIND_Mask
#define USB_EP7R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP7R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP7R_CTR_TX                       USB_EP7R_CTR_TX_Mask
#define USB_EP7R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP7R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP7R_DTOG_TX                      USB_EP7R_DTOG_TX_Mask
#define USB_EP7R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP7R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP7R_STAT_TX                      USB_EP7R_STAT_TX_Mask
#define USB_EP7R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP7R_STAT_TX_Pos))
#define USB_EP7R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP7R_STAT_TX_Pos))
#define USB_EP7R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP7R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP7R_EA                           USB_EP7R_EA_Mask
#define USB_EP7R_EA_0                         (((uint32_t)0x1))
#define USB_EP7R_EA_1                         (((uint32_t)0x2))
#define USB_EP7R_EA_2                         (((uint32_t)0x4))
#define USB_EP7R_EA_3                         (((uint32_t)0x8))

/*****************************************************************************************
*                                     Peripheral CAN                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t MCR;                    /* MCR */
  __IO uint32_t MSR;                    /* MSR */
  __IO uint32_t TSR;                    /* TSR */
  __IO uint32_t RF0R;                   /* RF0R */
  __IO uint32_t RF1R;                   /* RF1R */
  __IO uint32_t IER;                    /* IER */
  __IO uint32_t ESR;                    /* ESR */
  __IO uint32_t BTR;                    /* BTR */
       uint16_t RESERVED1[176];
  __IO uint32_t TI0R;                   /* TI0R */
  __IO uint32_t TDT0R;                  /* TDT0R */
  __IO uint32_t TDL0R;                  /* TDL0R */
  __IO uint32_t TDH0R;                  /* TDH0R */
  __IO uint32_t TI1R;                   /* TI1R */
  __IO uint32_t TDT1R;                  /* TDT1R */
  __IO uint32_t TDL1R;                  /* TDL1R */
  __IO uint32_t TDH1R;                  /* TDH1R */
  __IO uint32_t TI2R;                   /* TI2R */
  __IO uint32_t TDT2R;                  /* TDT2R */
  __IO uint32_t TDL2R;                  /* TDL2R */
  __IO uint32_t TDH2R;                  /* TDH2R */
  __I  uint32_t RI0R;                   /* RI0R */
  __I  uint32_t RDT0R;                  /* RDT0R */
  __I  uint32_t RDL0R;                  /* RDL0R */
  __I  uint32_t RDH0R;                  /* RDH0R */
  __I  uint32_t RI1R;                   /* RI1R */
  __I  uint32_t RDT1R;                  /* RDT1R */
  __I  uint32_t RDL1R;                  /* RDL1R */
  __I  uint32_t RDH1R;                  /* RDH1R */
       uint16_t RESERVED2[24];
  __IO uint32_t FMR;                    /* FMR */
  __IO uint32_t FM1R;                   /* FM1R */
       uint16_t RESERVED3[2];
  __IO uint32_t FS1R;                   /* FS1R */
       uint16_t RESERVED4[2];
  __IO uint32_t FFA1R;                  /* FFA1R */
       uint16_t RESERVED5[2];
  __IO uint32_t FA1R;                   /* FA1R */
       uint16_t RESERVED6[16];
  __IO uint32_t F0R1;                   /* F0R1 */
  __IO uint32_t F0R2;                   /* F0R2 */
  __IO uint32_t F1R1;                   /* F1R1 */
  __IO uint32_t F1R2;                   /* F1R2 */
  __IO uint32_t F2R1;                   /* F2R1 */
  __IO uint32_t F2R2;                   /* F2R2 */
  __IO uint32_t F3R1;                   /* F3R1 */
  __IO uint32_t F3R2;                   /* F3R2 */
  __IO uint32_t F4R1;                   /* F4R1 */
  __IO uint32_t F4R2;                   /* F4R2 */
  __IO uint32_t F5R1;                   /* F5R1 */
  __IO uint32_t F5R2;                   /* F5R2 */
  __IO uint32_t F6R1;                   /* F6R1 */
  __IO uint32_t F6R2;                   /* F6R2 */
  __IO uint32_t F7R1;                   /* F7R1 */
  __IO uint32_t F7R2;                   /* F7R2 */
  __IO uint32_t F8R1;                   /* F8R1 */
  __IO uint32_t F8R2;                   /* F8R2 */
  __IO uint32_t F9R1;                   /* F9R1 */
  __IO uint32_t F9R2;                   /* F9R2 */
  __IO uint32_t F10R1;                  /* F10R1 */
  __IO uint32_t F10R2;                  /* F10R2 */
  __IO uint32_t F11R1;                  /* F11R1 */
  __IO uint32_t F11R2;                  /* F11R2 */
  __IO uint32_t F12R1;                  /* F12R1 */
  __IO uint32_t F12R2;                  /* F12R2 */
  __IO uint32_t F13R1;                  /* F13R1 */
  __IO uint32_t F13R2;                  /* F13R2 */
}CAN_TypeDef;

/************************************** CAN->MCR  ***************************************/
#define CAN_MCR_DBF_Pos                       ((uint32_t)16)                    /* Debug freeze */
#define CAN_MCR_DBF_Mask                      (((uint32_t)0x01) << 16)
#define CAN_MCR_DBF                           CAN_MCR_DBF_Mask
#define CAN_MCR_RESET_Pos                     ((uint32_t)15)                    /* CAN software master */
#define CAN_MCR_RESET_Mask                    (((uint32_t)0x01) << 15)
#define CAN_MCR_RESET                         CAN_MCR_RESET_Mask
#define CAN_MCR_TTCM_Pos                      ((uint32_t)7)                     /* Time triggered communication mode */
#define CAN_MCR_TTCM_Mask                     (((uint32_t)0x01) << 7)
#define CAN_MCR_TTCM                          CAN_MCR_TTCM_Mask
#define CAN_MCR_ABOM_Pos                      ((uint32_t)6)                     /* Automatic bus-off management */
#define CAN_MCR_ABOM_Mask                     (((uint32_t)0x01) << 6)
#define CAN_MCR_ABOM                          CAN_MCR_ABOM_Mask
#define CAN_MCR_AWUM_Pos                      ((uint32_t)5)                     /* Automatic wakeup mode */
#define CAN_MCR_AWUM_Mask                     (((uint32_t)0x01) << 5)
#define CAN_MCR_AWUM                          CAN_MCR_AWUM_Mask
#define CAN_MCR_NART_Pos                      ((uint32_t)4)                     /* No automatic retransmission */
#define CAN_MCR_NART_Mask                     (((uint32_t)0x01) << 4)
#define CAN_MCR_NART                          CAN_MCR_NART_Mask
#define CAN_MCR_RFLM_Pos                      ((uint32_t)3)                     /* Receive FIFO locked mode */
#define CAN_MCR_RFLM_Mask                     (((uint32_t)0x01) << 3)
#define CAN_MCR_RFLM                          CAN_MCR_RFLM_Mask
#define CAN_MCR_TXFP_Pos                      ((uint32_t)2)                     /* Transmit FIFO priority */
#define CAN_MCR_TXFP_Mask                     (((uint32_t)0x01) << 2)
#define CAN_MCR_TXFP                          CAN_MCR_TXFP_Mask
#define CAN_MCR_SLEEP_Pos                     ((uint32_t)1)                     /* Sleep mode request */
#define CAN_MCR_SLEEP_Mask                    (((uint32_t)0x01) << 1)
#define CAN_MCR_SLEEP                         CAN_MCR_SLEEP_Mask
#define CAN_MCR_INRQ_Pos                      ((uint32_t)0)                     /* Initialization request */
#define CAN_MCR_INRQ_Mask                     (((uint32_t)0x01) << 0)
#define CAN_MCR_INRQ                          CAN_MCR_INRQ_Mask

/************************************** CAN->MSR  ***************************************/
#define CAN_MSR_RX_Pos                        ((uint32_t)11)                    /* CAN Rx signal */
#define CAN_MSR_RX_Mask                       (((uint32_t)0x01) << 11)
#define CAN_MSR_RX                            CAN_MSR_RX_Mask
#define CAN_MSR_SAMP_Pos                      ((uint32_t)10)                    /* Last sample point */
#define CAN_MSR_SAMP_Mask                     (((uint32_t)0x01) << 10)
#define CAN_MSR_SAMP                          CAN_MSR_SAMP_Mask
#define CAN_MSR_RXM_Pos                       ((uint32_t)9)                     /* Receive mode */
#define CAN_MSR_RXM_Mask                      (((uint32_t)0x01) << 9)
#define CAN_MSR_RXM                           CAN_MSR_RXM_Mask
#define CAN_MSR_TXM_Pos                       ((uint32_t)8)                     /* Transmit mode */
#define CAN_MSR_TXM_Mask                      (((uint32_t)0x01) << 8)
#define CAN_MSR_TXM                           CAN_MSR_TXM_Mask
#define CAN_MSR_SLAKI_Pos                     ((uint32_t)4)                     /* Sleep acknowledge interrupt */
#define CAN_MSR_SLAKI_Mask                    (((uint32_t)0x01) << 4)
#define CAN_MSR_SLAKI                         CAN_MSR_SLAKI_Mask
#define CAN_MSR_WKUI_Pos                      ((uint32_t)3)                     /* Wakeup interrupt */
#define CAN_MSR_WKUI_Mask                     (((uint32_t)0x01) << 3)
#define CAN_MSR_WKUI                          CAN_MSR_WKUI_Mask
#define CAN_MSR_ERRI_Pos                      ((uint32_t)2)                     /* Error interrupt */
#define CAN_MSR_ERRI_Mask                     (((uint32_t)0x01) << 2)
#define CAN_MSR_ERRI                          CAN_MSR_ERRI_Mask
#define CAN_MSR_SLAK_Pos                      ((uint32_t)1)                     /* Sleep mode acknowledge */
#define CAN_MSR_SLAK_Mask                     (((uint32_t)0x01) << 1)
#define CAN_MSR_SLAK                          CAN_MSR_SLAK_Mask
#define CAN_MSR_INAK_Pos                      ((uint32_t)0)                     /* Initiation acknowledge */
#define CAN_MSR_INAK_Mask                     (((uint32_t)0x01) << 0)
#define CAN_MSR_INAK                          CAN_MSR_INAK_Mask

/************************************** CAN->TSR  ***************************************/
#define CAN_TSR_LOW2_Pos                      ((uint32_t)31)                    /* Lowest priority flag for mailbox 2 */
#define CAN_TSR_LOW2_Mask                     (((uint32_t)0x01) << 31)
#define CAN_TSR_LOW2                          CAN_TSR_LOW2_Mask
#define CAN_TSR_LOW1_Pos                      ((uint32_t)30)                    /* Lowest priority flag for mailbox 1 */
#define CAN_TSR_LOW1_Mask                     (((uint32_t)0x01) << 30)
#define CAN_TSR_LOW1                          CAN_TSR_LOW1_Mask
#define CAN_TSR_LOW0_Pos                      ((uint32_t)29)                    /* Lowest priority flag for mailbox 0 */
#define CAN_TSR_LOW0_Mask                     (((uint32_t)0x01) << 29)
#define CAN_TSR_LOW0                          CAN_TSR_LOW0_Mask
#define CAN_TSR_TME2_Pos                      ((uint32_t)28)                    /* Transmit mailbox 2 empty */
#define CAN_TSR_TME2_Mask                     (((uint32_t)0x01) << 28)
#define CAN_TSR_TME2                          CAN_TSR_TME2_Mask
#define CAN_TSR_TME1_Pos                      ((uint32_t)27)                    /* Transmit mailbox1 empty */
#define CAN_TSR_TME1_Mask                     (((uint32_t)0x01) << 27)
#define CAN_TSR_TME1                          CAN_TSR_TME1_Mask
#define CAN_TSR_TME0_Pos                      ((uint32_t)26)                    /* Transmit mailbox 0 empty */
#define CAN_TSR_TME0_Mask                     (((uint32_t)0x01) << 26)
#define CAN_TSR_TME0                          CAN_TSR_TME0_Mask
#define CAN_TSR_CODE_Pos                      ((uint32_t)24)                    /* Mailbox code */
#define CAN_TSR_CODE_Mask                     (((uint32_t)0x03) << 24)
#define CAN_TSR_CODE                          CAN_TSR_CODE_Mask
#define CAN_TSR_CODE_0                        (((uint32_t)0x1 << CAN_TSR_CODE_Pos))
#define CAN_TSR_CODE_1                        (((uint32_t)0x2 << CAN_TSR_CODE_Pos))
#define CAN_TSR_ABRQ2_Pos                     ((uint32_t)23)                    /* Abort request for mailbox 2 */
#define CAN_TSR_ABRQ2_Mask                    (((uint32_t)0x01) << 23)
#define CAN_TSR_ABRQ2                         CAN_TSR_ABRQ2_Mask
#define CAN_TSR_TERR2_Pos                     ((uint32_t)19)                    /* Transmission error of mailbox 2 */
#define CAN_TSR_TERR2_Mask                    (((uint32_t)0x01) << 19)
#define CAN_TSR_TERR2                         CAN_TSR_TERR2_Mask
#define CAN_TSR_ALST2_Pos                     ((uint32_t)18)                    /* Arbitration lost for mailbox 2 */
#define CAN_TSR_ALST2_Mask                    (((uint32_t)0x01) << 18)
#define CAN_TSR_ALST2                         CAN_TSR_ALST2_Mask
#define CAN_TSR_TXOK2_Pos                     ((uint32_t)17)                    /* Transmission OK of mailbox 2 */
#define CAN_TSR_TXOK2_Mask                    (((uint32_t)0x01) << 17)
#define CAN_TSR_TXOK2                         CAN_TSR_TXOK2_Mask
#define CAN_TSR_RQCP2_Pos                     ((uint32_t)16)                    /* Request completed mailbox 2 */
#define CAN_TSR_RQCP2_Mask                    (((uint32_t)0x01) << 16)
#define CAN_TSR_RQCP2                         CAN_TSR_RQCP2_Mask
#define CAN_TSR_ABRQ1_Pos                     ((uint32_t)15)                    /* Abort request for mailbox 1 */
#define CAN_TSR_ABRQ1_Mask                    (((uint32_t)0x01) << 15)
#define CAN_TSR_ABRQ1                         CAN_TSR_ABRQ1_Mask
#define CAN_TSR_TERR1_Pos                     ((uint32_t)11)                    /* Transmission error of mailbox 1 */
#define CAN_TSR_TERR1_Mask                    (((uint32_t)0x01) << 11)
#define CAN_TSR_TERR1                         CAN_TSR_TERR1_Mask
#define CAN_TSR_ALST1_Pos                     ((uint32_t)10)                    /* Arbitration lost for mailbox 1 */
#define CAN_TSR_ALST1_Mask                    (((uint32_t)0x01) << 10)
#define CAN_TSR_ALST1                         CAN_TSR_ALST1_Mask
#define CAN_TSR_TXOK1_Pos                     ((uint32_t)9)                     /* Transmission OK of mailbox 1 */
#define CAN_TSR_TXOK1_Mask                    (((uint32_t)0x01) << 9)
#define CAN_TSR_TXOK1                         CAN_TSR_TXOK1_Mask
#define CAN_TSR_RQCP1_Pos                     ((uint32_t)8)                     /* Request completed mailbox 1 */
#define CAN_TSR_RQCP1_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TSR_RQCP1                         CAN_TSR_RQCP1_Mask
#define CAN_TSR_ABRQ0_Pos                     ((uint32_t)7)                     /* Abort request for mailbox 0 */
#define CAN_TSR_ABRQ0_Mask                    (((uint32_t)0x01) << 7)
#define CAN_TSR_ABRQ0                         CAN_TSR_ABRQ0_Mask
#define CAN_TSR_TERR0_Pos                     ((uint32_t)3)                     /* Transmission error of mailbox 0 */
#define CAN_TSR_TERR0_Mask                    (((uint32_t)0x01) << 3)
#define CAN_TSR_TERR0                         CAN_TSR_TERR0_Mask
#define CAN_TSR_ALST0_Pos                     ((uint32_t)2)                     /* Arbitration lost for mailbox 0 */
#define CAN_TSR_ALST0_Mask                    (((uint32_t)0x01) << 2)
#define CAN_TSR_ALST0                         CAN_TSR_ALST0_Mask
#define CAN_TSR_TXOK0_Pos                     ((uint32_t)1)                     /* Transmission OK of mailbox 0 */
#define CAN_TSR_TXOK0_Mask                    (((uint32_t)0x01) << 1)
#define CAN_TSR_TXOK0                         CAN_TSR_TXOK0_Mask
#define CAN_TSR_RQCP0_Pos                     ((uint32_t)0)                     /* Request completed mailbox 0 */
#define CAN_TSR_RQCP0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TSR_RQCP0                         CAN_TSR_RQCP0_Mask

/************************************* CAN->RF0R  ***************************************/
#define CAN_RF0R_RFOM0_Pos                    ((uint32_t)5)                     /* Release FIFO 0 output mailbox */
#define CAN_RF0R_RFOM0_Mask                   (((uint32_t)0x01) << 5)
#define CAN_RF0R_RFOM0                        CAN_RF0R_RFOM0_Mask
#define CAN_RF0R_FOVR0_Pos                    ((uint32_t)4)                     /* FIFO 0 overrun */
#define CAN_RF0R_FOVR0_Mask                   (((uint32_t)0x01) << 4)
#define CAN_RF0R_FOVR0                        CAN_RF0R_FOVR0_Mask
#define CAN_RF0R_FULL0_Pos                    ((uint32_t)3)                     /* FIFO 0 full */
#define CAN_RF0R_FULL0_Mask                   (((uint32_t)0x01) << 3)
#define CAN_RF0R_FULL0                        CAN_RF0R_FULL0_Mask
#define CAN_RF0R_FMP0_Pos                     ((uint32_t)0)                     /* FIFO 0 message pending */
#define CAN_RF0R_FMP0_Mask                    (((uint32_t)0x03) << 0)
#define CAN_RF0R_FMP0                         CAN_RF0R_FMP0_Mask
#define CAN_RF0R_FMP0_0                       (((uint32_t)0x1))
#define CAN_RF0R_FMP0_1                       (((uint32_t)0x2))

/************************************* CAN->RF1R  ***************************************/
#define CAN_RF1R_RFOM1_Pos                    ((uint32_t)5)                     /* Release FIFO1 output mailbox */
#define CAN_RF1R_RFOM1_Mask                   (((uint32_t)0x01) << 5)
#define CAN_RF1R_RFOM1                        CAN_RF1R_RFOM1_Mask
#define CAN_RF1R_FOVR1_Pos                    ((uint32_t)4)                     /* FIFO1 overrun */
#define CAN_RF1R_FOVR1_Mask                   (((uint32_t)0x01) << 4)
#define CAN_RF1R_FOVR1                        CAN_RF1R_FOVR1_Mask
#define CAN_RF1R_FULL1_Pos                    ((uint32_t)3)                     /* FIFO1 full */
#define CAN_RF1R_FULL1_Mask                   (((uint32_t)0x01) << 3)
#define CAN_RF1R_FULL1                        CAN_RF1R_FULL1_Mask
#define CAN_RF1R_FMP1_Pos                     ((uint32_t)0)                     /* FIFO1message pending */
#define CAN_RF1R_FMP1_Mask                    (((uint32_t)0x03) << 0)
#define CAN_RF1R_FMP1                         CAN_RF1R_FMP1_Mask
#define CAN_RF1R_FMP1_0                       (((uint32_t)0x1))
#define CAN_RF1R_FMP1_1                       (((uint32_t)0x2))

/************************************** CAN->IER  ***************************************/
#define CAN_IER_SLKIE_Pos                     ((uint32_t)17)                    /* Sleep interrupt enable */
#define CAN_IER_SLKIE_Mask                    (((uint32_t)0x01) << 17)
#define CAN_IER_SLKIE                         CAN_IER_SLKIE_Mask
#define CAN_IER_WKUIE_Pos                     ((uint32_t)16)                    /* Wakeup interrupt enable */
#define CAN_IER_WKUIE_Mask                    (((uint32_t)0x01) << 16)
#define CAN_IER_WKUIE                         CAN_IER_WKUIE_Mask
#define CAN_IER_ERRIE_Pos                     ((uint32_t)15)                    /* Error interrupt enable */
#define CAN_IER_ERRIE_Mask                    (((uint32_t)0x01) << 15)
#define CAN_IER_ERRIE                         CAN_IER_ERRIE_Mask
#define CAN_IER_LECIE_Pos                     ((uint32_t)11)                    /* Last error code interrupt enable */
#define CAN_IER_LECIE_Mask                    (((uint32_t)0x01) << 11)
#define CAN_IER_LECIE                         CAN_IER_LECIE_Mask
#define CAN_IER_BOFIE_Pos                     ((uint32_t)10)                    /* Bus-off interrupt enable */
#define CAN_IER_BOFIE_Mask                    (((uint32_t)0x01) << 10)
#define CAN_IER_BOFIE                         CAN_IER_BOFIE_Mask
#define CAN_IER_EPVIE_Pos                     ((uint32_t)9)                     /* Error Passive Interrupt Enable */
#define CAN_IER_EPVIE_Mask                    (((uint32_t)0x01) << 9)
#define CAN_IER_EPVIE                         CAN_IER_EPVIE_Mask
#define CAN_IER_EWGIE_Pos                     ((uint32_t)8)                     /* Error warning interrupt enable */
#define CAN_IER_EWGIE_Mask                    (((uint32_t)0x01) << 8)
#define CAN_IER_EWGIE                         CAN_IER_EWGIE_Mask
#define CAN_IER_FOVIE1_Pos                    ((uint32_t)6)                     /* FIFO overrun interrupt enable */
#define CAN_IER_FOVIE1_Mask                   (((uint32_t)0x01) << 6)
#define CAN_IER_FOVIE1                        CAN_IER_FOVIE1_Mask
#define CAN_IER_FFIE1_Pos                     ((uint32_t)5)                     /* FIFO full interrupt enable */
#define CAN_IER_FFIE1_Mask                    (((uint32_t)0x01) << 5)
#define CAN_IER_FFIE1                         CAN_IER_FFIE1_Mask
#define CAN_IER_FMPIE1_Pos                    ((uint32_t)4)                     /* FIFO message pending interrupt enable */
#define CAN_IER_FMPIE1_Mask                   (((uint32_t)0x01) << 4)
#define CAN_IER_FMPIE1                        CAN_IER_FMPIE1_Mask
#define CAN_IER_FOVIE0_Pos                    ((uint32_t)3)                     /* FIFO overrun interrupt enable */
#define CAN_IER_FOVIE0_Mask                   (((uint32_t)0x01) << 3)
#define CAN_IER_FOVIE0                        CAN_IER_FOVIE0_Mask
#define CAN_IER_FFIE0_Pos                     ((uint32_t)2)                     /* FIFO full interrupt enable */
#define CAN_IER_FFIE0_Mask                    (((uint32_t)0x01) << 2)
#define CAN_IER_FFIE0                         CAN_IER_FFIE0_Mask
#define CAN_IER_FMPIE0_Pos                    ((uint32_t)1)                     /* FIFO message pending interrupt enable */
#define CAN_IER_FMPIE0_Mask                   (((uint32_t)0x01) << 1)
#define CAN_IER_FMPIE0                        CAN_IER_FMPIE0_Mask
#define CAN_IER_TMEIE_Pos                     ((uint32_t)0)                     /* Transmit mailbox empty interrupt enable */
#define CAN_IER_TMEIE_Mask                    (((uint32_t)0x01) << 0)
#define CAN_IER_TMEIE                         CAN_IER_TMEIE_Mask

/************************************** CAN->ESR  ***************************************/
#define CAN_ESR_REC_Pos                       ((uint32_t)24)                    /* Receive error counter */
#define CAN_ESR_REC_Mask                      (((uint32_t)0xFF) << 24)
#define CAN_ESR_REC                           CAN_ESR_REC_Mask
#define CAN_ESR_REC_0                         (((uint32_t)0x1 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_1                         (((uint32_t)0x2 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_2                         (((uint32_t)0x4 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_3                         (((uint32_t)0x8 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_4                         (((uint32_t)0x10 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_5                         (((uint32_t)0x20 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_6                         (((uint32_t)0x40 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_7                         (((uint32_t)0x80 << CAN_ESR_REC_Pos))
#define CAN_ESR_TEC_Pos                       ((uint32_t)16)                    /* Least significant byte of the 9-bit transmit error counter */
#define CAN_ESR_TEC_Mask                      (((uint32_t)0xFF) << 16)
#define CAN_ESR_TEC                           CAN_ESR_TEC_Mask
#define CAN_ESR_TEC_0                         (((uint32_t)0x1 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_1                         (((uint32_t)0x2 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_2                         (((uint32_t)0x4 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_3                         (((uint32_t)0x8 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_4                         (((uint32_t)0x10 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_5                         (((uint32_t)0x20 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_6                         (((uint32_t)0x40 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_7                         (((uint32_t)0x80 << CAN_ESR_TEC_Pos))
#define CAN_ESR_LEC_Pos                       ((uint32_t)4)                     /* Last error code */
#define CAN_ESR_LEC_Mask                      (((uint32_t)0x07) << 4)
#define CAN_ESR_LEC                           CAN_ESR_LEC_Mask
#define CAN_ESR_LEC_0                         (((uint32_t)0x1 << CAN_ESR_LEC_Pos))
#define CAN_ESR_LEC_1                         (((uint32_t)0x2 << CAN_ESR_LEC_Pos))
#define CAN_ESR_LEC_2                         (((uint32_t)0x4 << CAN_ESR_LEC_Pos))
#define CAN_ESR_BOFF_Pos                      ((uint32_t)2)                     /* Bus-off flag */
#define CAN_ESR_BOFF_Mask                     (((uint32_t)0x01) << 2)
#define CAN_ESR_BOFF                          CAN_ESR_BOFF_Mask
#define CAN_ESR_EPVF_Pos                      ((uint32_t)1)                     /* Error passive flag */
#define CAN_ESR_EPVF_Mask                     (((uint32_t)0x01) << 1)
#define CAN_ESR_EPVF                          CAN_ESR_EPVF_Mask
#define CAN_ESR_EWGF_Pos                      ((uint32_t)0)                     /* Error warning flag */
#define CAN_ESR_EWGF_Mask                     (((uint32_t)0x01) << 0)
#define CAN_ESR_EWGF                          CAN_ESR_EWGF_Mask

/************************************** CAN->BTR  ***************************************/
#define CAN_BTR_SILM_Pos                      ((uint32_t)31)                    /* Silent mode for debug */
#define CAN_BTR_SILM_Mask                     (((uint32_t)0x01) << 31)
#define CAN_BTR_SILM                          CAN_BTR_SILM_Mask
#define CAN_BTR_LBKM_Pos                      ((uint32_t)30)                    /* Loop back mode for debug */
#define CAN_BTR_LBKM_Mask                     (((uint32_t)0x01) << 30)
#define CAN_BTR_LBKM                          CAN_BTR_LBKM_Mask
#define CAN_BTR_SJW_Pos                       ((uint32_t)24)                    /* Resynchronization jump width */
#define CAN_BTR_SJW_Mask                      (((uint32_t)0x03) << 24)
#define CAN_BTR_SJW                           CAN_BTR_SJW_Mask
#define CAN_BTR_SJW_0                         (((uint32_t)0x1 << CAN_BTR_SJW_Pos))
#define CAN_BTR_SJW_1                         (((uint32_t)0x2 << CAN_BTR_SJW_Pos))
#define CAN_BTR_TS2_Pos                       ((uint32_t)20)                    /* Time segment 2 */
#define CAN_BTR_TS2_Mask                      (((uint32_t)0x07) << 20)
#define CAN_BTR_TS2                           CAN_BTR_TS2_Mask
#define CAN_BTR_TS2_0                         (((uint32_t)0x1 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS2_1                         (((uint32_t)0x2 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS2_2                         (((uint32_t)0x4 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS1_Pos                       ((uint32_t)16)                    /* Time segment 1 */
#define CAN_BTR_TS1_Mask                      (((uint32_t)0x0F) << 16)
#define CAN_BTR_TS1                           CAN_BTR_TS1_Mask
#define CAN_BTR_TS1_0                         (((uint32_t)0x1 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_1                         (((uint32_t)0x2 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_2                         (((uint32_t)0x4 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_3                         (((uint32_t)0x8 << CAN_BTR_TS1_Pos))
#define CAN_BTR_BRP_Pos                       ((uint32_t)0)                     /* Baud rate prescaler */
#define CAN_BTR_BRP_Mask                      (((uint32_t)0x03FF) << 0)
#define CAN_BTR_BRP                           CAN_BTR_BRP_Mask
#define CAN_BTR_BRP_0                         (((uint32_t)0x1))
#define CAN_BTR_BRP_1                         (((uint32_t)0x2))
#define CAN_BTR_BRP_2                         (((uint32_t)0x4))
#define CAN_BTR_BRP_3                         (((uint32_t)0x8))
#define CAN_BTR_BRP_4                         (((uint32_t)0x10))
#define CAN_BTR_BRP_5                         (((uint32_t)0x20))
#define CAN_BTR_BRP_6                         (((uint32_t)0x40))
#define CAN_BTR_BRP_7                         (((uint32_t)0x80))
#define CAN_BTR_BRP_8                         (((uint32_t)0x100))
#define CAN_BTR_BRP_9                         (((uint32_t)0x200))

/************************************* CAN->TI0R  ***************************************/
#define CAN_TI0R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI0R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI0R_STID                         CAN_TI0R_STID_Mask
#define CAN_TI0R_STID_0                       (((uint32_t)0x1 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_1                       (((uint32_t)0x2 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_2                       (((uint32_t)0x4 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_3                       (((uint32_t)0x8 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_4                       (((uint32_t)0x10 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_5                       (((uint32_t)0x20 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_6                       (((uint32_t)0x40 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_7                       (((uint32_t)0x80 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_8                       (((uint32_t)0x100 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_9                       (((uint32_t)0x200 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_10                      (((uint32_t)0x400 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI0R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI0R_EXID                         CAN_TI0R_EXID_Mask
#define CAN_TI0R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI0R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI0R_IDE                          CAN_TI0R_IDE_Mask
#define CAN_TI0R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI0R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI0R_RTR                          CAN_TI0R_RTR_Mask
#define CAN_TI0R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI0R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI0R_TXRQ                         CAN_TI0R_TXRQ_Mask

/************************************* CAN->TI1R  ***************************************/
#define CAN_TI1R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI1R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI1R_STID                         CAN_TI1R_STID_Mask
#define CAN_TI1R_STID_0                       (((uint32_t)0x1 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_1                       (((uint32_t)0x2 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_2                       (((uint32_t)0x4 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_3                       (((uint32_t)0x8 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_4                       (((uint32_t)0x10 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_5                       (((uint32_t)0x20 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_6                       (((uint32_t)0x40 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_7                       (((uint32_t)0x80 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_8                       (((uint32_t)0x100 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_9                       (((uint32_t)0x200 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_10                      (((uint32_t)0x400 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI1R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI1R_EXID                         CAN_TI1R_EXID_Mask
#define CAN_TI1R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI1R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI1R_IDE                          CAN_TI1R_IDE_Mask
#define CAN_TI1R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI1R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI1R_RTR                          CAN_TI1R_RTR_Mask
#define CAN_TI1R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI1R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI1R_TXRQ                         CAN_TI1R_TXRQ_Mask

/************************************* CAN->TI2R  ***************************************/
#define CAN_TI2R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI2R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI2R_STID                         CAN_TI2R_STID_Mask
#define CAN_TI2R_STID_0                       (((uint32_t)0x1 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_1                       (((uint32_t)0x2 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_2                       (((uint32_t)0x4 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_3                       (((uint32_t)0x8 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_4                       (((uint32_t)0x10 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_5                       (((uint32_t)0x20 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_6                       (((uint32_t)0x40 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_7                       (((uint32_t)0x80 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_8                       (((uint32_t)0x100 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_9                       (((uint32_t)0x200 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_10                      (((uint32_t)0x400 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI2R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI2R_EXID                         CAN_TI2R_EXID_Mask
#define CAN_TI2R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI2R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI2R_IDE                          CAN_TI2R_IDE_Mask
#define CAN_TI2R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI2R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI2R_RTR                          CAN_TI2R_RTR_Mask
#define CAN_TI2R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI2R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI2R_TXRQ                         CAN_TI2R_TXRQ_Mask

/************************************* CAN->TDT0R  **************************************/
#define CAN_TDT0R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT0R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT0R_TIME                        CAN_TDT0R_TIME_Mask
#define CAN_TDT0R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT0R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT0R_TGT                         CAN_TDT0R_TGT_Mask
#define CAN_TDT0R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT0R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT0R_DLC                         CAN_TDT0R_DLC_Mask
#define CAN_TDT0R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT0R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT0R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT0R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDT1R  **************************************/
#define CAN_TDT1R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT1R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT1R_TIME                        CAN_TDT1R_TIME_Mask
#define CAN_TDT1R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT1R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT1R_TGT                         CAN_TDT1R_TGT_Mask
#define CAN_TDT1R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT1R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT1R_DLC                         CAN_TDT1R_DLC_Mask
#define CAN_TDT1R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT1R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT1R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT1R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDT2R  **************************************/
#define CAN_TDT2R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT2R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT2R_TIME                        CAN_TDT2R_TIME_Mask
#define CAN_TDT2R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT2R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT2R_TGT                         CAN_TDT2R_TGT_Mask
#define CAN_TDT2R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT2R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT2R_DLC                         CAN_TDT2R_DLC_Mask
#define CAN_TDT2R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT2R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT2R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT2R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDL0R  **************************************/
#define CAN_TDL0R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL0R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL0R_DATA3                       CAN_TDL0R_DATA3_Mask
#define CAN_TDL0R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL0R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL0R_DATA2                       CAN_TDL0R_DATA2_Mask
#define CAN_TDL0R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL0R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL0R_DATA1                       CAN_TDL0R_DATA1_Mask
#define CAN_TDL0R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL0R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL0R_DATA0                       CAN_TDL0R_DATA0_Mask
#define CAN_TDL0R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL0R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL0R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL0R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL0R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL0R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL0R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL0R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDL1R  **************************************/
#define CAN_TDL1R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL1R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL1R_DATA3                       CAN_TDL1R_DATA3_Mask
#define CAN_TDL1R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL1R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL1R_DATA2                       CAN_TDL1R_DATA2_Mask
#define CAN_TDL1R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL1R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL1R_DATA1                       CAN_TDL1R_DATA1_Mask
#define CAN_TDL1R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL1R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL1R_DATA0                       CAN_TDL1R_DATA0_Mask
#define CAN_TDL1R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL1R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL1R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL1R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL1R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL1R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL1R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL1R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDL2R  **************************************/
#define CAN_TDL2R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL2R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL2R_DATA3                       CAN_TDL2R_DATA3_Mask
#define CAN_TDL2R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL2R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL2R_DATA2                       CAN_TDL2R_DATA2_Mask
#define CAN_TDL2R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL2R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL2R_DATA1                       CAN_TDL2R_DATA1_Mask
#define CAN_TDL2R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL2R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL2R_DATA0                       CAN_TDL2R_DATA0_Mask
#define CAN_TDL2R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL2R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL2R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL2R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL2R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL2R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL2R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL2R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDH0R  **************************************/
#define CAN_TDH0R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH0R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH0R_DATA7                       CAN_TDH0R_DATA7_Mask
#define CAN_TDH0R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH0R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH0R_DATA6                       CAN_TDH0R_DATA6_Mask
#define CAN_TDH0R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH0R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH0R_DATA5                       CAN_TDH0R_DATA5_Mask
#define CAN_TDH0R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH0R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH0R_DATA4                       CAN_TDH0R_DATA4_Mask
#define CAN_TDH0R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH0R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH0R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH0R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH0R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH0R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH0R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH0R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->TDH1R  **************************************/
#define CAN_TDH1R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH1R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH1R_DATA7                       CAN_TDH1R_DATA7_Mask
#define CAN_TDH1R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH1R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH1R_DATA6                       CAN_TDH1R_DATA6_Mask
#define CAN_TDH1R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH1R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH1R_DATA5                       CAN_TDH1R_DATA5_Mask
#define CAN_TDH1R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH1R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH1R_DATA4                       CAN_TDH1R_DATA4_Mask
#define CAN_TDH1R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH1R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH1R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH1R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH1R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH1R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH1R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH1R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->TDH2R  **************************************/
#define CAN_TDH2R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH2R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH2R_DATA7                       CAN_TDH2R_DATA7_Mask
#define CAN_TDH2R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH2R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH2R_DATA6                       CAN_TDH2R_DATA6_Mask
#define CAN_TDH2R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH2R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH2R_DATA5                       CAN_TDH2R_DATA5_Mask
#define CAN_TDH2R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH2R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH2R_DATA4                       CAN_TDH2R_DATA4_Mask
#define CAN_TDH2R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH2R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH2R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH2R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH2R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH2R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH2R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH2R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->RI0R  ***************************************/
#define CAN_RI0R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_RI0R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_RI0R_STID                         CAN_RI0R_STID_Mask
#define CAN_RI0R_STID_0                       (((uint32_t)0x1 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_1                       (((uint32_t)0x2 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_2                       (((uint32_t)0x4 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_3                       (((uint32_t)0x8 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_4                       (((uint32_t)0x10 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_5                       (((uint32_t)0x20 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_6                       (((uint32_t)0x40 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_7                       (((uint32_t)0x80 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_8                       (((uint32_t)0x100 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_9                       (((uint32_t)0x200 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_10                      (((uint32_t)0x400 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_RI0R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_RI0R_EXID                         CAN_RI0R_EXID_Mask
#define CAN_RI0R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_RI0R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_RI0R_IDE                          CAN_RI0R_IDE_Mask
#define CAN_RI0R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_RI0R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_RI0R_RTR                          CAN_RI0R_RTR_Mask

/************************************* CAN->RI1R  ***************************************/
#define CAN_RI1R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_RI1R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_RI1R_STID                         CAN_RI1R_STID_Mask
#define CAN_RI1R_STID_0                       (((uint32_t)0x1 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_1                       (((uint32_t)0x2 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_2                       (((uint32_t)0x4 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_3                       (((uint32_t)0x8 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_4                       (((uint32_t)0x10 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_5                       (((uint32_t)0x20 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_6                       (((uint32_t)0x40 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_7                       (((uint32_t)0x80 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_8                       (((uint32_t)0x100 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_9                       (((uint32_t)0x200 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_10                      (((uint32_t)0x400 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_RI1R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_RI1R_EXID                         CAN_RI1R_EXID_Mask
#define CAN_RI1R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_RI1R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_RI1R_IDE                          CAN_RI1R_IDE_Mask
#define CAN_RI1R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_RI1R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_RI1R_RTR                          CAN_RI1R_RTR_Mask

/************************************* CAN->RDT0R  **************************************/
#define CAN_RDT0R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_RDT0R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_RDT0R_TIME                        CAN_RDT0R_TIME_Mask
#define CAN_RDT0R_FMI_Pos                     ((uint32_t)8)                     /* Filter match index */
#define CAN_RDT0R_FMI_Mask                    (((uint32_t)0xFF) << 8)
#define CAN_RDT0R_FMI                         CAN_RDT0R_FMI_Mask
#define CAN_RDT0R_FMI_0                       (((uint32_t)0x1 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_1                       (((uint32_t)0x2 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_2                       (((uint32_t)0x4 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_3                       (((uint32_t)0x8 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_4                       (((uint32_t)0x10 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_5                       (((uint32_t)0x20 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_6                       (((uint32_t)0x40 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_7                       (((uint32_t)0x80 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_RDT0R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_RDT0R_DLC                         CAN_RDT0R_DLC_Mask
#define CAN_RDT0R_DLC_0                       (((uint32_t)0x1))
#define CAN_RDT0R_DLC_1                       (((uint32_t)0x2))
#define CAN_RDT0R_DLC_2                       (((uint32_t)0x4))
#define CAN_RDT0R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->RDT1R  **************************************/
#define CAN_RDT1R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_RDT1R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_RDT1R_TIME                        CAN_RDT1R_TIME_Mask
#define CAN_RDT1R_FMI_Pos                     ((uint32_t)8)                     /* Filter match index */
#define CAN_RDT1R_FMI_Mask                    (((uint32_t)0xFF) << 8)
#define CAN_RDT1R_FMI                         CAN_RDT1R_FMI_Mask
#define CAN_RDT1R_FMI_0                       (((uint32_t)0x1 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_1                       (((uint32_t)0x2 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_2                       (((uint32_t)0x4 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_3                       (((uint32_t)0x8 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_4                       (((uint32_t)0x10 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_5                       (((uint32_t)0x20 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_6                       (((uint32_t)0x40 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_7                       (((uint32_t)0x80 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_RDT1R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_RDT1R_DLC                         CAN_RDT1R_DLC_Mask
#define CAN_RDT1R_DLC_0                       (((uint32_t)0x1))
#define CAN_RDT1R_DLC_1                       (((uint32_t)0x2))
#define CAN_RDT1R_DLC_2                       (((uint32_t)0x4))
#define CAN_RDT1R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->RDL0R  **************************************/
#define CAN_RDL0R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_RDL0R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDL0R_DATA3                       CAN_RDL0R_DATA3_Mask
#define CAN_RDL0R_DATA3_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_RDL0R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDL0R_DATA2                       CAN_RDL0R_DATA2_Mask
#define CAN_RDL0R_DATA2_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_RDL0R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDL0R_DATA1                       CAN_RDL0R_DATA1_Mask
#define CAN_RDL0R_DATA1_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_RDL0R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDL0R_DATA0                       CAN_RDL0R_DATA0_Mask
#define CAN_RDL0R_DATA0_0                     (((uint32_t)0x1))
#define CAN_RDL0R_DATA0_1                     (((uint32_t)0x2))
#define CAN_RDL0R_DATA0_2                     (((uint32_t)0x4))
#define CAN_RDL0R_DATA0_3                     (((uint32_t)0x8))
#define CAN_RDL0R_DATA0_4                     (((uint32_t)0x10))
#define CAN_RDL0R_DATA0_5                     (((uint32_t)0x20))
#define CAN_RDL0R_DATA0_6                     (((uint32_t)0x40))
#define CAN_RDL0R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->RDL1R  **************************************/
#define CAN_RDL1R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_RDL1R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDL1R_DATA3                       CAN_RDL1R_DATA3_Mask
#define CAN_RDL1R_DATA3_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_RDL1R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDL1R_DATA2                       CAN_RDL1R_DATA2_Mask
#define CAN_RDL1R_DATA2_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_RDL1R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDL1R_DATA1                       CAN_RDL1R_DATA1_Mask
#define CAN_RDL1R_DATA1_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_RDL1R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDL1R_DATA0                       CAN_RDL1R_DATA0_Mask
#define CAN_RDL1R_DATA0_0                     (((uint32_t)0x1))
#define CAN_RDL1R_DATA0_1                     (((uint32_t)0x2))
#define CAN_RDL1R_DATA0_2                     (((uint32_t)0x4))
#define CAN_RDL1R_DATA0_3                     (((uint32_t)0x8))
#define CAN_RDL1R_DATA0_4                     (((uint32_t)0x10))
#define CAN_RDL1R_DATA0_5                     (((uint32_t)0x20))
#define CAN_RDL1R_DATA0_6                     (((uint32_t)0x40))
#define CAN_RDL1R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->RDH0R  **************************************/
#define CAN_RDH0R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_RDH0R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDH0R_DATA7                       CAN_RDH0R_DATA7_Mask
#define CAN_RDH0R_DATA7_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_RDH0R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDH0R_DATA6                       CAN_RDH0R_DATA6_Mask
#define CAN_RDH0R_DATA6_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_RDH0R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDH0R_DATA5                       CAN_RDH0R_DATA5_Mask
#define CAN_RDH0R_DATA5_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_RDH0R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDH0R_DATA4                       CAN_RDH0R_DATA4_Mask
#define CAN_RDH0R_DATA4_0                     (((uint32_t)0x1))
#define CAN_RDH0R_DATA4_1                     (((uint32_t)0x2))
#define CAN_RDH0R_DATA4_2                     (((uint32_t)0x4))
#define CAN_RDH0R_DATA4_3                     (((uint32_t)0x8))
#define CAN_RDH0R_DATA4_4                     (((uint32_t)0x10))
#define CAN_RDH0R_DATA4_5                     (((uint32_t)0x20))
#define CAN_RDH0R_DATA4_6                     (((uint32_t)0x40))
#define CAN_RDH0R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->RDH1R  **************************************/
#define CAN_RDH1R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_RDH1R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDH1R_DATA7                       CAN_RDH1R_DATA7_Mask
#define CAN_RDH1R_DATA7_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_RDH1R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDH1R_DATA6                       CAN_RDH1R_DATA6_Mask
#define CAN_RDH1R_DATA6_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_RDH1R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDH1R_DATA5                       CAN_RDH1R_DATA5_Mask
#define CAN_RDH1R_DATA5_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_RDH1R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDH1R_DATA4                       CAN_RDH1R_DATA4_Mask
#define CAN_RDH1R_DATA4_0                     (((uint32_t)0x1))
#define CAN_RDH1R_DATA4_1                     (((uint32_t)0x2))
#define CAN_RDH1R_DATA4_2                     (((uint32_t)0x4))
#define CAN_RDH1R_DATA4_3                     (((uint32_t)0x8))
#define CAN_RDH1R_DATA4_4                     (((uint32_t)0x10))
#define CAN_RDH1R_DATA4_5                     (((uint32_t)0x20))
#define CAN_RDH1R_DATA4_6                     (((uint32_t)0x40))
#define CAN_RDH1R_DATA4_7                     (((uint32_t)0x80))

/************************************** CAN->FMR  ***************************************/
#define CAN_FMR_FINIT_Pos                     ((uint32_t)0)                     /* Filter initiate mode */
#define CAN_FMR_FINIT_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FMR_FINIT                         CAN_FMR_FINIT_Mask

/************************************* CAN->FM1R  ***************************************/
#define CAN_FM1R_FBM0_Pos                     ((uint32_t)0)                     /* Filter mode */
#define CAN_FM1R_FBM0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FM1R_FBM0                         CAN_FM1R_FBM0_Mask
#define CAN_FM1R_FBM1_Pos                     ((uint32_t)1)                     /* Filter mode */
#define CAN_FM1R_FBM1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_FM1R_FBM1                         CAN_FM1R_FBM1_Mask
#define CAN_FM1R_FBM2_Pos                     ((uint32_t)2)                     /* Filter mode */
#define CAN_FM1R_FBM2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_FM1R_FBM2                         CAN_FM1R_FBM2_Mask
#define CAN_FM1R_FBM3_Pos                     ((uint32_t)3)                     /* Filter mode */
#define CAN_FM1R_FBM3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_FM1R_FBM3                         CAN_FM1R_FBM3_Mask
#define CAN_FM1R_FBM4_Pos                     ((uint32_t)4)                     /* Filter mode */
#define CAN_FM1R_FBM4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_FM1R_FBM4                         CAN_FM1R_FBM4_Mask
#define CAN_FM1R_FBM5_Pos                     ((uint32_t)5)                     /* Filter mode */
#define CAN_FM1R_FBM5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_FM1R_FBM5                         CAN_FM1R_FBM5_Mask
#define CAN_FM1R_FBM6_Pos                     ((uint32_t)6)                     /* Filter mode */
#define CAN_FM1R_FBM6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_FM1R_FBM6                         CAN_FM1R_FBM6_Mask
#define CAN_FM1R_FBM7_Pos                     ((uint32_t)7)                     /* Filter mode */
#define CAN_FM1R_FBM7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_FM1R_FBM7                         CAN_FM1R_FBM7_Mask
#define CAN_FM1R_FBM8_Pos                     ((uint32_t)8)                     /* Filter mode */
#define CAN_FM1R_FBM8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_FM1R_FBM8                         CAN_FM1R_FBM8_Mask
#define CAN_FM1R_FBM9_Pos                     ((uint32_t)9)                     /* Filter mode */
#define CAN_FM1R_FBM9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_FM1R_FBM9                         CAN_FM1R_FBM9_Mask
#define CAN_FM1R_FBM10_Pos                    ((uint32_t)10)                    /* Filter mode */
#define CAN_FM1R_FBM10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_FM1R_FBM10                        CAN_FM1R_FBM10_Mask
#define CAN_FM1R_FBM11_Pos                    ((uint32_t)11)                    /* Filter mode */
#define CAN_FM1R_FBM11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_FM1R_FBM11                        CAN_FM1R_FBM11_Mask
#define CAN_FM1R_FBM12_Pos                    ((uint32_t)12)                    /* Filter mode */
#define CAN_FM1R_FBM12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_FM1R_FBM12                        CAN_FM1R_FBM12_Mask
#define CAN_FM1R_FBM13_Pos                    ((uint32_t)13)                    /* Filter mode */
#define CAN_FM1R_FBM13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_FM1R_FBM13                        CAN_FM1R_FBM13_Mask

/************************************* CAN->FS1R  ***************************************/
#define CAN_FS1R_FSC0_Pos                     ((uint32_t)0)                     /* Filter scale configuration */
#define CAN_FS1R_FSC0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FS1R_FSC0                         CAN_FS1R_FSC0_Mask
#define CAN_FS1R_FSC1_Pos                     ((uint32_t)1)                     /* Filter scale configuration */
#define CAN_FS1R_FSC1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_FS1R_FSC1                         CAN_FS1R_FSC1_Mask
#define CAN_FS1R_FSC2_Pos                     ((uint32_t)2)                     /* Filter scale configuration */
#define CAN_FS1R_FSC2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_FS1R_FSC2                         CAN_FS1R_FSC2_Mask
#define CAN_FS1R_FSC3_Pos                     ((uint32_t)3)                     /* Filter scale configuration */
#define CAN_FS1R_FSC3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_FS1R_FSC3                         CAN_FS1R_FSC3_Mask
#define CAN_FS1R_FSC4_Pos                     ((uint32_t)4)                     /* Filter scale configuration */
#define CAN_FS1R_FSC4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_FS1R_FSC4                         CAN_FS1R_FSC4_Mask
#define CAN_FS1R_FSC5_Pos                     ((uint32_t)5)                     /* Filter scale configuration */
#define CAN_FS1R_FSC5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_FS1R_FSC5                         CAN_FS1R_FSC5_Mask
#define CAN_FS1R_FSC6_Pos                     ((uint32_t)6)                     /* Filter scale configuration */
#define CAN_FS1R_FSC6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_FS1R_FSC6                         CAN_FS1R_FSC6_Mask
#define CAN_FS1R_FSC7_Pos                     ((uint32_t)7)                     /* Filter scale configuration */
#define CAN_FS1R_FSC7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_FS1R_FSC7                         CAN_FS1R_FSC7_Mask
#define CAN_FS1R_FSC8_Pos                     ((uint32_t)8)                     /* Filter scale configuration */
#define CAN_FS1R_FSC8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_FS1R_FSC8                         CAN_FS1R_FSC8_Mask
#define CAN_FS1R_FSC9_Pos                     ((uint32_t)9)                     /* Filter scale configuration */
#define CAN_FS1R_FSC9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_FS1R_FSC9                         CAN_FS1R_FSC9_Mask
#define CAN_FS1R_FSC10_Pos                    ((uint32_t)10)                    /* Filter scale configuration */
#define CAN_FS1R_FSC10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_FS1R_FSC10                        CAN_FS1R_FSC10_Mask
#define CAN_FS1R_FSC11_Pos                    ((uint32_t)11)                    /* Filter scale configuration */
#define CAN_FS1R_FSC11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_FS1R_FSC11                        CAN_FS1R_FSC11_Mask
#define CAN_FS1R_FSC12_Pos                    ((uint32_t)12)                    /* Filter scale configuration */
#define CAN_FS1R_FSC12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_FS1R_FSC12                        CAN_FS1R_FSC12_Mask
#define CAN_FS1R_FSC13_Pos                    ((uint32_t)13)                    /* Filter scale configuration */
#define CAN_FS1R_FSC13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_FS1R_FSC13                        CAN_FS1R_FSC13_Mask

/************************************* CAN->FFA1R  **************************************/
#define CAN_FFA1R_FFA0_Pos                    ((uint32_t)0)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA0_Mask                   (((uint32_t)0x01) << 0)
#define CAN_FFA1R_FFA0                        CAN_FFA1R_FFA0_Mask
#define CAN_FFA1R_FFA1_Pos                    ((uint32_t)1)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA1_Mask                   (((uint32_t)0x01) << 1)
#define CAN_FFA1R_FFA1                        CAN_FFA1R_FFA1_Mask
#define CAN_FFA1R_FFA2_Pos                    ((uint32_t)2)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA2_Mask                   (((uint32_t)0x01) << 2)
#define CAN_FFA1R_FFA2                        CAN_FFA1R_FFA2_Mask
#define CAN_FFA1R_FFA3_Pos                    ((uint32_t)3)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA3_Mask                   (((uint32_t)0x01) << 3)
#define CAN_FFA1R_FFA3                        CAN_FFA1R_FFA3_Mask
#define CAN_FFA1R_FFA4_Pos                    ((uint32_t)4)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA4_Mask                   (((uint32_t)0x01) << 4)
#define CAN_FFA1R_FFA4                        CAN_FFA1R_FFA4_Mask
#define CAN_FFA1R_FFA5_Pos                    ((uint32_t)5)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA5_Mask                   (((uint32_t)0x01) << 5)
#define CAN_FFA1R_FFA5                        CAN_FFA1R_FFA5_Mask
#define CAN_FFA1R_FFA6_Pos                    ((uint32_t)6)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA6_Mask                   (((uint32_t)0x01) << 6)
#define CAN_FFA1R_FFA6                        CAN_FFA1R_FFA6_Mask
#define CAN_FFA1R_FFA7_Pos                    ((uint32_t)7)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA7_Mask                   (((uint32_t)0x01) << 7)
#define CAN_FFA1R_FFA7                        CAN_FFA1R_FFA7_Mask
#define CAN_FFA1R_FFA8_Pos                    ((uint32_t)8)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA8_Mask                   (((uint32_t)0x01) << 8)
#define CAN_FFA1R_FFA8                        CAN_FFA1R_FFA8_Mask
#define CAN_FFA1R_FFA9_Pos                    ((uint32_t)9)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA9_Mask                   (((uint32_t)0x01) << 9)
#define CAN_FFA1R_FFA9                        CAN_FFA1R_FFA9_Mask
#define CAN_FFA1R_FFA10_Pos                   ((uint32_t)10)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA10_Mask                  (((uint32_t)0x01) << 10)
#define CAN_FFA1R_FFA10                       CAN_FFA1R_FFA10_Mask
#define CAN_FFA1R_FFA11_Pos                   ((uint32_t)11)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA11_Mask                  (((uint32_t)0x01) << 11)
#define CAN_FFA1R_FFA11                       CAN_FFA1R_FFA11_Mask
#define CAN_FFA1R_FFA12_Pos                   ((uint32_t)12)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA12_Mask                  (((uint32_t)0x01) << 12)
#define CAN_FFA1R_FFA12                       CAN_FFA1R_FFA12_Mask
#define CAN_FFA1R_FFA13_Pos                   ((uint32_t)13)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA13_Mask                  (((uint32_t)0x01) << 13)
#define CAN_FFA1R_FFA13                       CAN_FFA1R_FFA13_Mask

/************************************* CAN->FA1R  ***************************************/
#define CAN_FA1R_FACT0_Pos                    ((uint32_t)0)                     /* Filter activate */
#define CAN_FA1R_FACT0_Mask                   (((uint32_t)0x01) << 0)
#define CAN_FA1R_FACT0                        CAN_FA1R_FACT0_Mask
#define CAN_FA1R_FACT1_Pos                    ((uint32_t)1)                     /* Filter activate */
#define CAN_FA1R_FACT1_Mask                   (((uint32_t)0x01) << 1)
#define CAN_FA1R_FACT1                        CAN_FA1R_FACT1_Mask
#define CAN_FA1R_FACT2_Pos                    ((uint32_t)2)                     /* Filter activate */
#define CAN_FA1R_FACT2_Mask                   (((uint32_t)0x01) << 2)
#define CAN_FA1R_FACT2                        CAN_FA1R_FACT2_Mask
#define CAN_FA1R_FACT3_Pos                    ((uint32_t)3)                     /* Filter activate */
#define CAN_FA1R_FACT3_Mask                   (((uint32_t)0x01) << 3)
#define CAN_FA1R_FACT3                        CAN_FA1R_FACT3_Mask
#define CAN_FA1R_FACT4_Pos                    ((uint32_t)4)                     /* Filter activate */
#define CAN_FA1R_FACT4_Mask                   (((uint32_t)0x01) << 4)
#define CAN_FA1R_FACT4                        CAN_FA1R_FACT4_Mask
#define CAN_FA1R_FACT5_Pos                    ((uint32_t)5)                     /* Filter activate */
#define CAN_FA1R_FACT5_Mask                   (((uint32_t)0x01) << 5)
#define CAN_FA1R_FACT5                        CAN_FA1R_FACT5_Mask
#define CAN_FA1R_FACT6_Pos                    ((uint32_t)6)                     /* Filter activate */
#define CAN_FA1R_FACT6_Mask                   (((uint32_t)0x01) << 6)
#define CAN_FA1R_FACT6                        CAN_FA1R_FACT6_Mask
#define CAN_FA1R_FACT7_Pos                    ((uint32_t)7)                     /* Filter activate */
#define CAN_FA1R_FACT7_Mask                   (((uint32_t)0x01) << 7)
#define CAN_FA1R_FACT7                        CAN_FA1R_FACT7_Mask
#define CAN_FA1R_FACT8_Pos                    ((uint32_t)8)                     /* Filter activate */
#define CAN_FA1R_FACT8_Mask                   (((uint32_t)0x01) << 8)
#define CAN_FA1R_FACT8                        CAN_FA1R_FACT8_Mask
#define CAN_FA1R_FACT9_Pos                    ((uint32_t)9)                     /* Filter activate */
#define CAN_FA1R_FACT9_Mask                   (((uint32_t)0x01) << 9)
#define CAN_FA1R_FACT9                        CAN_FA1R_FACT9_Mask
#define CAN_FA1R_FACT10_Pos                   ((uint32_t)10)                    /* Filter activate */
#define CAN_FA1R_FACT10_Mask                  (((uint32_t)0x01) << 10)
#define CAN_FA1R_FACT10                       CAN_FA1R_FACT10_Mask
#define CAN_FA1R_FACT11_Pos                   ((uint32_t)11)                    /* Filter activate */
#define CAN_FA1R_FACT11_Mask                  (((uint32_t)0x01) << 11)
#define CAN_FA1R_FACT11                       CAN_FA1R_FACT11_Mask
#define CAN_FA1R_FACT12_Pos                   ((uint32_t)12)                    /* Filter activate */
#define CAN_FA1R_FACT12_Mask                  (((uint32_t)0x01) << 12)
#define CAN_FA1R_FACT12                       CAN_FA1R_FACT12_Mask
#define CAN_FA1R_FACT13_Pos                   ((uint32_t)13)                    /* Filter activate */
#define CAN_FA1R_FACT13_Mask                  (((uint32_t)0x01) << 13)
#define CAN_FA1R_FACT13                       CAN_FA1R_FACT13_Mask

/************************************* CAN->F0R1  ***************************************/
#define CAN_F0R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F0R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F0R1_FB0                          CAN_F0R1_FB0_Mask
#define CAN_F0R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F0R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F0R1_FB1                          CAN_F0R1_FB1_Mask
#define CAN_F0R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F0R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F0R1_FB2                          CAN_F0R1_FB2_Mask
#define CAN_F0R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F0R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F0R1_FB3                          CAN_F0R1_FB3_Mask
#define CAN_F0R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F0R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F0R1_FB4                          CAN_F0R1_FB4_Mask
#define CAN_F0R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F0R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F0R1_FB5                          CAN_F0R1_FB5_Mask
#define CAN_F0R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F0R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F0R1_FB6                          CAN_F0R1_FB6_Mask
#define CAN_F0R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F0R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F0R1_FB7                          CAN_F0R1_FB7_Mask
#define CAN_F0R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F0R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F0R1_FB8                          CAN_F0R1_FB8_Mask
#define CAN_F0R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F0R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F0R1_FB9                          CAN_F0R1_FB9_Mask
#define CAN_F0R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F0R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F0R1_FB10                         CAN_F0R1_FB10_Mask
#define CAN_F0R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F0R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F0R1_FB11                         CAN_F0R1_FB11_Mask
#define CAN_F0R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F0R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F0R1_FB12                         CAN_F0R1_FB12_Mask
#define CAN_F0R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F0R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F0R1_FB13                         CAN_F0R1_FB13_Mask
#define CAN_F0R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F0R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F0R1_FB14                         CAN_F0R1_FB14_Mask
#define CAN_F0R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F0R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F0R1_FB15                         CAN_F0R1_FB15_Mask
#define CAN_F0R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F0R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F0R1_FB16                         CAN_F0R1_FB16_Mask
#define CAN_F0R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F0R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F0R1_FB17                         CAN_F0R1_FB17_Mask
#define CAN_F0R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F0R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F0R1_FB18                         CAN_F0R1_FB18_Mask
#define CAN_F0R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F0R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F0R1_FB19                         CAN_F0R1_FB19_Mask
#define CAN_F0R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F0R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F0R1_FB20                         CAN_F0R1_FB20_Mask
#define CAN_F0R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F0R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F0R1_FB21                         CAN_F0R1_FB21_Mask
#define CAN_F0R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F0R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F0R1_FB22                         CAN_F0R1_FB22_Mask
#define CAN_F0R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F0R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F0R1_FB23                         CAN_F0R1_FB23_Mask
#define CAN_F0R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F0R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F0R1_FB24                         CAN_F0R1_FB24_Mask
#define CAN_F0R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F0R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F0R1_FB25                         CAN_F0R1_FB25_Mask
#define CAN_F0R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F0R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F0R1_FB26                         CAN_F0R1_FB26_Mask
#define CAN_F0R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F0R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F0R1_FB27                         CAN_F0R1_FB27_Mask
#define CAN_F0R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F0R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F0R1_FB28                         CAN_F0R1_FB28_Mask
#define CAN_F0R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F0R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F0R1_FB29                         CAN_F0R1_FB29_Mask
#define CAN_F0R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F0R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F0R1_FB30                         CAN_F0R1_FB30_Mask
#define CAN_F0R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F0R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F0R1_FB31                         CAN_F0R1_FB31_Mask

/************************************* CAN->F0R2  ***************************************/
#define CAN_F0R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F0R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F0R2_FB0                          CAN_F0R2_FB0_Mask
#define CAN_F0R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F0R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F0R2_FB1                          CAN_F0R2_FB1_Mask
#define CAN_F0R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F0R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F0R2_FB2                          CAN_F0R2_FB2_Mask
#define CAN_F0R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F0R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F0R2_FB3                          CAN_F0R2_FB3_Mask
#define CAN_F0R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F0R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F0R2_FB4                          CAN_F0R2_FB4_Mask
#define CAN_F0R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F0R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F0R2_FB5                          CAN_F0R2_FB5_Mask
#define CAN_F0R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F0R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F0R2_FB6                          CAN_F0R2_FB6_Mask
#define CAN_F0R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F0R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F0R2_FB7                          CAN_F0R2_FB7_Mask
#define CAN_F0R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F0R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F0R2_FB8                          CAN_F0R2_FB8_Mask
#define CAN_F0R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F0R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F0R2_FB9                          CAN_F0R2_FB9_Mask
#define CAN_F0R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F0R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F0R2_FB10                         CAN_F0R2_FB10_Mask
#define CAN_F0R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F0R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F0R2_FB11                         CAN_F0R2_FB11_Mask
#define CAN_F0R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F0R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F0R2_FB12                         CAN_F0R2_FB12_Mask
#define CAN_F0R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F0R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F0R2_FB13                         CAN_F0R2_FB13_Mask
#define CAN_F0R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F0R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F0R2_FB14                         CAN_F0R2_FB14_Mask
#define CAN_F0R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F0R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F0R2_FB15                         CAN_F0R2_FB15_Mask
#define CAN_F0R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F0R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F0R2_FB16                         CAN_F0R2_FB16_Mask
#define CAN_F0R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F0R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F0R2_FB17                         CAN_F0R2_FB17_Mask
#define CAN_F0R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F0R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F0R2_FB18                         CAN_F0R2_FB18_Mask
#define CAN_F0R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F0R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F0R2_FB19                         CAN_F0R2_FB19_Mask
#define CAN_F0R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F0R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F0R2_FB20                         CAN_F0R2_FB20_Mask
#define CAN_F0R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F0R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F0R2_FB21                         CAN_F0R2_FB21_Mask
#define CAN_F0R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F0R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F0R2_FB22                         CAN_F0R2_FB22_Mask
#define CAN_F0R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F0R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F0R2_FB23                         CAN_F0R2_FB23_Mask
#define CAN_F0R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F0R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F0R2_FB24                         CAN_F0R2_FB24_Mask
#define CAN_F0R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F0R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F0R2_FB25                         CAN_F0R2_FB25_Mask
#define CAN_F0R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F0R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F0R2_FB26                         CAN_F0R2_FB26_Mask
#define CAN_F0R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F0R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F0R2_FB27                         CAN_F0R2_FB27_Mask
#define CAN_F0R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F0R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F0R2_FB28                         CAN_F0R2_FB28_Mask
#define CAN_F0R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F0R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F0R2_FB29                         CAN_F0R2_FB29_Mask
#define CAN_F0R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F0R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F0R2_FB30                         CAN_F0R2_FB30_Mask
#define CAN_F0R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F0R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F0R2_FB31                         CAN_F0R2_FB31_Mask

/************************************* CAN->F1R1  ***************************************/
#define CAN_F1R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F1R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F1R1_FB0                          CAN_F1R1_FB0_Mask
#define CAN_F1R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F1R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F1R1_FB1                          CAN_F1R1_FB1_Mask
#define CAN_F1R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F1R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F1R1_FB2                          CAN_F1R1_FB2_Mask
#define CAN_F1R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F1R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F1R1_FB3                          CAN_F1R1_FB3_Mask
#define CAN_F1R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F1R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F1R1_FB4                          CAN_F1R1_FB4_Mask
#define CAN_F1R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F1R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F1R1_FB5                          CAN_F1R1_FB5_Mask
#define CAN_F1R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F1R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F1R1_FB6                          CAN_F1R1_FB6_Mask
#define CAN_F1R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F1R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F1R1_FB7                          CAN_F1R1_FB7_Mask
#define CAN_F1R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F1R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F1R1_FB8                          CAN_F1R1_FB8_Mask
#define CAN_F1R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F1R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F1R1_FB9                          CAN_F1R1_FB9_Mask
#define CAN_F1R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F1R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F1R1_FB10                         CAN_F1R1_FB10_Mask
#define CAN_F1R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F1R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F1R1_FB11                         CAN_F1R1_FB11_Mask
#define CAN_F1R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F1R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F1R1_FB12                         CAN_F1R1_FB12_Mask
#define CAN_F1R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F1R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F1R1_FB13                         CAN_F1R1_FB13_Mask
#define CAN_F1R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F1R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F1R1_FB14                         CAN_F1R1_FB14_Mask
#define CAN_F1R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F1R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F1R1_FB15                         CAN_F1R1_FB15_Mask
#define CAN_F1R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F1R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F1R1_FB16                         CAN_F1R1_FB16_Mask
#define CAN_F1R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F1R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F1R1_FB17                         CAN_F1R1_FB17_Mask
#define CAN_F1R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F1R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F1R1_FB18                         CAN_F1R1_FB18_Mask
#define CAN_F1R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F1R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F1R1_FB19                         CAN_F1R1_FB19_Mask
#define CAN_F1R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F1R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F1R1_FB20                         CAN_F1R1_FB20_Mask
#define CAN_F1R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F1R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F1R1_FB21                         CAN_F1R1_FB21_Mask
#define CAN_F1R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F1R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F1R1_FB22                         CAN_F1R1_FB22_Mask
#define CAN_F1R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F1R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F1R1_FB23                         CAN_F1R1_FB23_Mask
#define CAN_F1R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F1R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F1R1_FB24                         CAN_F1R1_FB24_Mask
#define CAN_F1R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F1R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F1R1_FB25                         CAN_F1R1_FB25_Mask
#define CAN_F1R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F1R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F1R1_FB26                         CAN_F1R1_FB26_Mask
#define CAN_F1R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F1R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F1R1_FB27                         CAN_F1R1_FB27_Mask
#define CAN_F1R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F1R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F1R1_FB28                         CAN_F1R1_FB28_Mask
#define CAN_F1R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F1R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F1R1_FB29                         CAN_F1R1_FB29_Mask
#define CAN_F1R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F1R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F1R1_FB30                         CAN_F1R1_FB30_Mask
#define CAN_F1R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F1R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F1R1_FB31                         CAN_F1R1_FB31_Mask

/************************************* CAN->F1R2  ***************************************/
#define CAN_F1R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F1R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F1R2_FB0                          CAN_F1R2_FB0_Mask
#define CAN_F1R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F1R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F1R2_FB1                          CAN_F1R2_FB1_Mask
#define CAN_F1R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F1R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F1R2_FB2                          CAN_F1R2_FB2_Mask
#define CAN_F1R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F1R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F1R2_FB3                          CAN_F1R2_FB3_Mask
#define CAN_F1R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F1R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F1R2_FB4                          CAN_F1R2_FB4_Mask
#define CAN_F1R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F1R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F1R2_FB5                          CAN_F1R2_FB5_Mask
#define CAN_F1R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F1R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F1R2_FB6                          CAN_F1R2_FB6_Mask
#define CAN_F1R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F1R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F1R2_FB7                          CAN_F1R2_FB7_Mask
#define CAN_F1R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F1R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F1R2_FB8                          CAN_F1R2_FB8_Mask
#define CAN_F1R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F1R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F1R2_FB9                          CAN_F1R2_FB9_Mask
#define CAN_F1R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F1R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F1R2_FB10                         CAN_F1R2_FB10_Mask
#define CAN_F1R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F1R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F1R2_FB11                         CAN_F1R2_FB11_Mask
#define CAN_F1R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F1R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F1R2_FB12                         CAN_F1R2_FB12_Mask
#define CAN_F1R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F1R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F1R2_FB13                         CAN_F1R2_FB13_Mask
#define CAN_F1R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F1R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F1R2_FB14                         CAN_F1R2_FB14_Mask
#define CAN_F1R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F1R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F1R2_FB15                         CAN_F1R2_FB15_Mask
#define CAN_F1R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F1R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F1R2_FB16                         CAN_F1R2_FB16_Mask
#define CAN_F1R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F1R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F1R2_FB17                         CAN_F1R2_FB17_Mask
#define CAN_F1R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F1R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F1R2_FB18                         CAN_F1R2_FB18_Mask
#define CAN_F1R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F1R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F1R2_FB19                         CAN_F1R2_FB19_Mask
#define CAN_F1R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F1R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F1R2_FB20                         CAN_F1R2_FB20_Mask
#define CAN_F1R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F1R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F1R2_FB21                         CAN_F1R2_FB21_Mask
#define CAN_F1R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F1R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F1R2_FB22                         CAN_F1R2_FB22_Mask
#define CAN_F1R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F1R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F1R2_FB23                         CAN_F1R2_FB23_Mask
#define CAN_F1R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F1R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F1R2_FB24                         CAN_F1R2_FB24_Mask
#define CAN_F1R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F1R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F1R2_FB25                         CAN_F1R2_FB25_Mask
#define CAN_F1R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F1R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F1R2_FB26                         CAN_F1R2_FB26_Mask
#define CAN_F1R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F1R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F1R2_FB27                         CAN_F1R2_FB27_Mask
#define CAN_F1R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F1R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F1R2_FB28                         CAN_F1R2_FB28_Mask
#define CAN_F1R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F1R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F1R2_FB29                         CAN_F1R2_FB29_Mask
#define CAN_F1R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F1R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F1R2_FB30                         CAN_F1R2_FB30_Mask
#define CAN_F1R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F1R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F1R2_FB31                         CAN_F1R2_FB31_Mask

/************************************* CAN->F2R1  ***************************************/
#define CAN_F2R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F2R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F2R1_FB0                          CAN_F2R1_FB0_Mask
#define CAN_F2R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F2R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F2R1_FB1                          CAN_F2R1_FB1_Mask
#define CAN_F2R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F2R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F2R1_FB2                          CAN_F2R1_FB2_Mask
#define CAN_F2R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F2R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F2R1_FB3                          CAN_F2R1_FB3_Mask
#define CAN_F2R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F2R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F2R1_FB4                          CAN_F2R1_FB4_Mask
#define CAN_F2R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F2R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F2R1_FB5                          CAN_F2R1_FB5_Mask
#define CAN_F2R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F2R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F2R1_FB6                          CAN_F2R1_FB6_Mask
#define CAN_F2R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F2R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F2R1_FB7                          CAN_F2R1_FB7_Mask
#define CAN_F2R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F2R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F2R1_FB8                          CAN_F2R1_FB8_Mask
#define CAN_F2R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F2R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F2R1_FB9                          CAN_F2R1_FB9_Mask
#define CAN_F2R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F2R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F2R1_FB10                         CAN_F2R1_FB10_Mask
#define CAN_F2R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F2R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F2R1_FB11                         CAN_F2R1_FB11_Mask
#define CAN_F2R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F2R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F2R1_FB12                         CAN_F2R1_FB12_Mask
#define CAN_F2R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F2R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F2R1_FB13                         CAN_F2R1_FB13_Mask
#define CAN_F2R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F2R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F2R1_FB14                         CAN_F2R1_FB14_Mask
#define CAN_F2R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F2R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F2R1_FB15                         CAN_F2R1_FB15_Mask
#define CAN_F2R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F2R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F2R1_FB16                         CAN_F2R1_FB16_Mask
#define CAN_F2R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F2R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F2R1_FB17                         CAN_F2R1_FB17_Mask
#define CAN_F2R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F2R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F2R1_FB18                         CAN_F2R1_FB18_Mask
#define CAN_F2R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F2R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F2R1_FB19                         CAN_F2R1_FB19_Mask
#define CAN_F2R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F2R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F2R1_FB20                         CAN_F2R1_FB20_Mask
#define CAN_F2R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F2R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F2R1_FB21                         CAN_F2R1_FB21_Mask
#define CAN_F2R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F2R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F2R1_FB22                         CAN_F2R1_FB22_Mask
#define CAN_F2R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F2R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F2R1_FB23                         CAN_F2R1_FB23_Mask
#define CAN_F2R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F2R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F2R1_FB24                         CAN_F2R1_FB24_Mask
#define CAN_F2R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F2R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F2R1_FB25                         CAN_F2R1_FB25_Mask
#define CAN_F2R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F2R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F2R1_FB26                         CAN_F2R1_FB26_Mask
#define CAN_F2R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F2R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F2R1_FB27                         CAN_F2R1_FB27_Mask
#define CAN_F2R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F2R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F2R1_FB28                         CAN_F2R1_FB28_Mask
#define CAN_F2R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F2R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F2R1_FB29                         CAN_F2R1_FB29_Mask
#define CAN_F2R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F2R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F2R1_FB30                         CAN_F2R1_FB30_Mask
#define CAN_F2R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F2R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F2R1_FB31                         CAN_F2R1_FB31_Mask

/************************************* CAN->F2R2  ***************************************/
#define CAN_F2R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F2R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F2R2_FB0                          CAN_F2R2_FB0_Mask
#define CAN_F2R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F2R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F2R2_FB1                          CAN_F2R2_FB1_Mask
#define CAN_F2R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F2R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F2R2_FB2                          CAN_F2R2_FB2_Mask
#define CAN_F2R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F2R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F2R2_FB3                          CAN_F2R2_FB3_Mask
#define CAN_F2R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F2R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F2R2_FB4                          CAN_F2R2_FB4_Mask
#define CAN_F2R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F2R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F2R2_FB5                          CAN_F2R2_FB5_Mask
#define CAN_F2R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F2R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F2R2_FB6                          CAN_F2R2_FB6_Mask
#define CAN_F2R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F2R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F2R2_FB7                          CAN_F2R2_FB7_Mask
#define CAN_F2R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F2R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F2R2_FB8                          CAN_F2R2_FB8_Mask
#define CAN_F2R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F2R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F2R2_FB9                          CAN_F2R2_FB9_Mask
#define CAN_F2R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F2R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F2R2_FB10                         CAN_F2R2_FB10_Mask
#define CAN_F2R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F2R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F2R2_FB11                         CAN_F2R2_FB11_Mask
#define CAN_F2R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F2R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F2R2_FB12                         CAN_F2R2_FB12_Mask
#define CAN_F2R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F2R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F2R2_FB13                         CAN_F2R2_FB13_Mask
#define CAN_F2R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F2R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F2R2_FB14                         CAN_F2R2_FB14_Mask
#define CAN_F2R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F2R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F2R2_FB15                         CAN_F2R2_FB15_Mask
#define CAN_F2R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F2R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F2R2_FB16                         CAN_F2R2_FB16_Mask
#define CAN_F2R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F2R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F2R2_FB17                         CAN_F2R2_FB17_Mask
#define CAN_F2R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F2R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F2R2_FB18                         CAN_F2R2_FB18_Mask
#define CAN_F2R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F2R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F2R2_FB19                         CAN_F2R2_FB19_Mask
#define CAN_F2R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F2R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F2R2_FB20                         CAN_F2R2_FB20_Mask
#define CAN_F2R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F2R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F2R2_FB21                         CAN_F2R2_FB21_Mask
#define CAN_F2R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F2R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F2R2_FB22                         CAN_F2R2_FB22_Mask
#define CAN_F2R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F2R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F2R2_FB23                         CAN_F2R2_FB23_Mask
#define CAN_F2R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F2R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F2R2_FB24                         CAN_F2R2_FB24_Mask
#define CAN_F2R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F2R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F2R2_FB25                         CAN_F2R2_FB25_Mask
#define CAN_F2R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F2R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F2R2_FB26                         CAN_F2R2_FB26_Mask
#define CAN_F2R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F2R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F2R2_FB27                         CAN_F2R2_FB27_Mask
#define CAN_F2R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F2R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F2R2_FB28                         CAN_F2R2_FB28_Mask
#define CAN_F2R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F2R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F2R2_FB29                         CAN_F2R2_FB29_Mask
#define CAN_F2R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F2R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F2R2_FB30                         CAN_F2R2_FB30_Mask
#define CAN_F2R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F2R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F2R2_FB31                         CAN_F2R2_FB31_Mask

/************************************* CAN->F3R1  ***************************************/
#define CAN_F3R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F3R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F3R1_FB0                          CAN_F3R1_FB0_Mask
#define CAN_F3R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F3R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F3R1_FB1                          CAN_F3R1_FB1_Mask
#define CAN_F3R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F3R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F3R1_FB2                          CAN_F3R1_FB2_Mask
#define CAN_F3R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F3R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F3R1_FB3                          CAN_F3R1_FB3_Mask
#define CAN_F3R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F3R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F3R1_FB4                          CAN_F3R1_FB4_Mask
#define CAN_F3R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F3R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F3R1_FB5                          CAN_F3R1_FB5_Mask
#define CAN_F3R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F3R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F3R1_FB6                          CAN_F3R1_FB6_Mask
#define CAN_F3R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F3R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F3R1_FB7                          CAN_F3R1_FB7_Mask
#define CAN_F3R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F3R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F3R1_FB8                          CAN_F3R1_FB8_Mask
#define CAN_F3R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F3R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F3R1_FB9                          CAN_F3R1_FB9_Mask
#define CAN_F3R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F3R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F3R1_FB10                         CAN_F3R1_FB10_Mask
#define CAN_F3R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F3R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F3R1_FB11                         CAN_F3R1_FB11_Mask
#define CAN_F3R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F3R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F3R1_FB12                         CAN_F3R1_FB12_Mask
#define CAN_F3R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F3R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F3R1_FB13                         CAN_F3R1_FB13_Mask
#define CAN_F3R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F3R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F3R1_FB14                         CAN_F3R1_FB14_Mask
#define CAN_F3R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F3R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F3R1_FB15                         CAN_F3R1_FB15_Mask
#define CAN_F3R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F3R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F3R1_FB16                         CAN_F3R1_FB16_Mask
#define CAN_F3R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F3R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F3R1_FB17                         CAN_F3R1_FB17_Mask
#define CAN_F3R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F3R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F3R1_FB18                         CAN_F3R1_FB18_Mask
#define CAN_F3R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F3R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F3R1_FB19                         CAN_F3R1_FB19_Mask
#define CAN_F3R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F3R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F3R1_FB20                         CAN_F3R1_FB20_Mask
#define CAN_F3R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F3R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F3R1_FB21                         CAN_F3R1_FB21_Mask
#define CAN_F3R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F3R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F3R1_FB22                         CAN_F3R1_FB22_Mask
#define CAN_F3R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F3R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F3R1_FB23                         CAN_F3R1_FB23_Mask
#define CAN_F3R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F3R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F3R1_FB24                         CAN_F3R1_FB24_Mask
#define CAN_F3R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F3R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F3R1_FB25                         CAN_F3R1_FB25_Mask
#define CAN_F3R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F3R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F3R1_FB26                         CAN_F3R1_FB26_Mask
#define CAN_F3R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F3R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F3R1_FB27                         CAN_F3R1_FB27_Mask
#define CAN_F3R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F3R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F3R1_FB28                         CAN_F3R1_FB28_Mask
#define CAN_F3R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F3R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F3R1_FB29                         CAN_F3R1_FB29_Mask
#define CAN_F3R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F3R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F3R1_FB30                         CAN_F3R1_FB30_Mask
#define CAN_F3R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F3R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F3R1_FB31                         CAN_F3R1_FB31_Mask

/************************************* CAN->F3R2  ***************************************/
#define CAN_F3R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F3R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F3R2_FB0                          CAN_F3R2_FB0_Mask
#define CAN_F3R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F3R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F3R2_FB1                          CAN_F3R2_FB1_Mask
#define CAN_F3R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F3R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F3R2_FB2                          CAN_F3R2_FB2_Mask
#define CAN_F3R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F3R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F3R2_FB3                          CAN_F3R2_FB3_Mask
#define CAN_F3R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F3R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F3R2_FB4                          CAN_F3R2_FB4_Mask
#define CAN_F3R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F3R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F3R2_FB5                          CAN_F3R2_FB5_Mask
#define CAN_F3R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F3R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F3R2_FB6                          CAN_F3R2_FB6_Mask
#define CAN_F3R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F3R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F3R2_FB7                          CAN_F3R2_FB7_Mask
#define CAN_F3R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F3R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F3R2_FB8                          CAN_F3R2_FB8_Mask
#define CAN_F3R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F3R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F3R2_FB9                          CAN_F3R2_FB9_Mask
#define CAN_F3R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F3R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F3R2_FB10                         CAN_F3R2_FB10_Mask
#define CAN_F3R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F3R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F3R2_FB11                         CAN_F3R2_FB11_Mask
#define CAN_F3R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F3R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F3R2_FB12                         CAN_F3R2_FB12_Mask
#define CAN_F3R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F3R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F3R2_FB13                         CAN_F3R2_FB13_Mask
#define CAN_F3R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F3R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F3R2_FB14                         CAN_F3R2_FB14_Mask
#define CAN_F3R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F3R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F3R2_FB15                         CAN_F3R2_FB15_Mask
#define CAN_F3R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F3R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F3R2_FB16                         CAN_F3R2_FB16_Mask
#define CAN_F3R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F3R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F3R2_FB17                         CAN_F3R2_FB17_Mask
#define CAN_F3R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F3R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F3R2_FB18                         CAN_F3R2_FB18_Mask
#define CAN_F3R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F3R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F3R2_FB19                         CAN_F3R2_FB19_Mask
#define CAN_F3R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F3R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F3R2_FB20                         CAN_F3R2_FB20_Mask
#define CAN_F3R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F3R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F3R2_FB21                         CAN_F3R2_FB21_Mask
#define CAN_F3R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F3R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F3R2_FB22                         CAN_F3R2_FB22_Mask
#define CAN_F3R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F3R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F3R2_FB23                         CAN_F3R2_FB23_Mask
#define CAN_F3R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F3R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F3R2_FB24                         CAN_F3R2_FB24_Mask
#define CAN_F3R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F3R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F3R2_FB25                         CAN_F3R2_FB25_Mask
#define CAN_F3R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F3R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F3R2_FB26                         CAN_F3R2_FB26_Mask
#define CAN_F3R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F3R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F3R2_FB27                         CAN_F3R2_FB27_Mask
#define CAN_F3R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F3R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F3R2_FB28                         CAN_F3R2_FB28_Mask
#define CAN_F3R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F3R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F3R2_FB29                         CAN_F3R2_FB29_Mask
#define CAN_F3R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F3R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F3R2_FB30                         CAN_F3R2_FB30_Mask
#define CAN_F3R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F3R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F3R2_FB31                         CAN_F3R2_FB31_Mask

/************************************* CAN->F4R1  ***************************************/
#define CAN_F4R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F4R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F4R1_FB0                          CAN_F4R1_FB0_Mask
#define CAN_F4R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F4R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F4R1_FB1                          CAN_F4R1_FB1_Mask
#define CAN_F4R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F4R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F4R1_FB2                          CAN_F4R1_FB2_Mask
#define CAN_F4R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F4R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F4R1_FB3                          CAN_F4R1_FB3_Mask
#define CAN_F4R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F4R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F4R1_FB4                          CAN_F4R1_FB4_Mask
#define CAN_F4R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F4R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F4R1_FB5                          CAN_F4R1_FB5_Mask
#define CAN_F4R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F4R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F4R1_FB6                          CAN_F4R1_FB6_Mask
#define CAN_F4R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F4R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F4R1_FB7                          CAN_F4R1_FB7_Mask
#define CAN_F4R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F4R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F4R1_FB8                          CAN_F4R1_FB8_Mask
#define CAN_F4R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F4R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F4R1_FB9                          CAN_F4R1_FB9_Mask
#define CAN_F4R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F4R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F4R1_FB10                         CAN_F4R1_FB10_Mask
#define CAN_F4R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F4R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F4R1_FB11                         CAN_F4R1_FB11_Mask
#define CAN_F4R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F4R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F4R1_FB12                         CAN_F4R1_FB12_Mask
#define CAN_F4R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F4R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F4R1_FB13                         CAN_F4R1_FB13_Mask
#define CAN_F4R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F4R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F4R1_FB14                         CAN_F4R1_FB14_Mask
#define CAN_F4R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F4R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F4R1_FB15                         CAN_F4R1_FB15_Mask
#define CAN_F4R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F4R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F4R1_FB16                         CAN_F4R1_FB16_Mask
#define CAN_F4R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F4R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F4R1_FB17                         CAN_F4R1_FB17_Mask
#define CAN_F4R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F4R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F4R1_FB18                         CAN_F4R1_FB18_Mask
#define CAN_F4R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F4R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F4R1_FB19                         CAN_F4R1_FB19_Mask
#define CAN_F4R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F4R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F4R1_FB20                         CAN_F4R1_FB20_Mask
#define CAN_F4R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F4R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F4R1_FB21                         CAN_F4R1_FB21_Mask
#define CAN_F4R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F4R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F4R1_FB22                         CAN_F4R1_FB22_Mask
#define CAN_F4R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F4R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F4R1_FB23                         CAN_F4R1_FB23_Mask
#define CAN_F4R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F4R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F4R1_FB24                         CAN_F4R1_FB24_Mask
#define CAN_F4R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F4R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F4R1_FB25                         CAN_F4R1_FB25_Mask
#define CAN_F4R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F4R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F4R1_FB26                         CAN_F4R1_FB26_Mask
#define CAN_F4R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F4R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F4R1_FB27                         CAN_F4R1_FB27_Mask
#define CAN_F4R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F4R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F4R1_FB28                         CAN_F4R1_FB28_Mask
#define CAN_F4R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F4R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F4R1_FB29                         CAN_F4R1_FB29_Mask
#define CAN_F4R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F4R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F4R1_FB30                         CAN_F4R1_FB30_Mask
#define CAN_F4R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F4R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F4R1_FB31                         CAN_F4R1_FB31_Mask

/************************************* CAN->F4R2  ***************************************/
#define CAN_F4R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F4R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F4R2_FB0                          CAN_F4R2_FB0_Mask
#define CAN_F4R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F4R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F4R2_FB1                          CAN_F4R2_FB1_Mask
#define CAN_F4R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F4R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F4R2_FB2                          CAN_F4R2_FB2_Mask
#define CAN_F4R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F4R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F4R2_FB3                          CAN_F4R2_FB3_Mask
#define CAN_F4R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F4R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F4R2_FB4                          CAN_F4R2_FB4_Mask
#define CAN_F4R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F4R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F4R2_FB5                          CAN_F4R2_FB5_Mask
#define CAN_F4R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F4R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F4R2_FB6                          CAN_F4R2_FB6_Mask
#define CAN_F4R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F4R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F4R2_FB7                          CAN_F4R2_FB7_Mask
#define CAN_F4R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F4R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F4R2_FB8                          CAN_F4R2_FB8_Mask
#define CAN_F4R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F4R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F4R2_FB9                          CAN_F4R2_FB9_Mask
#define CAN_F4R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F4R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F4R2_FB10                         CAN_F4R2_FB10_Mask
#define CAN_F4R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F4R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F4R2_FB11                         CAN_F4R2_FB11_Mask
#define CAN_F4R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F4R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F4R2_FB12                         CAN_F4R2_FB12_Mask
#define CAN_F4R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F4R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F4R2_FB13                         CAN_F4R2_FB13_Mask
#define CAN_F4R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F4R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F4R2_FB14                         CAN_F4R2_FB14_Mask
#define CAN_F4R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F4R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F4R2_FB15                         CAN_F4R2_FB15_Mask
#define CAN_F4R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F4R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F4R2_FB16                         CAN_F4R2_FB16_Mask
#define CAN_F4R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F4R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F4R2_FB17                         CAN_F4R2_FB17_Mask
#define CAN_F4R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F4R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F4R2_FB18                         CAN_F4R2_FB18_Mask
#define CAN_F4R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F4R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F4R2_FB19                         CAN_F4R2_FB19_Mask
#define CAN_F4R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F4R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F4R2_FB20                         CAN_F4R2_FB20_Mask
#define CAN_F4R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F4R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F4R2_FB21                         CAN_F4R2_FB21_Mask
#define CAN_F4R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F4R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F4R2_FB22                         CAN_F4R2_FB22_Mask
#define CAN_F4R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F4R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F4R2_FB23                         CAN_F4R2_FB23_Mask
#define CAN_F4R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F4R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F4R2_FB24                         CAN_F4R2_FB24_Mask
#define CAN_F4R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F4R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F4R2_FB25                         CAN_F4R2_FB25_Mask
#define CAN_F4R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F4R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F4R2_FB26                         CAN_F4R2_FB26_Mask
#define CAN_F4R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F4R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F4R2_FB27                         CAN_F4R2_FB27_Mask
#define CAN_F4R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F4R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F4R2_FB28                         CAN_F4R2_FB28_Mask
#define CAN_F4R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F4R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F4R2_FB29                         CAN_F4R2_FB29_Mask
#define CAN_F4R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F4R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F4R2_FB30                         CAN_F4R2_FB30_Mask
#define CAN_F4R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F4R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F4R2_FB31                         CAN_F4R2_FB31_Mask

/************************************* CAN->F5R1  ***************************************/
#define CAN_F5R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F5R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F5R1_FB0                          CAN_F5R1_FB0_Mask
#define CAN_F5R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F5R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F5R1_FB1                          CAN_F5R1_FB1_Mask
#define CAN_F5R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F5R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F5R1_FB2                          CAN_F5R1_FB2_Mask
#define CAN_F5R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F5R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F5R1_FB3                          CAN_F5R1_FB3_Mask
#define CAN_F5R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F5R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F5R1_FB4                          CAN_F5R1_FB4_Mask
#define CAN_F5R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F5R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F5R1_FB5                          CAN_F5R1_FB5_Mask
#define CAN_F5R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F5R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F5R1_FB6                          CAN_F5R1_FB6_Mask
#define CAN_F5R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F5R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F5R1_FB7                          CAN_F5R1_FB7_Mask
#define CAN_F5R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F5R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F5R1_FB8                          CAN_F5R1_FB8_Mask
#define CAN_F5R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F5R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F5R1_FB9                          CAN_F5R1_FB9_Mask
#define CAN_F5R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F5R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F5R1_FB10                         CAN_F5R1_FB10_Mask
#define CAN_F5R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F5R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F5R1_FB11                         CAN_F5R1_FB11_Mask
#define CAN_F5R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F5R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F5R1_FB12                         CAN_F5R1_FB12_Mask
#define CAN_F5R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F5R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F5R1_FB13                         CAN_F5R1_FB13_Mask
#define CAN_F5R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F5R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F5R1_FB14                         CAN_F5R1_FB14_Mask
#define CAN_F5R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F5R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F5R1_FB15                         CAN_F5R1_FB15_Mask
#define CAN_F5R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F5R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F5R1_FB16                         CAN_F5R1_FB16_Mask
#define CAN_F5R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F5R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F5R1_FB17                         CAN_F5R1_FB17_Mask
#define CAN_F5R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F5R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F5R1_FB18                         CAN_F5R1_FB18_Mask
#define CAN_F5R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F5R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F5R1_FB19                         CAN_F5R1_FB19_Mask
#define CAN_F5R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F5R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F5R1_FB20                         CAN_F5R1_FB20_Mask
#define CAN_F5R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F5R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F5R1_FB21                         CAN_F5R1_FB21_Mask
#define CAN_F5R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F5R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F5R1_FB22                         CAN_F5R1_FB22_Mask
#define CAN_F5R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F5R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F5R1_FB23                         CAN_F5R1_FB23_Mask
#define CAN_F5R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F5R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F5R1_FB24                         CAN_F5R1_FB24_Mask
#define CAN_F5R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F5R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F5R1_FB25                         CAN_F5R1_FB25_Mask
#define CAN_F5R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F5R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F5R1_FB26                         CAN_F5R1_FB26_Mask
#define CAN_F5R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F5R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F5R1_FB27                         CAN_F5R1_FB27_Mask
#define CAN_F5R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F5R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F5R1_FB28                         CAN_F5R1_FB28_Mask
#define CAN_F5R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F5R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F5R1_FB29                         CAN_F5R1_FB29_Mask
#define CAN_F5R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F5R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F5R1_FB30                         CAN_F5R1_FB30_Mask
#define CAN_F5R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F5R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F5R1_FB31                         CAN_F5R1_FB31_Mask

/************************************* CAN->F5R2  ***************************************/
#define CAN_F5R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F5R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F5R2_FB0                          CAN_F5R2_FB0_Mask
#define CAN_F5R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F5R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F5R2_FB1                          CAN_F5R2_FB1_Mask
#define CAN_F5R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F5R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F5R2_FB2                          CAN_F5R2_FB2_Mask
#define CAN_F5R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F5R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F5R2_FB3                          CAN_F5R2_FB3_Mask
#define CAN_F5R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F5R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F5R2_FB4                          CAN_F5R2_FB4_Mask
#define CAN_F5R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F5R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F5R2_FB5                          CAN_F5R2_FB5_Mask
#define CAN_F5R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F5R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F5R2_FB6                          CAN_F5R2_FB6_Mask
#define CAN_F5R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F5R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F5R2_FB7                          CAN_F5R2_FB7_Mask
#define CAN_F5R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F5R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F5R2_FB8                          CAN_F5R2_FB8_Mask
#define CAN_F5R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F5R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F5R2_FB9                          CAN_F5R2_FB9_Mask
#define CAN_F5R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F5R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F5R2_FB10                         CAN_F5R2_FB10_Mask
#define CAN_F5R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F5R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F5R2_FB11                         CAN_F5R2_FB11_Mask
#define CAN_F5R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F5R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F5R2_FB12                         CAN_F5R2_FB12_Mask
#define CAN_F5R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F5R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F5R2_FB13                         CAN_F5R2_FB13_Mask
#define CAN_F5R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F5R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F5R2_FB14                         CAN_F5R2_FB14_Mask
#define CAN_F5R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F5R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F5R2_FB15                         CAN_F5R2_FB15_Mask
#define CAN_F5R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F5R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F5R2_FB16                         CAN_F5R2_FB16_Mask
#define CAN_F5R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F5R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F5R2_FB17                         CAN_F5R2_FB17_Mask
#define CAN_F5R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F5R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F5R2_FB18                         CAN_F5R2_FB18_Mask
#define CAN_F5R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F5R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F5R2_FB19                         CAN_F5R2_FB19_Mask
#define CAN_F5R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F5R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F5R2_FB20                         CAN_F5R2_FB20_Mask
#define CAN_F5R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F5R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F5R2_FB21                         CAN_F5R2_FB21_Mask
#define CAN_F5R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F5R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F5R2_FB22                         CAN_F5R2_FB22_Mask
#define CAN_F5R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F5R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F5R2_FB23                         CAN_F5R2_FB23_Mask
#define CAN_F5R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F5R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F5R2_FB24                         CAN_F5R2_FB24_Mask
#define CAN_F5R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F5R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F5R2_FB25                         CAN_F5R2_FB25_Mask
#define CAN_F5R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F5R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F5R2_FB26                         CAN_F5R2_FB26_Mask
#define CAN_F5R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F5R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F5R2_FB27                         CAN_F5R2_FB27_Mask
#define CAN_F5R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F5R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F5R2_FB28                         CAN_F5R2_FB28_Mask
#define CAN_F5R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F5R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F5R2_FB29                         CAN_F5R2_FB29_Mask
#define CAN_F5R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F5R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F5R2_FB30                         CAN_F5R2_FB30_Mask
#define CAN_F5R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F5R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F5R2_FB31                         CAN_F5R2_FB31_Mask

/************************************* CAN->F6R1  ***************************************/
#define CAN_F6R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F6R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F6R1_FB0                          CAN_F6R1_FB0_Mask
#define CAN_F6R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F6R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F6R1_FB1                          CAN_F6R1_FB1_Mask
#define CAN_F6R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F6R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F6R1_FB2                          CAN_F6R1_FB2_Mask
#define CAN_F6R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F6R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F6R1_FB3                          CAN_F6R1_FB3_Mask
#define CAN_F6R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F6R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F6R1_FB4                          CAN_F6R1_FB4_Mask
#define CAN_F6R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F6R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F6R1_FB5                          CAN_F6R1_FB5_Mask
#define CAN_F6R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F6R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F6R1_FB6                          CAN_F6R1_FB6_Mask
#define CAN_F6R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F6R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F6R1_FB7                          CAN_F6R1_FB7_Mask
#define CAN_F6R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F6R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F6R1_FB8                          CAN_F6R1_FB8_Mask
#define CAN_F6R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F6R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F6R1_FB9                          CAN_F6R1_FB9_Mask
#define CAN_F6R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F6R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F6R1_FB10                         CAN_F6R1_FB10_Mask
#define CAN_F6R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F6R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F6R1_FB11                         CAN_F6R1_FB11_Mask
#define CAN_F6R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F6R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F6R1_FB12                         CAN_F6R1_FB12_Mask
#define CAN_F6R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F6R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F6R1_FB13                         CAN_F6R1_FB13_Mask
#define CAN_F6R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F6R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F6R1_FB14                         CAN_F6R1_FB14_Mask
#define CAN_F6R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F6R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F6R1_FB15                         CAN_F6R1_FB15_Mask
#define CAN_F6R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F6R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F6R1_FB16                         CAN_F6R1_FB16_Mask
#define CAN_F6R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F6R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F6R1_FB17                         CAN_F6R1_FB17_Mask
#define CAN_F6R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F6R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F6R1_FB18                         CAN_F6R1_FB18_Mask
#define CAN_F6R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F6R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F6R1_FB19                         CAN_F6R1_FB19_Mask
#define CAN_F6R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F6R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F6R1_FB20                         CAN_F6R1_FB20_Mask
#define CAN_F6R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F6R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F6R1_FB21                         CAN_F6R1_FB21_Mask
#define CAN_F6R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F6R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F6R1_FB22                         CAN_F6R1_FB22_Mask
#define CAN_F6R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F6R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F6R1_FB23                         CAN_F6R1_FB23_Mask
#define CAN_F6R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F6R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F6R1_FB24                         CAN_F6R1_FB24_Mask
#define CAN_F6R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F6R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F6R1_FB25                         CAN_F6R1_FB25_Mask
#define CAN_F6R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F6R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F6R1_FB26                         CAN_F6R1_FB26_Mask
#define CAN_F6R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F6R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F6R1_FB27                         CAN_F6R1_FB27_Mask
#define CAN_F6R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F6R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F6R1_FB28                         CAN_F6R1_FB28_Mask
#define CAN_F6R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F6R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F6R1_FB29                         CAN_F6R1_FB29_Mask
#define CAN_F6R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F6R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F6R1_FB30                         CAN_F6R1_FB30_Mask
#define CAN_F6R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F6R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F6R1_FB31                         CAN_F6R1_FB31_Mask

/************************************* CAN->F6R2  ***************************************/
#define CAN_F6R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F6R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F6R2_FB0                          CAN_F6R2_FB0_Mask
#define CAN_F6R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F6R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F6R2_FB1                          CAN_F6R2_FB1_Mask
#define CAN_F6R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F6R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F6R2_FB2                          CAN_F6R2_FB2_Mask
#define CAN_F6R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F6R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F6R2_FB3                          CAN_F6R2_FB3_Mask
#define CAN_F6R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F6R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F6R2_FB4                          CAN_F6R2_FB4_Mask
#define CAN_F6R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F6R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F6R2_FB5                          CAN_F6R2_FB5_Mask
#define CAN_F6R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F6R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F6R2_FB6                          CAN_F6R2_FB6_Mask
#define CAN_F6R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F6R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F6R2_FB7                          CAN_F6R2_FB7_Mask
#define CAN_F6R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F6R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F6R2_FB8                          CAN_F6R2_FB8_Mask
#define CAN_F6R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F6R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F6R2_FB9                          CAN_F6R2_FB9_Mask
#define CAN_F6R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F6R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F6R2_FB10                         CAN_F6R2_FB10_Mask
#define CAN_F6R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F6R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F6R2_FB11                         CAN_F6R2_FB11_Mask
#define CAN_F6R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F6R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F6R2_FB12                         CAN_F6R2_FB12_Mask
#define CAN_F6R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F6R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F6R2_FB13                         CAN_F6R2_FB13_Mask
#define CAN_F6R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F6R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F6R2_FB14                         CAN_F6R2_FB14_Mask
#define CAN_F6R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F6R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F6R2_FB15                         CAN_F6R2_FB15_Mask
#define CAN_F6R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F6R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F6R2_FB16                         CAN_F6R2_FB16_Mask
#define CAN_F6R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F6R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F6R2_FB17                         CAN_F6R2_FB17_Mask
#define CAN_F6R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F6R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F6R2_FB18                         CAN_F6R2_FB18_Mask
#define CAN_F6R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F6R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F6R2_FB19                         CAN_F6R2_FB19_Mask
#define CAN_F6R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F6R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F6R2_FB20                         CAN_F6R2_FB20_Mask
#define CAN_F6R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F6R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F6R2_FB21                         CAN_F6R2_FB21_Mask
#define CAN_F6R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F6R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F6R2_FB22                         CAN_F6R2_FB22_Mask
#define CAN_F6R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F6R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F6R2_FB23                         CAN_F6R2_FB23_Mask
#define CAN_F6R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F6R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F6R2_FB24                         CAN_F6R2_FB24_Mask
#define CAN_F6R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F6R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F6R2_FB25                         CAN_F6R2_FB25_Mask
#define CAN_F6R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F6R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F6R2_FB26                         CAN_F6R2_FB26_Mask
#define CAN_F6R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F6R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F6R2_FB27                         CAN_F6R2_FB27_Mask
#define CAN_F6R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F6R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F6R2_FB28                         CAN_F6R2_FB28_Mask
#define CAN_F6R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F6R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F6R2_FB29                         CAN_F6R2_FB29_Mask
#define CAN_F6R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F6R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F6R2_FB30                         CAN_F6R2_FB30_Mask
#define CAN_F6R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F6R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F6R2_FB31                         CAN_F6R2_FB31_Mask

/************************************* CAN->F7R1  ***************************************/
#define CAN_F7R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F7R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F7R1_FB0                          CAN_F7R1_FB0_Mask
#define CAN_F7R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F7R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F7R1_FB1                          CAN_F7R1_FB1_Mask
#define CAN_F7R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F7R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F7R1_FB2                          CAN_F7R1_FB2_Mask
#define CAN_F7R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F7R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F7R1_FB3                          CAN_F7R1_FB3_Mask
#define CAN_F7R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F7R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F7R1_FB4                          CAN_F7R1_FB4_Mask
#define CAN_F7R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F7R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F7R1_FB5                          CAN_F7R1_FB5_Mask
#define CAN_F7R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F7R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F7R1_FB6                          CAN_F7R1_FB6_Mask
#define CAN_F7R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F7R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F7R1_FB7                          CAN_F7R1_FB7_Mask
#define CAN_F7R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F7R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F7R1_FB8                          CAN_F7R1_FB8_Mask
#define CAN_F7R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F7R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F7R1_FB9                          CAN_F7R1_FB9_Mask
#define CAN_F7R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F7R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F7R1_FB10                         CAN_F7R1_FB10_Mask
#define CAN_F7R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F7R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F7R1_FB11                         CAN_F7R1_FB11_Mask
#define CAN_F7R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F7R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F7R1_FB12                         CAN_F7R1_FB12_Mask
#define CAN_F7R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F7R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F7R1_FB13                         CAN_F7R1_FB13_Mask
#define CAN_F7R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F7R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F7R1_FB14                         CAN_F7R1_FB14_Mask
#define CAN_F7R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F7R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F7R1_FB15                         CAN_F7R1_FB15_Mask
#define CAN_F7R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F7R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F7R1_FB16                         CAN_F7R1_FB16_Mask
#define CAN_F7R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F7R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F7R1_FB17                         CAN_F7R1_FB17_Mask
#define CAN_F7R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F7R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F7R1_FB18                         CAN_F7R1_FB18_Mask
#define CAN_F7R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F7R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F7R1_FB19                         CAN_F7R1_FB19_Mask
#define CAN_F7R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F7R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F7R1_FB20                         CAN_F7R1_FB20_Mask
#define CAN_F7R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F7R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F7R1_FB21                         CAN_F7R1_FB21_Mask
#define CAN_F7R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F7R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F7R1_FB22                         CAN_F7R1_FB22_Mask
#define CAN_F7R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F7R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F7R1_FB23                         CAN_F7R1_FB23_Mask
#define CAN_F7R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F7R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F7R1_FB24                         CAN_F7R1_FB24_Mask
#define CAN_F7R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F7R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F7R1_FB25                         CAN_F7R1_FB25_Mask
#define CAN_F7R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F7R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F7R1_FB26                         CAN_F7R1_FB26_Mask
#define CAN_F7R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F7R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F7R1_FB27                         CAN_F7R1_FB27_Mask
#define CAN_F7R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F7R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F7R1_FB28                         CAN_F7R1_FB28_Mask
#define CAN_F7R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F7R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F7R1_FB29                         CAN_F7R1_FB29_Mask
#define CAN_F7R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F7R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F7R1_FB30                         CAN_F7R1_FB30_Mask
#define CAN_F7R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F7R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F7R1_FB31                         CAN_F7R1_FB31_Mask

/************************************* CAN->F7R2  ***************************************/
#define CAN_F7R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F7R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F7R2_FB0                          CAN_F7R2_FB0_Mask
#define CAN_F7R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F7R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F7R2_FB1                          CAN_F7R2_FB1_Mask
#define CAN_F7R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F7R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F7R2_FB2                          CAN_F7R2_FB2_Mask
#define CAN_F7R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F7R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F7R2_FB3                          CAN_F7R2_FB3_Mask
#define CAN_F7R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F7R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F7R2_FB4                          CAN_F7R2_FB4_Mask
#define CAN_F7R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F7R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F7R2_FB5                          CAN_F7R2_FB5_Mask
#define CAN_F7R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F7R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F7R2_FB6                          CAN_F7R2_FB6_Mask
#define CAN_F7R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F7R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F7R2_FB7                          CAN_F7R2_FB7_Mask
#define CAN_F7R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F7R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F7R2_FB8                          CAN_F7R2_FB8_Mask
#define CAN_F7R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F7R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F7R2_FB9                          CAN_F7R2_FB9_Mask
#define CAN_F7R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F7R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F7R2_FB10                         CAN_F7R2_FB10_Mask
#define CAN_F7R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F7R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F7R2_FB11                         CAN_F7R2_FB11_Mask
#define CAN_F7R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F7R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F7R2_FB12                         CAN_F7R2_FB12_Mask
#define CAN_F7R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F7R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F7R2_FB13                         CAN_F7R2_FB13_Mask
#define CAN_F7R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F7R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F7R2_FB14                         CAN_F7R2_FB14_Mask
#define CAN_F7R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F7R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F7R2_FB15                         CAN_F7R2_FB15_Mask
#define CAN_F7R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F7R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F7R2_FB16                         CAN_F7R2_FB16_Mask
#define CAN_F7R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F7R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F7R2_FB17                         CAN_F7R2_FB17_Mask
#define CAN_F7R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F7R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F7R2_FB18                         CAN_F7R2_FB18_Mask
#define CAN_F7R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F7R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F7R2_FB19                         CAN_F7R2_FB19_Mask
#define CAN_F7R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F7R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F7R2_FB20                         CAN_F7R2_FB20_Mask
#define CAN_F7R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F7R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F7R2_FB21                         CAN_F7R2_FB21_Mask
#define CAN_F7R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F7R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F7R2_FB22                         CAN_F7R2_FB22_Mask
#define CAN_F7R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F7R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F7R2_FB23                         CAN_F7R2_FB23_Mask
#define CAN_F7R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F7R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F7R2_FB24                         CAN_F7R2_FB24_Mask
#define CAN_F7R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F7R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F7R2_FB25                         CAN_F7R2_FB25_Mask
#define CAN_F7R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F7R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F7R2_FB26                         CAN_F7R2_FB26_Mask
#define CAN_F7R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F7R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F7R2_FB27                         CAN_F7R2_FB27_Mask
#define CAN_F7R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F7R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F7R2_FB28                         CAN_F7R2_FB28_Mask
#define CAN_F7R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F7R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F7R2_FB29                         CAN_F7R2_FB29_Mask
#define CAN_F7R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F7R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F7R2_FB30                         CAN_F7R2_FB30_Mask
#define CAN_F7R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F7R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F7R2_FB31                         CAN_F7R2_FB31_Mask

/************************************* CAN->F8R1  ***************************************/
#define CAN_F8R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F8R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F8R1_FB0                          CAN_F8R1_FB0_Mask
#define CAN_F8R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F8R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F8R1_FB1                          CAN_F8R1_FB1_Mask
#define CAN_F8R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F8R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F8R1_FB2                          CAN_F8R1_FB2_Mask
#define CAN_F8R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F8R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F8R1_FB3                          CAN_F8R1_FB3_Mask
#define CAN_F8R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F8R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F8R1_FB4                          CAN_F8R1_FB4_Mask
#define CAN_F8R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F8R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F8R1_FB5                          CAN_F8R1_FB5_Mask
#define CAN_F8R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F8R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F8R1_FB6                          CAN_F8R1_FB6_Mask
#define CAN_F8R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F8R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F8R1_FB7                          CAN_F8R1_FB7_Mask
#define CAN_F8R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F8R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F8R1_FB8                          CAN_F8R1_FB8_Mask
#define CAN_F8R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F8R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F8R1_FB9                          CAN_F8R1_FB9_Mask
#define CAN_F8R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F8R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F8R1_FB10                         CAN_F8R1_FB10_Mask
#define CAN_F8R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F8R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F8R1_FB11                         CAN_F8R1_FB11_Mask
#define CAN_F8R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F8R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F8R1_FB12                         CAN_F8R1_FB12_Mask
#define CAN_F8R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F8R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F8R1_FB13                         CAN_F8R1_FB13_Mask
#define CAN_F8R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F8R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F8R1_FB14                         CAN_F8R1_FB14_Mask
#define CAN_F8R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F8R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F8R1_FB15                         CAN_F8R1_FB15_Mask
#define CAN_F8R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F8R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F8R1_FB16                         CAN_F8R1_FB16_Mask
#define CAN_F8R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F8R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F8R1_FB17                         CAN_F8R1_FB17_Mask
#define CAN_F8R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F8R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F8R1_FB18                         CAN_F8R1_FB18_Mask
#define CAN_F8R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F8R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F8R1_FB19                         CAN_F8R1_FB19_Mask
#define CAN_F8R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F8R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F8R1_FB20                         CAN_F8R1_FB20_Mask
#define CAN_F8R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F8R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F8R1_FB21                         CAN_F8R1_FB21_Mask
#define CAN_F8R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F8R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F8R1_FB22                         CAN_F8R1_FB22_Mask
#define CAN_F8R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F8R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F8R1_FB23                         CAN_F8R1_FB23_Mask
#define CAN_F8R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F8R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F8R1_FB24                         CAN_F8R1_FB24_Mask
#define CAN_F8R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F8R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F8R1_FB25                         CAN_F8R1_FB25_Mask
#define CAN_F8R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F8R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F8R1_FB26                         CAN_F8R1_FB26_Mask
#define CAN_F8R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F8R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F8R1_FB27                         CAN_F8R1_FB27_Mask
#define CAN_F8R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F8R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F8R1_FB28                         CAN_F8R1_FB28_Mask
#define CAN_F8R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F8R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F8R1_FB29                         CAN_F8R1_FB29_Mask
#define CAN_F8R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F8R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F8R1_FB30                         CAN_F8R1_FB30_Mask
#define CAN_F8R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F8R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F8R1_FB31                         CAN_F8R1_FB31_Mask

/************************************* CAN->F8R2  ***************************************/
#define CAN_F8R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F8R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F8R2_FB0                          CAN_F8R2_FB0_Mask
#define CAN_F8R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F8R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F8R2_FB1                          CAN_F8R2_FB1_Mask
#define CAN_F8R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F8R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F8R2_FB2                          CAN_F8R2_FB2_Mask
#define CAN_F8R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F8R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F8R2_FB3                          CAN_F8R2_FB3_Mask
#define CAN_F8R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F8R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F8R2_FB4                          CAN_F8R2_FB4_Mask
#define CAN_F8R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F8R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F8R2_FB5                          CAN_F8R2_FB5_Mask
#define CAN_F8R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F8R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F8R2_FB6                          CAN_F8R2_FB6_Mask
#define CAN_F8R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F8R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F8R2_FB7                          CAN_F8R2_FB7_Mask
#define CAN_F8R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F8R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F8R2_FB8                          CAN_F8R2_FB8_Mask
#define CAN_F8R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F8R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F8R2_FB9                          CAN_F8R2_FB9_Mask
#define CAN_F8R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F8R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F8R2_FB10                         CAN_F8R2_FB10_Mask
#define CAN_F8R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F8R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F8R2_FB11                         CAN_F8R2_FB11_Mask
#define CAN_F8R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F8R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F8R2_FB12                         CAN_F8R2_FB12_Mask
#define CAN_F8R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F8R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F8R2_FB13                         CAN_F8R2_FB13_Mask
#define CAN_F8R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F8R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F8R2_FB14                         CAN_F8R2_FB14_Mask
#define CAN_F8R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F8R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F8R2_FB15                         CAN_F8R2_FB15_Mask
#define CAN_F8R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F8R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F8R2_FB16                         CAN_F8R2_FB16_Mask
#define CAN_F8R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F8R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F8R2_FB17                         CAN_F8R2_FB17_Mask
#define CAN_F8R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F8R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F8R2_FB18                         CAN_F8R2_FB18_Mask
#define CAN_F8R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F8R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F8R2_FB19                         CAN_F8R2_FB19_Mask
#define CAN_F8R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F8R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F8R2_FB20                         CAN_F8R2_FB20_Mask
#define CAN_F8R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F8R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F8R2_FB21                         CAN_F8R2_FB21_Mask
#define CAN_F8R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F8R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F8R2_FB22                         CAN_F8R2_FB22_Mask
#define CAN_F8R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F8R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F8R2_FB23                         CAN_F8R2_FB23_Mask
#define CAN_F8R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F8R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F8R2_FB24                         CAN_F8R2_FB24_Mask
#define CAN_F8R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F8R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F8R2_FB25                         CAN_F8R2_FB25_Mask
#define CAN_F8R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F8R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F8R2_FB26                         CAN_F8R2_FB26_Mask
#define CAN_F8R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F8R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F8R2_FB27                         CAN_F8R2_FB27_Mask
#define CAN_F8R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F8R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F8R2_FB28                         CAN_F8R2_FB28_Mask
#define CAN_F8R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F8R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F8R2_FB29                         CAN_F8R2_FB29_Mask
#define CAN_F8R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F8R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F8R2_FB30                         CAN_F8R2_FB30_Mask
#define CAN_F8R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F8R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F8R2_FB31                         CAN_F8R2_FB31_Mask

/************************************* CAN->F9R1  ***************************************/
#define CAN_F9R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F9R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F9R1_FB0                          CAN_F9R1_FB0_Mask
#define CAN_F9R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F9R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F9R1_FB1                          CAN_F9R1_FB1_Mask
#define CAN_F9R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F9R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F9R1_FB2                          CAN_F9R1_FB2_Mask
#define CAN_F9R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F9R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F9R1_FB3                          CAN_F9R1_FB3_Mask
#define CAN_F9R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F9R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F9R1_FB4                          CAN_F9R1_FB4_Mask
#define CAN_F9R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F9R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F9R1_FB5                          CAN_F9R1_FB5_Mask
#define CAN_F9R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F9R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F9R1_FB6                          CAN_F9R1_FB6_Mask
#define CAN_F9R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F9R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F9R1_FB7                          CAN_F9R1_FB7_Mask
#define CAN_F9R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F9R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F9R1_FB8                          CAN_F9R1_FB8_Mask
#define CAN_F9R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F9R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F9R1_FB9                          CAN_F9R1_FB9_Mask
#define CAN_F9R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F9R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F9R1_FB10                         CAN_F9R1_FB10_Mask
#define CAN_F9R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F9R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F9R1_FB11                         CAN_F9R1_FB11_Mask
#define CAN_F9R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F9R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F9R1_FB12                         CAN_F9R1_FB12_Mask
#define CAN_F9R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F9R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F9R1_FB13                         CAN_F9R1_FB13_Mask
#define CAN_F9R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F9R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F9R1_FB14                         CAN_F9R1_FB14_Mask
#define CAN_F9R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F9R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F9R1_FB15                         CAN_F9R1_FB15_Mask
#define CAN_F9R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F9R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F9R1_FB16                         CAN_F9R1_FB16_Mask
#define CAN_F9R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F9R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F9R1_FB17                         CAN_F9R1_FB17_Mask
#define CAN_F9R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F9R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F9R1_FB18                         CAN_F9R1_FB18_Mask
#define CAN_F9R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F9R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F9R1_FB19                         CAN_F9R1_FB19_Mask
#define CAN_F9R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F9R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F9R1_FB20                         CAN_F9R1_FB20_Mask
#define CAN_F9R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F9R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F9R1_FB21                         CAN_F9R1_FB21_Mask
#define CAN_F9R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F9R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F9R1_FB22                         CAN_F9R1_FB22_Mask
#define CAN_F9R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F9R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F9R1_FB23                         CAN_F9R1_FB23_Mask
#define CAN_F9R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F9R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F9R1_FB24                         CAN_F9R1_FB24_Mask
#define CAN_F9R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F9R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F9R1_FB25                         CAN_F9R1_FB25_Mask
#define CAN_F9R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F9R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F9R1_FB26                         CAN_F9R1_FB26_Mask
#define CAN_F9R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F9R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F9R1_FB27                         CAN_F9R1_FB27_Mask
#define CAN_F9R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F9R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F9R1_FB28                         CAN_F9R1_FB28_Mask
#define CAN_F9R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F9R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F9R1_FB29                         CAN_F9R1_FB29_Mask
#define CAN_F9R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F9R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F9R1_FB30                         CAN_F9R1_FB30_Mask
#define CAN_F9R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F9R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F9R1_FB31                         CAN_F9R1_FB31_Mask

/************************************* CAN->F9R2  ***************************************/
#define CAN_F9R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F9R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F9R2_FB0                          CAN_F9R2_FB0_Mask
#define CAN_F9R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F9R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F9R2_FB1                          CAN_F9R2_FB1_Mask
#define CAN_F9R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F9R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F9R2_FB2                          CAN_F9R2_FB2_Mask
#define CAN_F9R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F9R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F9R2_FB3                          CAN_F9R2_FB3_Mask
#define CAN_F9R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F9R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F9R2_FB4                          CAN_F9R2_FB4_Mask
#define CAN_F9R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F9R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F9R2_FB5                          CAN_F9R2_FB5_Mask
#define CAN_F9R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F9R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F9R2_FB6                          CAN_F9R2_FB6_Mask
#define CAN_F9R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F9R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F9R2_FB7                          CAN_F9R2_FB7_Mask
#define CAN_F9R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F9R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F9R2_FB8                          CAN_F9R2_FB8_Mask
#define CAN_F9R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F9R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F9R2_FB9                          CAN_F9R2_FB9_Mask
#define CAN_F9R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F9R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F9R2_FB10                         CAN_F9R2_FB10_Mask
#define CAN_F9R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F9R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F9R2_FB11                         CAN_F9R2_FB11_Mask
#define CAN_F9R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F9R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F9R2_FB12                         CAN_F9R2_FB12_Mask
#define CAN_F9R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F9R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F9R2_FB13                         CAN_F9R2_FB13_Mask
#define CAN_F9R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F9R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F9R2_FB14                         CAN_F9R2_FB14_Mask
#define CAN_F9R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F9R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F9R2_FB15                         CAN_F9R2_FB15_Mask
#define CAN_F9R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F9R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F9R2_FB16                         CAN_F9R2_FB16_Mask
#define CAN_F9R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F9R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F9R2_FB17                         CAN_F9R2_FB17_Mask
#define CAN_F9R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F9R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F9R2_FB18                         CAN_F9R2_FB18_Mask
#define CAN_F9R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F9R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F9R2_FB19                         CAN_F9R2_FB19_Mask
#define CAN_F9R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F9R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F9R2_FB20                         CAN_F9R2_FB20_Mask
#define CAN_F9R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F9R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F9R2_FB21                         CAN_F9R2_FB21_Mask
#define CAN_F9R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F9R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F9R2_FB22                         CAN_F9R2_FB22_Mask
#define CAN_F9R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F9R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F9R2_FB23                         CAN_F9R2_FB23_Mask
#define CAN_F9R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F9R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F9R2_FB24                         CAN_F9R2_FB24_Mask
#define CAN_F9R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F9R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F9R2_FB25                         CAN_F9R2_FB25_Mask
#define CAN_F9R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F9R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F9R2_FB26                         CAN_F9R2_FB26_Mask
#define CAN_F9R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F9R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F9R2_FB27                         CAN_F9R2_FB27_Mask
#define CAN_F9R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F9R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F9R2_FB28                         CAN_F9R2_FB28_Mask
#define CAN_F9R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F9R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F9R2_FB29                         CAN_F9R2_FB29_Mask
#define CAN_F9R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F9R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F9R2_FB30                         CAN_F9R2_FB30_Mask
#define CAN_F9R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F9R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F9R2_FB31                         CAN_F9R2_FB31_Mask

/************************************* CAN->F10R1  **************************************/
#define CAN_F10R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F10R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F10R1_FB0                         CAN_F10R1_FB0_Mask
#define CAN_F10R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F10R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F10R1_FB1                         CAN_F10R1_FB1_Mask
#define CAN_F10R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F10R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F10R1_FB2                         CAN_F10R1_FB2_Mask
#define CAN_F10R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F10R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F10R1_FB3                         CAN_F10R1_FB3_Mask
#define CAN_F10R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F10R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F10R1_FB4                         CAN_F10R1_FB4_Mask
#define CAN_F10R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F10R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F10R1_FB5                         CAN_F10R1_FB5_Mask
#define CAN_F10R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F10R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F10R1_FB6                         CAN_F10R1_FB6_Mask
#define CAN_F10R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F10R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F10R1_FB7                         CAN_F10R1_FB7_Mask
#define CAN_F10R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F10R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F10R1_FB8                         CAN_F10R1_FB8_Mask
#define CAN_F10R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F10R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F10R1_FB9                         CAN_F10R1_FB9_Mask
#define CAN_F10R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F10R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F10R1_FB10                        CAN_F10R1_FB10_Mask
#define CAN_F10R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F10R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F10R1_FB11                        CAN_F10R1_FB11_Mask
#define CAN_F10R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F10R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F10R1_FB12                        CAN_F10R1_FB12_Mask
#define CAN_F10R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F10R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F10R1_FB13                        CAN_F10R1_FB13_Mask
#define CAN_F10R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F10R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F10R1_FB14                        CAN_F10R1_FB14_Mask
#define CAN_F10R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F10R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F10R1_FB15                        CAN_F10R1_FB15_Mask
#define CAN_F10R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F10R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F10R1_FB16                        CAN_F10R1_FB16_Mask
#define CAN_F10R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F10R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F10R1_FB17                        CAN_F10R1_FB17_Mask
#define CAN_F10R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F10R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F10R1_FB18                        CAN_F10R1_FB18_Mask
#define CAN_F10R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F10R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F10R1_FB19                        CAN_F10R1_FB19_Mask
#define CAN_F10R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F10R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F10R1_FB20                        CAN_F10R1_FB20_Mask
#define CAN_F10R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F10R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F10R1_FB21                        CAN_F10R1_FB21_Mask
#define CAN_F10R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F10R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F10R1_FB22                        CAN_F10R1_FB22_Mask
#define CAN_F10R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F10R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F10R1_FB23                        CAN_F10R1_FB23_Mask
#define CAN_F10R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F10R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F10R1_FB24                        CAN_F10R1_FB24_Mask
#define CAN_F10R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F10R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F10R1_FB25                        CAN_F10R1_FB25_Mask
#define CAN_F10R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F10R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F10R1_FB26                        CAN_F10R1_FB26_Mask
#define CAN_F10R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F10R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F10R1_FB27                        CAN_F10R1_FB27_Mask
#define CAN_F10R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F10R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F10R1_FB28                        CAN_F10R1_FB28_Mask
#define CAN_F10R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F10R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F10R1_FB29                        CAN_F10R1_FB29_Mask
#define CAN_F10R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F10R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F10R1_FB30                        CAN_F10R1_FB30_Mask
#define CAN_F10R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F10R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F10R1_FB31                        CAN_F10R1_FB31_Mask

/************************************* CAN->F10R2  **************************************/
#define CAN_F10R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F10R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F10R2_FB0                         CAN_F10R2_FB0_Mask
#define CAN_F10R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F10R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F10R2_FB1                         CAN_F10R2_FB1_Mask
#define CAN_F10R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F10R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F10R2_FB2                         CAN_F10R2_FB2_Mask
#define CAN_F10R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F10R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F10R2_FB3                         CAN_F10R2_FB3_Mask
#define CAN_F10R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F10R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F10R2_FB4                         CAN_F10R2_FB4_Mask
#define CAN_F10R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F10R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F10R2_FB5                         CAN_F10R2_FB5_Mask
#define CAN_F10R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F10R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F10R2_FB6                         CAN_F10R2_FB6_Mask
#define CAN_F10R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F10R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F10R2_FB7                         CAN_F10R2_FB7_Mask
#define CAN_F10R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F10R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F10R2_FB8                         CAN_F10R2_FB8_Mask
#define CAN_F10R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F10R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F10R2_FB9                         CAN_F10R2_FB9_Mask
#define CAN_F10R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F10R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F10R2_FB10                        CAN_F10R2_FB10_Mask
#define CAN_F10R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F10R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F10R2_FB11                        CAN_F10R2_FB11_Mask
#define CAN_F10R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F10R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F10R2_FB12                        CAN_F10R2_FB12_Mask
#define CAN_F10R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F10R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F10R2_FB13                        CAN_F10R2_FB13_Mask
#define CAN_F10R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F10R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F10R2_FB14                        CAN_F10R2_FB14_Mask
#define CAN_F10R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F10R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F10R2_FB15                        CAN_F10R2_FB15_Mask
#define CAN_F10R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F10R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F10R2_FB16                        CAN_F10R2_FB16_Mask
#define CAN_F10R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F10R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F10R2_FB17                        CAN_F10R2_FB17_Mask
#define CAN_F10R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F10R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F10R2_FB18                        CAN_F10R2_FB18_Mask
#define CAN_F10R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F10R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F10R2_FB19                        CAN_F10R2_FB19_Mask
#define CAN_F10R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F10R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F10R2_FB20                        CAN_F10R2_FB20_Mask
#define CAN_F10R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F10R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F10R2_FB21                        CAN_F10R2_FB21_Mask
#define CAN_F10R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F10R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F10R2_FB22                        CAN_F10R2_FB22_Mask
#define CAN_F10R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F10R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F10R2_FB23                        CAN_F10R2_FB23_Mask
#define CAN_F10R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F10R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F10R2_FB24                        CAN_F10R2_FB24_Mask
#define CAN_F10R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F10R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F10R2_FB25                        CAN_F10R2_FB25_Mask
#define CAN_F10R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F10R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F10R2_FB26                        CAN_F10R2_FB26_Mask
#define CAN_F10R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F10R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F10R2_FB27                        CAN_F10R2_FB27_Mask
#define CAN_F10R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F10R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F10R2_FB28                        CAN_F10R2_FB28_Mask
#define CAN_F10R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F10R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F10R2_FB29                        CAN_F10R2_FB29_Mask
#define CAN_F10R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F10R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F10R2_FB30                        CAN_F10R2_FB30_Mask
#define CAN_F10R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F10R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F10R2_FB31                        CAN_F10R2_FB31_Mask

/************************************* CAN->F11R1  **************************************/
#define CAN_F11R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F11R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F11R1_FB0                         CAN_F11R1_FB0_Mask
#define CAN_F11R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F11R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F11R1_FB1                         CAN_F11R1_FB1_Mask
#define CAN_F11R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F11R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F11R1_FB2                         CAN_F11R1_FB2_Mask
#define CAN_F11R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F11R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F11R1_FB3                         CAN_F11R1_FB3_Mask
#define CAN_F11R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F11R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F11R1_FB4                         CAN_F11R1_FB4_Mask
#define CAN_F11R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F11R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F11R1_FB5                         CAN_F11R1_FB5_Mask
#define CAN_F11R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F11R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F11R1_FB6                         CAN_F11R1_FB6_Mask
#define CAN_F11R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F11R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F11R1_FB7                         CAN_F11R1_FB7_Mask
#define CAN_F11R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F11R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F11R1_FB8                         CAN_F11R1_FB8_Mask
#define CAN_F11R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F11R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F11R1_FB9                         CAN_F11R1_FB9_Mask
#define CAN_F11R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F11R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F11R1_FB10                        CAN_F11R1_FB10_Mask
#define CAN_F11R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F11R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F11R1_FB11                        CAN_F11R1_FB11_Mask
#define CAN_F11R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F11R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F11R1_FB12                        CAN_F11R1_FB12_Mask
#define CAN_F11R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F11R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F11R1_FB13                        CAN_F11R1_FB13_Mask
#define CAN_F11R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F11R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F11R1_FB14                        CAN_F11R1_FB14_Mask
#define CAN_F11R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F11R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F11R1_FB15                        CAN_F11R1_FB15_Mask
#define CAN_F11R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F11R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F11R1_FB16                        CAN_F11R1_FB16_Mask
#define CAN_F11R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F11R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F11R1_FB17                        CAN_F11R1_FB17_Mask
#define CAN_F11R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F11R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F11R1_FB18                        CAN_F11R1_FB18_Mask
#define CAN_F11R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F11R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F11R1_FB19                        CAN_F11R1_FB19_Mask
#define CAN_F11R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F11R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F11R1_FB20                        CAN_F11R1_FB20_Mask
#define CAN_F11R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F11R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F11R1_FB21                        CAN_F11R1_FB21_Mask
#define CAN_F11R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F11R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F11R1_FB22                        CAN_F11R1_FB22_Mask
#define CAN_F11R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F11R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F11R1_FB23                        CAN_F11R1_FB23_Mask
#define CAN_F11R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F11R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F11R1_FB24                        CAN_F11R1_FB24_Mask
#define CAN_F11R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F11R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F11R1_FB25                        CAN_F11R1_FB25_Mask
#define CAN_F11R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F11R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F11R1_FB26                        CAN_F11R1_FB26_Mask
#define CAN_F11R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F11R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F11R1_FB27                        CAN_F11R1_FB27_Mask
#define CAN_F11R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F11R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F11R1_FB28                        CAN_F11R1_FB28_Mask
#define CAN_F11R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F11R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F11R1_FB29                        CAN_F11R1_FB29_Mask
#define CAN_F11R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F11R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F11R1_FB30                        CAN_F11R1_FB30_Mask
#define CAN_F11R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F11R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F11R1_FB31                        CAN_F11R1_FB31_Mask

/************************************* CAN->F11R2  **************************************/
#define CAN_F11R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F11R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F11R2_FB0                         CAN_F11R2_FB0_Mask
#define CAN_F11R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F11R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F11R2_FB1                         CAN_F11R2_FB1_Mask
#define CAN_F11R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F11R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F11R2_FB2                         CAN_F11R2_FB2_Mask
#define CAN_F11R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F11R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F11R2_FB3                         CAN_F11R2_FB3_Mask
#define CAN_F11R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F11R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F11R2_FB4                         CAN_F11R2_FB4_Mask
#define CAN_F11R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F11R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F11R2_FB5                         CAN_F11R2_FB5_Mask
#define CAN_F11R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F11R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F11R2_FB6                         CAN_F11R2_FB6_Mask
#define CAN_F11R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F11R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F11R2_FB7                         CAN_F11R2_FB7_Mask
#define CAN_F11R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F11R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F11R2_FB8                         CAN_F11R2_FB8_Mask
#define CAN_F11R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F11R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F11R2_FB9                         CAN_F11R2_FB9_Mask
#define CAN_F11R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F11R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F11R2_FB10                        CAN_F11R2_FB10_Mask
#define CAN_F11R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F11R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F11R2_FB11                        CAN_F11R2_FB11_Mask
#define CAN_F11R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F11R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F11R2_FB12                        CAN_F11R2_FB12_Mask
#define CAN_F11R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F11R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F11R2_FB13                        CAN_F11R2_FB13_Mask
#define CAN_F11R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F11R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F11R2_FB14                        CAN_F11R2_FB14_Mask
#define CAN_F11R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F11R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F11R2_FB15                        CAN_F11R2_FB15_Mask
#define CAN_F11R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F11R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F11R2_FB16                        CAN_F11R2_FB16_Mask
#define CAN_F11R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F11R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F11R2_FB17                        CAN_F11R2_FB17_Mask
#define CAN_F11R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F11R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F11R2_FB18                        CAN_F11R2_FB18_Mask
#define CAN_F11R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F11R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F11R2_FB19                        CAN_F11R2_FB19_Mask
#define CAN_F11R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F11R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F11R2_FB20                        CAN_F11R2_FB20_Mask
#define CAN_F11R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F11R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F11R2_FB21                        CAN_F11R2_FB21_Mask
#define CAN_F11R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F11R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F11R2_FB22                        CAN_F11R2_FB22_Mask
#define CAN_F11R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F11R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F11R2_FB23                        CAN_F11R2_FB23_Mask
#define CAN_F11R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F11R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F11R2_FB24                        CAN_F11R2_FB24_Mask
#define CAN_F11R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F11R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F11R2_FB25                        CAN_F11R2_FB25_Mask
#define CAN_F11R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F11R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F11R2_FB26                        CAN_F11R2_FB26_Mask
#define CAN_F11R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F11R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F11R2_FB27                        CAN_F11R2_FB27_Mask
#define CAN_F11R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F11R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F11R2_FB28                        CAN_F11R2_FB28_Mask
#define CAN_F11R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F11R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F11R2_FB29                        CAN_F11R2_FB29_Mask
#define CAN_F11R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F11R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F11R2_FB30                        CAN_F11R2_FB30_Mask
#define CAN_F11R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F11R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F11R2_FB31                        CAN_F11R2_FB31_Mask

/************************************* CAN->F12R1  **************************************/
#define CAN_F12R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F12R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F12R1_FB0                         CAN_F12R1_FB0_Mask
#define CAN_F12R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F12R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F12R1_FB1                         CAN_F12R1_FB1_Mask
#define CAN_F12R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F12R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F12R1_FB2                         CAN_F12R1_FB2_Mask
#define CAN_F12R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F12R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F12R1_FB3                         CAN_F12R1_FB3_Mask
#define CAN_F12R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F12R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F12R1_FB4                         CAN_F12R1_FB4_Mask
#define CAN_F12R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F12R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F12R1_FB5                         CAN_F12R1_FB5_Mask
#define CAN_F12R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F12R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F12R1_FB6                         CAN_F12R1_FB6_Mask
#define CAN_F12R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F12R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F12R1_FB7                         CAN_F12R1_FB7_Mask
#define CAN_F12R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F12R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F12R1_FB8                         CAN_F12R1_FB8_Mask
#define CAN_F12R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F12R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F12R1_FB9                         CAN_F12R1_FB9_Mask
#define CAN_F12R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F12R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F12R1_FB10                        CAN_F12R1_FB10_Mask
#define CAN_F12R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F12R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F12R1_FB11                        CAN_F12R1_FB11_Mask
#define CAN_F12R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F12R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F12R1_FB12                        CAN_F12R1_FB12_Mask
#define CAN_F12R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F12R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F12R1_FB13                        CAN_F12R1_FB13_Mask
#define CAN_F12R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F12R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F12R1_FB14                        CAN_F12R1_FB14_Mask
#define CAN_F12R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F12R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F12R1_FB15                        CAN_F12R1_FB15_Mask
#define CAN_F12R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F12R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F12R1_FB16                        CAN_F12R1_FB16_Mask
#define CAN_F12R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F12R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F12R1_FB17                        CAN_F12R1_FB17_Mask
#define CAN_F12R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F12R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F12R1_FB18                        CAN_F12R1_FB18_Mask
#define CAN_F12R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F12R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F12R1_FB19                        CAN_F12R1_FB19_Mask
#define CAN_F12R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F12R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F12R1_FB20                        CAN_F12R1_FB20_Mask
#define CAN_F12R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F12R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F12R1_FB21                        CAN_F12R1_FB21_Mask
#define CAN_F12R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F12R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F12R1_FB22                        CAN_F12R1_FB22_Mask
#define CAN_F12R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F12R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F12R1_FB23                        CAN_F12R1_FB23_Mask
#define CAN_F12R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F12R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F12R1_FB24                        CAN_F12R1_FB24_Mask
#define CAN_F12R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F12R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F12R1_FB25                        CAN_F12R1_FB25_Mask
#define CAN_F12R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F12R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F12R1_FB26                        CAN_F12R1_FB26_Mask
#define CAN_F12R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F12R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F12R1_FB27                        CAN_F12R1_FB27_Mask
#define CAN_F12R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F12R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F12R1_FB28                        CAN_F12R1_FB28_Mask
#define CAN_F12R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F12R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F12R1_FB29                        CAN_F12R1_FB29_Mask
#define CAN_F12R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F12R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F12R1_FB30                        CAN_F12R1_FB30_Mask
#define CAN_F12R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F12R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F12R1_FB31                        CAN_F12R1_FB31_Mask

/************************************* CAN->F12R2  **************************************/
#define CAN_F12R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F12R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F12R2_FB0                         CAN_F12R2_FB0_Mask
#define CAN_F12R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F12R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F12R2_FB1                         CAN_F12R2_FB1_Mask
#define CAN_F12R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F12R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F12R2_FB2                         CAN_F12R2_FB2_Mask
#define CAN_F12R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F12R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F12R2_FB3                         CAN_F12R2_FB3_Mask
#define CAN_F12R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F12R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F12R2_FB4                         CAN_F12R2_FB4_Mask
#define CAN_F12R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F12R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F12R2_FB5                         CAN_F12R2_FB5_Mask
#define CAN_F12R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F12R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F12R2_FB6                         CAN_F12R2_FB6_Mask
#define CAN_F12R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F12R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F12R2_FB7                         CAN_F12R2_FB7_Mask
#define CAN_F12R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F12R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F12R2_FB8                         CAN_F12R2_FB8_Mask
#define CAN_F12R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F12R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F12R2_FB9                         CAN_F12R2_FB9_Mask
#define CAN_F12R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F12R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F12R2_FB10                        CAN_F12R2_FB10_Mask
#define CAN_F12R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F12R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F12R2_FB11                        CAN_F12R2_FB11_Mask
#define CAN_F12R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F12R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F12R2_FB12                        CAN_F12R2_FB12_Mask
#define CAN_F12R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F12R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F12R2_FB13                        CAN_F12R2_FB13_Mask
#define CAN_F12R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F12R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F12R2_FB14                        CAN_F12R2_FB14_Mask
#define CAN_F12R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F12R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F12R2_FB15                        CAN_F12R2_FB15_Mask
#define CAN_F12R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F12R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F12R2_FB16                        CAN_F12R2_FB16_Mask
#define CAN_F12R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F12R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F12R2_FB17                        CAN_F12R2_FB17_Mask
#define CAN_F12R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F12R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F12R2_FB18                        CAN_F12R2_FB18_Mask
#define CAN_F12R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F12R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F12R2_FB19                        CAN_F12R2_FB19_Mask
#define CAN_F12R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F12R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F12R2_FB20                        CAN_F12R2_FB20_Mask
#define CAN_F12R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F12R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F12R2_FB21                        CAN_F12R2_FB21_Mask
#define CAN_F12R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F12R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F12R2_FB22                        CAN_F12R2_FB22_Mask
#define CAN_F12R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F12R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F12R2_FB23                        CAN_F12R2_FB23_Mask
#define CAN_F12R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F12R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F12R2_FB24                        CAN_F12R2_FB24_Mask
#define CAN_F12R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F12R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F12R2_FB25                        CAN_F12R2_FB25_Mask
#define CAN_F12R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F12R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F12R2_FB26                        CAN_F12R2_FB26_Mask
#define CAN_F12R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F12R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F12R2_FB27                        CAN_F12R2_FB27_Mask
#define CAN_F12R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F12R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F12R2_FB28                        CAN_F12R2_FB28_Mask
#define CAN_F12R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F12R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F12R2_FB29                        CAN_F12R2_FB29_Mask
#define CAN_F12R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F12R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F12R2_FB30                        CAN_F12R2_FB30_Mask
#define CAN_F12R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F12R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F12R2_FB31                        CAN_F12R2_FB31_Mask

/************************************* CAN->F13R1  **************************************/
#define CAN_F13R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F13R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F13R1_FB0                         CAN_F13R1_FB0_Mask
#define CAN_F13R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F13R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F13R1_FB1                         CAN_F13R1_FB1_Mask
#define CAN_F13R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F13R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F13R1_FB2                         CAN_F13R1_FB2_Mask
#define CAN_F13R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F13R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F13R1_FB3                         CAN_F13R1_FB3_Mask
#define CAN_F13R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F13R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F13R1_FB4                         CAN_F13R1_FB4_Mask
#define CAN_F13R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F13R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F13R1_FB5                         CAN_F13R1_FB5_Mask
#define CAN_F13R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F13R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F13R1_FB6                         CAN_F13R1_FB6_Mask
#define CAN_F13R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F13R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F13R1_FB7                         CAN_F13R1_FB7_Mask
#define CAN_F13R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F13R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F13R1_FB8                         CAN_F13R1_FB8_Mask
#define CAN_F13R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F13R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F13R1_FB9                         CAN_F13R1_FB9_Mask
#define CAN_F13R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F13R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F13R1_FB10                        CAN_F13R1_FB10_Mask
#define CAN_F13R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F13R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F13R1_FB11                        CAN_F13R1_FB11_Mask
#define CAN_F13R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F13R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F13R1_FB12                        CAN_F13R1_FB12_Mask
#define CAN_F13R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F13R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F13R1_FB13                        CAN_F13R1_FB13_Mask
#define CAN_F13R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F13R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F13R1_FB14                        CAN_F13R1_FB14_Mask
#define CAN_F13R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F13R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F13R1_FB15                        CAN_F13R1_FB15_Mask
#define CAN_F13R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F13R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F13R1_FB16                        CAN_F13R1_FB16_Mask
#define CAN_F13R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F13R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F13R1_FB17                        CAN_F13R1_FB17_Mask
#define CAN_F13R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F13R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F13R1_FB18                        CAN_F13R1_FB18_Mask
#define CAN_F13R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F13R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F13R1_FB19                        CAN_F13R1_FB19_Mask
#define CAN_F13R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F13R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F13R1_FB20                        CAN_F13R1_FB20_Mask
#define CAN_F13R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F13R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F13R1_FB21                        CAN_F13R1_FB21_Mask
#define CAN_F13R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F13R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F13R1_FB22                        CAN_F13R1_FB22_Mask
#define CAN_F13R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F13R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F13R1_FB23                        CAN_F13R1_FB23_Mask
#define CAN_F13R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F13R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F13R1_FB24                        CAN_F13R1_FB24_Mask
#define CAN_F13R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F13R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F13R1_FB25                        CAN_F13R1_FB25_Mask
#define CAN_F13R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F13R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F13R1_FB26                        CAN_F13R1_FB26_Mask
#define CAN_F13R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F13R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F13R1_FB27                        CAN_F13R1_FB27_Mask
#define CAN_F13R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F13R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F13R1_FB28                        CAN_F13R1_FB28_Mask
#define CAN_F13R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F13R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F13R1_FB29                        CAN_F13R1_FB29_Mask
#define CAN_F13R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F13R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F13R1_FB30                        CAN_F13R1_FB30_Mask
#define CAN_F13R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F13R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F13R1_FB31                        CAN_F13R1_FB31_Mask

/************************************* CAN->F13R2  **************************************/
#define CAN_F13R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F13R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F13R2_FB0                         CAN_F13R2_FB0_Mask
#define CAN_F13R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F13R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F13R2_FB1                         CAN_F13R2_FB1_Mask
#define CAN_F13R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F13R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F13R2_FB2                         CAN_F13R2_FB2_Mask
#define CAN_F13R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F13R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F13R2_FB3                         CAN_F13R2_FB3_Mask
#define CAN_F13R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F13R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F13R2_FB4                         CAN_F13R2_FB4_Mask
#define CAN_F13R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F13R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F13R2_FB5                         CAN_F13R2_FB5_Mask
#define CAN_F13R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F13R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F13R2_FB6                         CAN_F13R2_FB6_Mask
#define CAN_F13R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F13R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F13R2_FB7                         CAN_F13R2_FB7_Mask
#define CAN_F13R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F13R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F13R2_FB8                         CAN_F13R2_FB8_Mask
#define CAN_F13R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F13R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F13R2_FB9                         CAN_F13R2_FB9_Mask
#define CAN_F13R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F13R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F13R2_FB10                        CAN_F13R2_FB10_Mask
#define CAN_F13R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F13R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F13R2_FB11                        CAN_F13R2_FB11_Mask
#define CAN_F13R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F13R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F13R2_FB12                        CAN_F13R2_FB12_Mask
#define CAN_F13R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F13R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F13R2_FB13                        CAN_F13R2_FB13_Mask
#define CAN_F13R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F13R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F13R2_FB14                        CAN_F13R2_FB14_Mask
#define CAN_F13R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F13R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F13R2_FB15                        CAN_F13R2_FB15_Mask
#define CAN_F13R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F13R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F13R2_FB16                        CAN_F13R2_FB16_Mask
#define CAN_F13R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F13R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F13R2_FB17                        CAN_F13R2_FB17_Mask
#define CAN_F13R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F13R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F13R2_FB18                        CAN_F13R2_FB18_Mask
#define CAN_F13R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F13R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F13R2_FB19                        CAN_F13R2_FB19_Mask
#define CAN_F13R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F13R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F13R2_FB20                        CAN_F13R2_FB20_Mask
#define CAN_F13R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F13R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F13R2_FB21                        CAN_F13R2_FB21_Mask
#define CAN_F13R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F13R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F13R2_FB22                        CAN_F13R2_FB22_Mask
#define CAN_F13R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F13R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F13R2_FB23                        CAN_F13R2_FB23_Mask
#define CAN_F13R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F13R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F13R2_FB24                        CAN_F13R2_FB24_Mask
#define CAN_F13R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F13R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F13R2_FB25                        CAN_F13R2_FB25_Mask
#define CAN_F13R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F13R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F13R2_FB26                        CAN_F13R2_FB26_Mask
#define CAN_F13R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F13R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F13R2_FB27                        CAN_F13R2_FB27_Mask
#define CAN_F13R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F13R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F13R2_FB28                        CAN_F13R2_FB28_Mask
#define CAN_F13R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F13R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F13R2_FB29                        CAN_F13R2_FB29_Mask
#define CAN_F13R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F13R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F13R2_FB30                        CAN_F13R2_FB30_Mask
#define CAN_F13R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F13R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F13R2_FB31                        CAN_F13R2_FB31_Mask

/*****************************************************************************************
*                                     Peripheral SPI                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t CRCPR;                  /* CRCPR */
  __I  uint32_t RXCRCR;                 /* RXCRCR */
  __I  uint32_t TXCRCR;                 /* TXCRCR */
  __IO uint32_t I2SCFGR;                /* I2SCFGR */
  __IO uint32_t I2SPR;                  /* I2SPR */
}SPI_TypeDef;

/************************************** SPI->CR1  ***************************************/
#define SPI_CR1_BIDIMODE_Pos                  ((uint32_t)15)                    /* Bidirectional data mode enable */
#define SPI_CR1_BIDIMODE_Mask                 (((uint32_t)0x01) << 15)
#define SPI_CR1_BIDIMODE                      SPI_CR1_BIDIMODE_Mask
#define SPI_CR1_BIDIOE_Pos                    ((uint32_t)14)                    /* Output enable in bidirectional mode */
#define SPI_CR1_BIDIOE_Mask                   (((uint32_t)0x01) << 14)
#define SPI_CR1_BIDIOE                        SPI_CR1_BIDIOE_Mask
#define SPI_CR1_CRCEN_Pos                     ((uint32_t)13)                    /* Hardware CRC calculation enable */
#define SPI_CR1_CRCEN_Mask                    (((uint32_t)0x01) << 13)
#define SPI_CR1_CRCEN                         SPI_CR1_CRCEN_Mask
#define SPI_CR1_CRCNEXT_Pos                   ((uint32_t)12)                    /* Transmit CRC next */
#define SPI_CR1_CRCNEXT_Mask                  (((uint32_t)0x01) << 12)
#define SPI_CR1_CRCNEXT                       SPI_CR1_CRCNEXT_Mask
#define SPI_CR1_DFF_Pos                       ((uint32_t)11)                    /* Data frame format */
#define SPI_CR1_DFF_Mask                      (((uint32_t)0x01) << 11)
#define SPI_CR1_DFF                           SPI_CR1_DFF_Mask
#define SPI_CR1_RXONLY_Pos                    ((uint32_t)10)                    /* Receive only */
#define SPI_CR1_RXONLY_Mask                   (((uint32_t)0x01) << 10)
#define SPI_CR1_RXONLY                        SPI_CR1_RXONLY_Mask
#define SPI_CR1_SSM_Pos                       ((uint32_t)9)                     /* Software slave management */
#define SPI_CR1_SSM_Mask                      (((uint32_t)0x01) << 9)
#define SPI_CR1_SSM                           SPI_CR1_SSM_Mask
#define SPI_CR1_SSI_Pos                       ((uint32_t)8)                     /* Internal slave select */
#define SPI_CR1_SSI_Mask                      (((uint32_t)0x01) << 8)
#define SPI_CR1_SSI                           SPI_CR1_SSI_Mask
#define SPI_CR1_LSBFIRST_Pos                  ((uint32_t)7)                     /* Frame format */
#define SPI_CR1_LSBFIRST_Mask                 (((uint32_t)0x01) << 7)
#define SPI_CR1_LSBFIRST                      SPI_CR1_LSBFIRST_Mask
#define SPI_CR1_SPE_Pos                       ((uint32_t)6)                     /* SPI enable */
#define SPI_CR1_SPE_Mask                      (((uint32_t)0x01) << 6)
#define SPI_CR1_SPE                           SPI_CR1_SPE_Mask
#define SPI_CR1_BR_Pos                        ((uint32_t)3)                     /* Baud rate control */
#define SPI_CR1_BR_Mask                       (((uint32_t)0x07) << 3)
#define SPI_CR1_BR                            SPI_CR1_BR_Mask
#define SPI_CR1_BR_0                          (((uint32_t)0x1 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_1                          (((uint32_t)0x2 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_2                          (((uint32_t)0x4 << SPI_CR1_BR_Pos))
#define SPI_CR1_MSTR_Pos                      ((uint32_t)2)                     /* Master selection */
#define SPI_CR1_MSTR_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR1_MSTR                          SPI_CR1_MSTR_Mask
#define SPI_CR1_CPOL_Pos                      ((uint32_t)1)                     /* Clock polarity */
#define SPI_CR1_CPOL_Mask                     (((uint32_t)0x01) << 1)
#define SPI_CR1_CPOL                          SPI_CR1_CPOL_Mask
#define SPI_CR1_CPHA_Pos                      ((uint32_t)0)                     /* Clock phase */
#define SPI_CR1_CPHA_Mask                     (((uint32_t)0x01) << 0)
#define SPI_CR1_CPHA                          SPI_CR1_CPHA_Mask

/************************************** SPI->CR2  ***************************************/
#define SPI_CR2_TXEIE_Pos                     ((uint32_t)7)                     /* Tx buffer empty interrupt enable */
#define SPI_CR2_TXEIE_Mask                    (((uint32_t)0x01) << 7)
#define SPI_CR2_TXEIE                         SPI_CR2_TXEIE_Mask
#define SPI_CR2_RXNEIE_Pos                    ((uint32_t)6)                     /* RX buffer not empty interrupt enable */
#define SPI_CR2_RXNEIE_Mask                   (((uint32_t)0x01) << 6)
#define SPI_CR2_RXNEIE                        SPI_CR2_RXNEIE_Mask
#define SPI_CR2_ERRIE_Pos                     ((uint32_t)5)                     /* Error interrupt enable */
#define SPI_CR2_ERRIE_Mask                    (((uint32_t)0x01) << 5)
#define SPI_CR2_ERRIE                         SPI_CR2_ERRIE_Mask
#define SPI_CR2_SSOE_Pos                      ((uint32_t)2)                     /* SS output enable */
#define SPI_CR2_SSOE_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR2_SSOE                          SPI_CR2_SSOE_Mask
#define SPI_CR2_TXDMAEN_Pos                   ((uint32_t)1)                     /* Tx buffer DMA enable */
#define SPI_CR2_TXDMAEN_Mask                  (((uint32_t)0x01) << 1)
#define SPI_CR2_TXDMAEN                       SPI_CR2_TXDMAEN_Mask
#define SPI_CR2_RXDMAEN_Pos                   ((uint32_t)0)                     /* Rx buffer DMA enable */
#define SPI_CR2_RXDMAEN_Mask                  (((uint32_t)0x01) << 0)
#define SPI_CR2_RXDMAEN                       SPI_CR2_RXDMAEN_Mask

/************************************** SPI->SR  ****************************************/
#define SPI_SR_BSY_Pos                        ((uint32_t)7)                     /* Busy flag */
#define SPI_SR_BSY_Mask                       (((uint32_t)0x01) << 7)
#define SPI_SR_BSY                            SPI_SR_BSY_Mask
#define SPI_SR_OVR_Pos                        ((uint32_t)6)                     /* Overrun flag */
#define SPI_SR_OVR_Mask                       (((uint32_t)0x01) << 6)
#define SPI_SR_OVR                            SPI_SR_OVR_Mask
#define SPI_SR_MODF_Pos                       ((uint32_t)5)                     /* Mode fault */
#define SPI_SR_MODF_Mask                      (((uint32_t)0x01) << 5)
#define SPI_SR_MODF                           SPI_SR_MODF_Mask
#define SPI_SR_CRCERR_Pos                     ((uint32_t)4)                     /* CRC error flag */
#define SPI_SR_CRCERR_Mask                    (((uint32_t)0x01) << 4)
#define SPI_SR_CRCERR                         SPI_SR_CRCERR_Mask
#define SPI_SR_UDR_Pos                        ((uint32_t)3)                     /* Underrun flag */
#define SPI_SR_UDR_Mask                       (((uint32_t)0x01) << 3)
#define SPI_SR_UDR                            SPI_SR_UDR_Mask
#define SPI_SR_CHSIDE_Pos                     ((uint32_t)2)                     /* Channel side */
#define SPI_SR_CHSIDE_Mask                    (((uint32_t)0x01) << 2)
#define SPI_SR_CHSIDE                         SPI_SR_CHSIDE_Mask
#define SPI_SR_TXE_Pos                        ((uint32_t)1)                     /* Transmit buffer empty */
#define SPI_SR_TXE_Mask                       (((uint32_t)0x01) << 1)
#define SPI_SR_TXE                            SPI_SR_TXE_Mask
#define SPI_SR_RXNE_Pos                       ((uint32_t)0)                     /* Receive buffer not empty */
#define SPI_SR_RXNE_Mask                      (((uint32_t)0x01) << 0)
#define SPI_SR_RXNE                           SPI_SR_RXNE_Mask

/************************************** SPI->DR  ****************************************/
#define SPI_DR_DR_Pos                         ((uint32_t)0)                     /* Data register */
#define SPI_DR_DR_Mask                        (((uint32_t)0xFFFF) << 0)
#define SPI_DR_DR                             SPI_DR_DR_Mask

/************************************* SPI->CRCPR  **************************************/
#define SPI_CRCPR_CRCPOLY_Pos                 ((uint32_t)0)                     /* CRC polynomial register */
#define SPI_CRCPR_CRCPOLY_Mask                (((uint32_t)0xFFFF) << 0)
#define SPI_CRCPR_CRCPOLY                     SPI_CRCPR_CRCPOLY_Mask

/************************************ SPI->RXCRCR  **************************************/
#define SPI_RXCRCR_RxCRC_Pos                  ((uint32_t)0)                     /* Rx CRC register */
#define SPI_RXCRCR_RxCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_RXCRCR_RxCRC                      SPI_RXCRCR_RxCRC_Mask

/************************************ SPI->TXCRCR  **************************************/
#define SPI_TXCRCR_TxCRC_Pos                  ((uint32_t)0)                     /* Tx CRC register */
#define SPI_TXCRCR_TxCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_TXCRCR_TxCRC                      SPI_TXCRCR_TxCRC_Mask

/************************************ SPI->I2SCFGR  *************************************/
#define SPI_I2SCFGR_I2SMOD_Pos                ((uint32_t)11)                    /* I2S mode selection */
#define SPI_I2SCFGR_I2SMOD_Mask               (((uint32_t)0x01) << 11)
#define SPI_I2SCFGR_I2SMOD                    SPI_I2SCFGR_I2SMOD_Mask
#define SPI_I2SCFGR_I2SE_Pos                  ((uint32_t)10)                    /* I2S enable */
#define SPI_I2SCFGR_I2SE_Mask                 (((uint32_t)0x01) << 10)
#define SPI_I2SCFGR_I2SE                      SPI_I2SCFGR_I2SE_Mask
#define SPI_I2SCFGR_I2SCFG_Pos                ((uint32_t)8)                     /* I2S configuration mode */
#define SPI_I2SCFGR_I2SCFG_Mask               (((uint32_t)0x03) << 8)
#define SPI_I2SCFGR_I2SCFG                    SPI_I2SCFGR_I2SCFG_Mask
#define SPI_I2SCFGR_I2SCFG_0                  (((uint32_t)0x1 << SPI_I2SCFGR_I2SCFG_Pos))
#define SPI_I2SCFGR_I2SCFG_1                  (((uint32_t)0x2 << SPI_I2SCFGR_I2SCFG_Pos))
#define SPI_I2SCFGR_PCMSYNC_Pos               ((uint32_t)7)                     /* PCM frame synchronization */
#define SPI_I2SCFGR_PCMSYNC_Mask              (((uint32_t)0x01) << 7)
#define SPI_I2SCFGR_PCMSYNC                   SPI_I2SCFGR_PCMSYNC_Mask
#define SPI_I2SCFGR_I2SSTD_Pos                ((uint32_t)4)                     /* I2S standard selection */
#define SPI_I2SCFGR_I2SSTD_Mask               (((uint32_t)0x03) << 4)
#define SPI_I2SCFGR_I2SSTD                    SPI_I2SCFGR_I2SSTD_Mask
#define SPI_I2SCFGR_I2SSTD_0                  (((uint32_t)0x1 << SPI_I2SCFGR_I2SSTD_Pos))
#define SPI_I2SCFGR_I2SSTD_1                  (((uint32_t)0x2 << SPI_I2SCFGR_I2SSTD_Pos))
#define SPI_I2SCFGR_CKPOL_Pos                 ((uint32_t)3)                     /* Steady state clock polarity */
#define SPI_I2SCFGR_CKPOL_Mask                (((uint32_t)0x01) << 3)
#define SPI_I2SCFGR_CKPOL                     SPI_I2SCFGR_CKPOL_Mask
#define SPI_I2SCFGR_DATLEN_Pos                ((uint32_t)1)                     /* Data length to be transferred */
#define SPI_I2SCFGR_DATLEN_Mask               (((uint32_t)0x03) << 1)
#define SPI_I2SCFGR_DATLEN                    SPI_I2SCFGR_DATLEN_Mask
#define SPI_I2SCFGR_DATLEN_0                  (((uint32_t)0x1 << SPI_I2SCFGR_DATLEN_Pos))
#define SPI_I2SCFGR_DATLEN_1                  (((uint32_t)0x2 << SPI_I2SCFGR_DATLEN_Pos))
#define SPI_I2SCFGR_CHLEN_Pos                 ((uint32_t)0)                     /* Channel length, number of bits per audio channel */
#define SPI_I2SCFGR_CHLEN_Mask                (((uint32_t)0x01) << 0)
#define SPI_I2SCFGR_CHLEN                     SPI_I2SCFGR_CHLEN_Mask

/************************************* SPI->I2SPR  **************************************/
#define SPI_I2SPR_MCKOE_Pos                   ((uint32_t)9)                     /* Master clock output enable */
#define SPI_I2SPR_MCKOE_Mask                  (((uint32_t)0x01) << 9)
#define SPI_I2SPR_MCKOE                       SPI_I2SPR_MCKOE_Mask
#define SPI_I2SPR_ODD_Pos                     ((uint32_t)8)                     /* Odd factor for the prescaler */
#define SPI_I2SPR_ODD_Mask                    (((uint32_t)0x01) << 8)
#define SPI_I2SPR_ODD                         SPI_I2SPR_ODD_Mask
#define SPI_I2SPR_I2SDIV_Pos                  ((uint32_t)0)                     /* I2S linear prescaler */
#define SPI_I2SPR_I2SDIV_Mask                 (((uint32_t)0xFF) << 0)
#define SPI_I2SPR_I2SDIV                      SPI_I2SPR_I2SDIV_Mask
#define SPI_I2SPR_I2SDIV_0                    (((uint32_t)0x1))
#define SPI_I2SPR_I2SDIV_1                    (((uint32_t)0x2))
#define SPI_I2SPR_I2SDIV_2                    (((uint32_t)0x4))
#define SPI_I2SPR_I2SDIV_3                    (((uint32_t)0x8))
#define SPI_I2SPR_I2SDIV_4                    (((uint32_t)0x10))
#define SPI_I2SPR_I2SDIV_5                    (((uint32_t)0x20))
#define SPI_I2SPR_I2SDIV_6                    (((uint32_t)0x40))
#define SPI_I2SPR_I2SDIV_7                    (((uint32_t)0x80))

/*****************************************************************************************
*                                     Peripheral I2C                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t OAR1;                   /* OAR1 */
  __IO uint32_t OAR2;                   /* OAR2 */
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t SR1;                    /* SR1 */
  __I  uint32_t SR2;                    /* SR2 */
  __IO uint32_t CCR;                    /* CCR */
  __IO uint32_t TRISE;                  /* TRISE */
  __IO uint32_t THOLD;                  /* THOLD */
}I2C_TypeDef;

/************************************** I2C->CR1  ***************************************/
#define I2C_CR1_SWRST_Pos                     ((uint32_t)15)                    /* Software reset */
#define I2C_CR1_SWRST_Mask                    (((uint32_t)0x01) << 15)
#define I2C_CR1_SWRST                         I2C_CR1_SWRST_Mask
#define I2C_CR1_ALERT_Pos                     ((uint32_t)13)                    /* SMBus alert */
#define I2C_CR1_ALERT_Mask                    (((uint32_t)0x01) << 13)
#define I2C_CR1_ALERT                         I2C_CR1_ALERT_Mask
#define I2C_CR1_PEC_Pos                       ((uint32_t)12)                    /* Packet error checking */
#define I2C_CR1_PEC_Mask                      (((uint32_t)0x01) << 12)
#define I2C_CR1_PEC                           I2C_CR1_PEC_Mask
#define I2C_CR1_POS_Pos                       ((uint32_t)11)                    /* Acknowledge/PEC Position of data reception */
#define I2C_CR1_POS_Mask                      (((uint32_t)0x01) << 11)
#define I2C_CR1_POS                           I2C_CR1_POS_Mask
#define I2C_CR1_ACK_Pos                       ((uint32_t)10)                    /* Acknowledge enable */
#define I2C_CR1_ACK_Mask                      (((uint32_t)0x01) << 10)
#define I2C_CR1_ACK                           I2C_CR1_ACK_Mask
#define I2C_CR1_STOP_Pos                      ((uint32_t)9)                     /* Stop generation */
#define I2C_CR1_STOP_Mask                     (((uint32_t)0x01) << 9)
#define I2C_CR1_STOP                          I2C_CR1_STOP_Mask
#define I2C_CR1_START_Pos                     ((uint32_t)8)                     /* Start generation */
#define I2C_CR1_START_Mask                    (((uint32_t)0x01) << 8)
#define I2C_CR1_START                         I2C_CR1_START_Mask
#define I2C_CR1_NOSTRETCH_Pos                 ((uint32_t)7)                     /* Clock stretching disable of slave mode */
#define I2C_CR1_NOSTRETCH_Mask                (((uint32_t)0x01) << 7)
#define I2C_CR1_NOSTRETCH                     I2C_CR1_NOSTRETCH_Mask
#define I2C_CR1_ENGC_Pos                      ((uint32_t)6)                     /* General call enable */
#define I2C_CR1_ENGC_Mask                     (((uint32_t)0x01) << 6)
#define I2C_CR1_ENGC                          I2C_CR1_ENGC_Mask
#define I2C_CR1_ENPEC_Pos                     ((uint32_t)5)                     /* PEC enable */
#define I2C_CR1_ENPEC_Mask                    (((uint32_t)0x01) << 5)
#define I2C_CR1_ENPEC                         I2C_CR1_ENPEC_Mask
#define I2C_CR1_ENARP_Pos                     ((uint32_t)4)                     /* ARP enable */
#define I2C_CR1_ENARP_Mask                    (((uint32_t)0x01) << 4)
#define I2C_CR1_ENARP                         I2C_CR1_ENARP_Mask
#define I2C_CR1_SMBTYPE_Pos                   ((uint32_t)3)                     /* SMBus type */
#define I2C_CR1_SMBTYPE_Mask                  (((uint32_t)0x01) << 3)
#define I2C_CR1_SMBTYPE                       I2C_CR1_SMBTYPE_Mask
#define I2C_CR1_SMBUS_Pos                     ((uint32_t)1)                     /* SMBus mode */
#define I2C_CR1_SMBUS_Mask                    (((uint32_t)0x01) << 1)
#define I2C_CR1_SMBUS                         I2C_CR1_SMBUS_Mask
#define I2C_CR1_PE_Pos                        ((uint32_t)0)                     /* Peripheral enable */
#define I2C_CR1_PE_Mask                       (((uint32_t)0x01) << 0)
#define I2C_CR1_PE                            I2C_CR1_PE_Mask

/************************************** I2C->CR2  ***************************************/
#define I2C_CR2_LAST_Pos                      ((uint32_t)12)                    /* DMA last transfer */
#define I2C_CR2_LAST_Mask                     (((uint32_t)0x01) << 12)
#define I2C_CR2_LAST                          I2C_CR2_LAST_Mask
#define I2C_CR2_DMAEN_Pos                     ((uint32_t)11)                    /* DMA requests enable */
#define I2C_CR2_DMAEN_Mask                    (((uint32_t)0x01) << 11)
#define I2C_CR2_DMAEN                         I2C_CR2_DMAEN_Mask
#define I2C_CR2_ITBUFEN_Pos                   ((uint32_t)10)                    /* Buffer interrupt enable */
#define I2C_CR2_ITBUFEN_Mask                  (((uint32_t)0x01) << 10)
#define I2C_CR2_ITBUFEN                       I2C_CR2_ITBUFEN_Mask
#define I2C_CR2_ITEVTEN_Pos                   ((uint32_t)9)                     /* Event interrupt enable */
#define I2C_CR2_ITEVTEN_Mask                  (((uint32_t)0x01) << 9)
#define I2C_CR2_ITEVTEN                       I2C_CR2_ITEVTEN_Mask
#define I2C_CR2_ITERREN_Pos                   ((uint32_t)8)                     /* Error interrupt enable */
#define I2C_CR2_ITERREN_Mask                  (((uint32_t)0x01) << 8)
#define I2C_CR2_ITERREN                       I2C_CR2_ITERREN_Mask
#define I2C_CR2_FREQ_Pos                      ((uint32_t)0)                     /* Peripheral clock frequency */
#define I2C_CR2_FREQ_Mask                     (((uint32_t)0x3F) << 0)
#define I2C_CR2_FREQ                          I2C_CR2_FREQ_Mask
#define I2C_CR2_FREQ_0                        (((uint32_t)0x1))
#define I2C_CR2_FREQ_1                        (((uint32_t)0x2))
#define I2C_CR2_FREQ_2                        (((uint32_t)0x4))
#define I2C_CR2_FREQ_3                        (((uint32_t)0x8))
#define I2C_CR2_FREQ_4                        (((uint32_t)0x10))
#define I2C_CR2_FREQ_5                        (((uint32_t)0x20))

/************************************* I2C->OAR1  ***************************************/
#define I2C_OAR1_ADDMODE_Pos                  ((uint32_t)15)                    /* Addressing mode of Slave mode */
#define I2C_OAR1_ADDMODE_Mask                 (((uint32_t)0x01) << 15)
#define I2C_OAR1_ADDMODE                      I2C_OAR1_ADDMODE_Mask
#define I2C_OAR1_ADD_Pos                      ((uint32_t)0)                     /* Interface address */
#define I2C_OAR1_ADD_Mask                     (((uint32_t)0x03FF) << 0)
#define I2C_OAR1_ADD                          I2C_OAR1_ADD_Mask
#define I2C_OAR1_ADD_0                        (((uint32_t)0x1))
#define I2C_OAR1_ADD_1                        (((uint32_t)0x2))
#define I2C_OAR1_ADD_2                        (((uint32_t)0x4))
#define I2C_OAR1_ADD_3                        (((uint32_t)0x8))
#define I2C_OAR1_ADD_4                        (((uint32_t)0x10))
#define I2C_OAR1_ADD_5                        (((uint32_t)0x20))
#define I2C_OAR1_ADD_6                        (((uint32_t)0x40))
#define I2C_OAR1_ADD_7                        (((uint32_t)0x80))
#define I2C_OAR1_ADD_8                        (((uint32_t)0x100))
#define I2C_OAR1_ADD_9                        (((uint32_t)0x200))

/************************************* I2C->OAR2  ***************************************/
#define I2C_OAR2_ADD2_Pos                     ((uint32_t)1)                     /* Interface address */
#define I2C_OAR2_ADD2_Mask                    (((uint32_t)0x7F) << 1)
#define I2C_OAR2_ADD2                         I2C_OAR2_ADD2_Mask
#define I2C_OAR2_ADD2_0                       (((uint32_t)0x1 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_1                       (((uint32_t)0x2 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_2                       (((uint32_t)0x4 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_3                       (((uint32_t)0x8 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_4                       (((uint32_t)0x10 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_5                       (((uint32_t)0x20 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ADD2_6                       (((uint32_t)0x40 << I2C_OAR2_ADD2_Pos))
#define I2C_OAR2_ENDUAL_Pos                   ((uint32_t)0)                     /* Dual addressing mode enable */
#define I2C_OAR2_ENDUAL_Mask                  (((uint32_t)0x01) << 0)
#define I2C_OAR2_ENDUAL                       I2C_OAR2_ENDUAL_Mask

/************************************** I2C->DR  ****************************************/
#define I2C_DR_DR_Pos                         ((uint32_t)0)                     /* 8-bit data register */
#define I2C_DR_DR_Mask                        (((uint32_t)0xFF) << 0)
#define I2C_DR_DR                             I2C_DR_DR_Mask
#define I2C_DR_DR_0                           (((uint32_t)0x1))
#define I2C_DR_DR_1                           (((uint32_t)0x2))
#define I2C_DR_DR_2                           (((uint32_t)0x4))
#define I2C_DR_DR_3                           (((uint32_t)0x8))
#define I2C_DR_DR_4                           (((uint32_t)0x10))
#define I2C_DR_DR_5                           (((uint32_t)0x20))
#define I2C_DR_DR_6                           (((uint32_t)0x40))
#define I2C_DR_DR_7                           (((uint32_t)0x80))

/************************************** I2C->SR1  ***************************************/
#define I2C_SR1_SMBALERT_Pos                  ((uint32_t)15)                    /* SMBus alert */
#define I2C_SR1_SMBALERT_Mask                 (((uint32_t)0x01) << 15)
#define I2C_SR1_SMBALERT                      I2C_SR1_SMBALERT_Mask
#define I2C_SR1_TIMEOUT_Pos                   ((uint32_t)14)                    /* Timeout or Tlow error */
#define I2C_SR1_TIMEOUT_Mask                  (((uint32_t)0x01) << 14)
#define I2C_SR1_TIMEOUT                       I2C_SR1_TIMEOUT_Mask
#define I2C_SR1_PECERR_Pos                    ((uint32_t)12)                    /* PEC Error in reception */
#define I2C_SR1_PECERR_Mask                   (((uint32_t)0x01) << 12)
#define I2C_SR1_PECERR                        I2C_SR1_PECERR_Mask
#define I2C_SR1_OVR_Pos                       ((uint32_t)11)                    /* Overrun/Underrun */
#define I2C_SR1_OVR_Mask                      (((uint32_t)0x01) << 11)
#define I2C_SR1_OVR                           I2C_SR1_OVR_Mask
#define I2C_SR1_AF_Pos                        ((uint32_t)10)                    /* Acknowledge failure */
#define I2C_SR1_AF_Mask                       (((uint32_t)0x01) << 10)
#define I2C_SR1_AF                            I2C_SR1_AF_Mask
#define I2C_SR1_ARLO_Pos                      ((uint32_t)9)                     /* Arbitration lost of Master mode */
#define I2C_SR1_ARLO_Mask                     (((uint32_t)0x01) << 9)
#define I2C_SR1_ARLO                          I2C_SR1_ARLO_Mask
#define I2C_SR1_BERR_Pos                      ((uint32_t)8)                     /* Bus error */
#define I2C_SR1_BERR_Mask                     (((uint32_t)0x01) << 8)
#define I2C_SR1_BERR                          I2C_SR1_BERR_Mask
#define I2C_SR1_TxE_Pos                       ((uint32_t)7)                     /* Data register empty of transmitters */
#define I2C_SR1_TxE_Mask                      (((uint32_t)0x01) << 7)
#define I2C_SR1_TxE                           I2C_SR1_TxE_Mask
#define I2C_SR1_RxNE_Pos                      ((uint32_t)6)                     /* Data register not empty of receivers */
#define I2C_SR1_RxNE_Mask                     (((uint32_t)0x01) << 6)
#define I2C_SR1_RxNE                          I2C_SR1_RxNE_Mask
#define I2C_SR1_STOPF_Pos                     ((uint32_t)4)                     /* Stop detection of Slave mode */
#define I2C_SR1_STOPF_Mask                    (((uint32_t)0x01) << 4)
#define I2C_SR1_STOPF                         I2C_SR1_STOPF_Mask
#define I2C_SR1_ADD10_Pos                     ((uint32_t)3)                     /* 10-bit header sent in Master mode */
#define I2C_SR1_ADD10_Mask                    (((uint32_t)0x01) << 3)
#define I2C_SR1_ADD10                         I2C_SR1_ADD10_Mask
#define I2C_SR1_BTF_Pos                       ((uint32_t)2)                     /* Byte transfer finished */
#define I2C_SR1_BTF_Mask                      (((uint32_t)0x01) << 2)
#define I2C_SR1_BTF                           I2C_SR1_BTF_Mask
#define I2C_SR1_ADDR_Pos                      ((uint32_t)1)                     /* Address sent of Master mode/matched of Slave mode */
#define I2C_SR1_ADDR_Mask                     (((uint32_t)0x01) << 1)
#define I2C_SR1_ADDR                          I2C_SR1_ADDR_Mask
#define I2C_SR1_SB_Pos                        ((uint32_t)0)                     /* Start bit of Master mode */
#define I2C_SR1_SB_Mask                       (((uint32_t)0x01) << 0)
#define I2C_SR1_SB                            I2C_SR1_SB_Mask

/************************************** I2C->SR2  ***************************************/
#define I2C_SR2_PEC_Pos                       ((uint32_t)8)                     /* Packet error checking register */
#define I2C_SR2_PEC_Mask                      (((uint32_t)0xFF) << 8)
#define I2C_SR2_PEC                           I2C_SR2_PEC_Mask
#define I2C_SR2_PEC_0                         (((uint32_t)0x1 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_1                         (((uint32_t)0x2 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_2                         (((uint32_t)0x4 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_3                         (((uint32_t)0x8 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_4                         (((uint32_t)0x10 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_5                         (((uint32_t)0x20 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_6                         (((uint32_t)0x40 << I2C_SR2_PEC_Pos))
#define I2C_SR2_PEC_7                         (((uint32_t)0x80 << I2C_SR2_PEC_Pos))
#define I2C_SR2_DUALF_Pos                     ((uint32_t)7)                     /* Dual flag of Slave mode */
#define I2C_SR2_DUALF_Mask                    (((uint32_t)0x01) << 7)
#define I2C_SR2_DUALF                         I2C_SR2_DUALF_Mask
#define I2C_SR2_SMBHOST_Pos                   ((uint32_t)6)                     /* SMBus host header of slave mode */
#define I2C_SR2_SMBHOST_Mask                  (((uint32_t)0x01) << 6)
#define I2C_SR2_SMBHOST                       I2C_SR2_SMBHOST_Mask
#define I2C_SR2_SMBDEFAULT_Pos                ((uint32_t)5)                     /* SMBus device default address of Slave mode */
#define I2C_SR2_SMBDEFAULT_Mask               (((uint32_t)0x01) << 5)
#define I2C_SR2_SMBDEFAULT                    I2C_SR2_SMBDEFAULT_Mask
#define I2C_SR2_GENCALL_Pos                   ((uint32_t)4)                     /* General call address of slave mode */
#define I2C_SR2_GENCALL_Mask                  (((uint32_t)0x01) << 4)
#define I2C_SR2_GENCALL                       I2C_SR2_GENCALL_Mask
#define I2C_SR2_TRA_Pos                       ((uint32_t)2)                     /* Transmitter/receiver */
#define I2C_SR2_TRA_Mask                      (((uint32_t)0x01) << 2)
#define I2C_SR2_TRA                           I2C_SR2_TRA_Mask
#define I2C_SR2_BUSY_Pos                      ((uint32_t)1)                     /* Bus busy */
#define I2C_SR2_BUSY_Mask                     (((uint32_t)0x01) << 1)
#define I2C_SR2_BUSY                          I2C_SR2_BUSY_Mask
#define I2C_SR2_MSL_Pos                       ((uint32_t)0)                     /* Master/slave */
#define I2C_SR2_MSL_Mask                      (((uint32_t)0x01) << 0)
#define I2C_SR2_MSL                           I2C_SR2_MSL_Mask

/************************************** I2C->CCR  ***************************************/
#define I2C_CCR_F_S_Pos                       ((uint32_t)15)                    /* I2C master mode selection */
#define I2C_CCR_F_S_Mask                      (((uint32_t)0x01) << 15)
#define I2C_CCR_F_S                           I2C_CCR_F_S_Mask
#define I2C_CCR_DUTY_Pos                      ((uint32_t)14)                    /* Fast mode duty cycle */
#define I2C_CCR_DUTY_Mask                     (((uint32_t)0x01) << 14)
#define I2C_CCR_DUTY                          I2C_CCR_DUTY_Mask
#define I2C_CCR_CCR_Pos                       ((uint32_t)0)                     /* Clock control register in fast/standard mode of Master mode */
#define I2C_CCR_CCR_Mask                      (((uint32_t)0x0FFF) << 0)
#define I2C_CCR_CCR                           I2C_CCR_CCR_Mask
#define I2C_CCR_CCR_0                         (((uint32_t)0x1))
#define I2C_CCR_CCR_1                         (((uint32_t)0x2))
#define I2C_CCR_CCR_2                         (((uint32_t)0x4))
#define I2C_CCR_CCR_3                         (((uint32_t)0x8))
#define I2C_CCR_CCR_4                         (((uint32_t)0x10))
#define I2C_CCR_CCR_5                         (((uint32_t)0x20))
#define I2C_CCR_CCR_6                         (((uint32_t)0x40))
#define I2C_CCR_CCR_7                         (((uint32_t)0x80))
#define I2C_CCR_CCR_8                         (((uint32_t)0x100))
#define I2C_CCR_CCR_9                         (((uint32_t)0x200))
#define I2C_CCR_CCR_10                        (((uint32_t)0x400))
#define I2C_CCR_CCR_11                        (((uint32_t)0x800))

/************************************* I2C->TRISE  **************************************/
#define I2C_TRISE_TRISE_Pos                   ((uint32_t)0)                     /* Maximum rise time in fast/standard mode of Master mode */
#define I2C_TRISE_TRISE_Mask                  (((uint32_t)0x3F) << 0)
#define I2C_TRISE_TRISE                       I2C_TRISE_TRISE_Mask
#define I2C_TRISE_TRISE_0                     (((uint32_t)0x1))
#define I2C_TRISE_TRISE_1                     (((uint32_t)0x2))
#define I2C_TRISE_TRISE_2                     (((uint32_t)0x4))
#define I2C_TRISE_TRISE_3                     (((uint32_t)0x8))
#define I2C_TRISE_TRISE_4                     (((uint32_t)0x10))
#define I2C_TRISE_TRISE_5                     (((uint32_t)0x20))

/************************************* I2C->THOLD  **************************************/
#define I2C_THOLD_THOLD_Pos                   ((uint32_t)0)                     /* SDA high level hold time */
#define I2C_THOLD_THOLD_Mask                  (((uint32_t)0xFF) << 0)
#define I2C_THOLD_THOLD                       I2C_THOLD_THOLD_Mask
#define I2C_THOLD_THOLD_0                     (((uint32_t)0x1))
#define I2C_THOLD_THOLD_1                     (((uint32_t)0x2))
#define I2C_THOLD_THOLD_2                     (((uint32_t)0x4))
#define I2C_THOLD_THOLD_3                     (((uint32_t)0x8))
#define I2C_THOLD_THOLD_4                     (((uint32_t)0x10))
#define I2C_THOLD_THOLD_5                     (((uint32_t)0x20))
#define I2C_THOLD_THOLD_6                     (((uint32_t)0x40))
#define I2C_THOLD_THOLD_7                     (((uint32_t)0x80))

/*****************************************************************************************
*                                    Peripheral USART                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t BRR;                    /* BRR */
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t CR3;                    /* CR3 */
  __IO uint32_t GTPR;                   /* GTPR */
}USART_TypeDef;

/************************************* USART->SR  ***************************************/
#define USART_SR_CTS_Pos                      ((uint32_t)9)                     /* CTS flag */
#define USART_SR_CTS_Mask                     (((uint32_t)0x01) << 9)
#define USART_SR_CTS                          USART_SR_CTS_Mask
#define USART_SR_LBD_Pos                      ((uint32_t)8)                     /* LIN break detection flag */
#define USART_SR_LBD_Mask                     (((uint32_t)0x01) << 8)
#define USART_SR_LBD                          USART_SR_LBD_Mask
#define USART_SR_TXE_Pos                      ((uint32_t)7)                     /* Transmit data register empty */
#define USART_SR_TXE_Mask                     (((uint32_t)0x01) << 7)
#define USART_SR_TXE                          USART_SR_TXE_Mask
#define USART_SR_TC_Pos                       ((uint32_t)6)                     /* Transmission complete */
#define USART_SR_TC_Mask                      (((uint32_t)0x01) << 6)
#define USART_SR_TC                           USART_SR_TC_Mask
#define USART_SR_RXNE_Pos                     ((uint32_t)5)                     /* Read data register not empty */
#define USART_SR_RXNE_Mask                    (((uint32_t)0x01) << 5)
#define USART_SR_RXNE                         USART_SR_RXNE_Mask
#define USART_SR_IDLE_Pos                     ((uint32_t)4)                     /* IDLE line detected */
#define USART_SR_IDLE_Mask                    (((uint32_t)0x01) << 4)
#define USART_SR_IDLE                         USART_SR_IDLE_Mask
#define USART_SR_ORE_Pos                      ((uint32_t)3)                     /* Overrun error */
#define USART_SR_ORE_Mask                     (((uint32_t)0x01) << 3)
#define USART_SR_ORE                          USART_SR_ORE_Mask
#define USART_SR_NE_Pos                       ((uint32_t)2)                     /* Noise error flag */
#define USART_SR_NE_Mask                      (((uint32_t)0x01) << 2)
#define USART_SR_NE                           USART_SR_NE_Mask
#define USART_SR_FE_Pos                       ((uint32_t)1)                     /* Framing error */
#define USART_SR_FE_Mask                      (((uint32_t)0x01) << 1)
#define USART_SR_FE                           USART_SR_FE_Mask
#define USART_SR_PE_Pos                       ((uint32_t)0)                     /* Parity error */
#define USART_SR_PE_Mask                      (((uint32_t)0x01) << 0)
#define USART_SR_PE                           USART_SR_PE_Mask

/************************************* USART->DR  ***************************************/
#define USART_DR_DR_Pos                       ((uint32_t)0)                     /* Data value */
#define USART_DR_DR_Mask                      (((uint32_t)0x01FF) << 0)
#define USART_DR_DR                           USART_DR_DR_Mask
#define USART_DR_DR_0                         (((uint32_t)0x1))
#define USART_DR_DR_1                         (((uint32_t)0x2))
#define USART_DR_DR_2                         (((uint32_t)0x4))
#define USART_DR_DR_3                         (((uint32_t)0x8))
#define USART_DR_DR_4                         (((uint32_t)0x10))
#define USART_DR_DR_5                         (((uint32_t)0x20))
#define USART_DR_DR_6                         (((uint32_t)0x40))
#define USART_DR_DR_7                         (((uint32_t)0x80))
#define USART_DR_DR_8                         (((uint32_t)0x100))

/************************************* USART->BRR  **************************************/
#define USART_BRR_DIV_Mantissa_Pos            ((uint32_t)4)                     /* Mantissa of USARTDIV */
#define USART_BRR_DIV_Mantissa_Mask           (((uint32_t)0x0FFF) << 4)
#define USART_BRR_DIV_Mantissa                USART_BRR_DIV_Mantissa_Mask
#define USART_BRR_DIV_Mantissa_0              (((uint32_t)0x1 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_1              (((uint32_t)0x2 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_2              (((uint32_t)0x4 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_3              (((uint32_t)0x8 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_4              (((uint32_t)0x10 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_5              (((uint32_t)0x20 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_6              (((uint32_t)0x40 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_7              (((uint32_t)0x80 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_8              (((uint32_t)0x100 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_9              (((uint32_t)0x200 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_10             (((uint32_t)0x400 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Mantissa_11             (((uint32_t)0x800 << USART_BRR_DIV_Mantissa_Pos))
#define USART_BRR_DIV_Fraction_Pos            ((uint32_t)0)                     /* Fraction of USARTDIV */
#define USART_BRR_DIV_Fraction_Mask           (((uint32_t)0x0F) << 0)
#define USART_BRR_DIV_Fraction                USART_BRR_DIV_Fraction_Mask
#define USART_BRR_DIV_Fraction_0              (((uint32_t)0x1))
#define USART_BRR_DIV_Fraction_1              (((uint32_t)0x2))
#define USART_BRR_DIV_Fraction_2              (((uint32_t)0x4))
#define USART_BRR_DIV_Fraction_3              (((uint32_t)0x8))

/************************************* USART->CR1  **************************************/
#define USART_CR1_UE_Pos                      ((uint32_t)13)                    /* USART enable */
#define USART_CR1_UE_Mask                     (((uint32_t)0x01) << 13)
#define USART_CR1_UE                          USART_CR1_UE_Mask
#define USART_CR1_M_Pos                       ((uint32_t)12)                    /* Word length */
#define USART_CR1_M_Mask                      (((uint32_t)0x01) << 12)
#define USART_CR1_M                           USART_CR1_M_Mask
#define USART_CR1_WAKE_Pos                    ((uint32_t)11)                    /* Wakeup method */
#define USART_CR1_WAKE_Mask                   (((uint32_t)0x01) << 11)
#define USART_CR1_WAKE                        USART_CR1_WAKE_Mask
#define USART_CR1_PCE_Pos                     ((uint32_t)10)                    /* Parity control enable */
#define USART_CR1_PCE_Mask                    (((uint32_t)0x01) << 10)
#define USART_CR1_PCE                         USART_CR1_PCE_Mask
#define USART_CR1_PS_Pos                      ((uint32_t)9)                     /* Parity selection */
#define USART_CR1_PS_Mask                     (((uint32_t)0x01) << 9)
#define USART_CR1_PS                          USART_CR1_PS_Mask
#define USART_CR1_PEIE_Pos                    ((uint32_t)8)                     /* PE interrupt enable */
#define USART_CR1_PEIE_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR1_PEIE                        USART_CR1_PEIE_Mask
#define USART_CR1_TXEIE_Pos                   ((uint32_t)7)                     /* TXE interrupt enable */
#define USART_CR1_TXEIE_Mask                  (((uint32_t)0x01) << 7)
#define USART_CR1_TXEIE                       USART_CR1_TXEIE_Mask
#define USART_CR1_TCIE_Pos                    ((uint32_t)6)                     /* Transmission complete interrupt enable */
#define USART_CR1_TCIE_Mask                   (((uint32_t)0x01) << 6)
#define USART_CR1_TCIE                        USART_CR1_TCIE_Mask
#define USART_CR1_RXNEIE_Pos                  ((uint32_t)5)                     /* RXNE interrupt enable */
#define USART_CR1_RXNEIE_Mask                 (((uint32_t)0x01) << 5)
#define USART_CR1_RXNEIE                      USART_CR1_RXNEIE_Mask
#define USART_CR1_IDLEIE_Pos                  ((uint32_t)4)                     /* IDLE interrupt enable */
#define USART_CR1_IDLEIE_Mask                 (((uint32_t)0x01) << 4)
#define USART_CR1_IDLEIE                      USART_CR1_IDLEIE_Mask
#define USART_CR1_TE_Pos                      ((uint32_t)3)                     /* Transmitter enable */
#define USART_CR1_TE_Mask                     (((uint32_t)0x01) << 3)
#define USART_CR1_TE                          USART_CR1_TE_Mask
#define USART_CR1_RE_Pos                      ((uint32_t)2)                     /* Receiver enable */
#define USART_CR1_RE_Mask                     (((uint32_t)0x01) << 2)
#define USART_CR1_RE                          USART_CR1_RE_Mask
#define USART_CR1_RWU_Pos                     ((uint32_t)1)                     /* Receiver wakeup */
#define USART_CR1_RWU_Mask                    (((uint32_t)0x01) << 1)
#define USART_CR1_RWU                         USART_CR1_RWU_Mask
#define USART_CR1_SBK_Pos                     ((uint32_t)0)                     /* Send break */
#define USART_CR1_SBK_Mask                    (((uint32_t)0x01) << 0)
#define USART_CR1_SBK                         USART_CR1_SBK_Mask

/************************************* USART->CR2  **************************************/
#define USART_CR2_LINEN_Pos                   ((uint32_t)14)                    /* LIN mode enable */
#define USART_CR2_LINEN_Mask                  (((uint32_t)0x01) << 14)
#define USART_CR2_LINEN                       USART_CR2_LINEN_Mask
#define USART_CR2_STOP_Pos                    ((uint32_t)12)                    /* STOP bits */
#define USART_CR2_STOP_Mask                   (((uint32_t)0x03) << 12)
#define USART_CR2_STOP                        USART_CR2_STOP_Mask
#define USART_CR2_STOP_0                      (((uint32_t)0x1 << USART_CR2_STOP_Pos))
#define USART_CR2_STOP_1                      (((uint32_t)0x2 << USART_CR2_STOP_Pos))
#define USART_CR2_CLKEN_Pos                   ((uint32_t)11)                    /* Clock enable */
#define USART_CR2_CLKEN_Mask                  (((uint32_t)0x01) << 11)
#define USART_CR2_CLKEN                       USART_CR2_CLKEN_Mask
#define USART_CR2_CPOL_Pos                    ((uint32_t)10)                    /* Clock polarity */
#define USART_CR2_CPOL_Mask                   (((uint32_t)0x01) << 10)
#define USART_CR2_CPOL                        USART_CR2_CPOL_Mask
#define USART_CR2_CPHA_Pos                    ((uint32_t)9)                     /* Clock phase */
#define USART_CR2_CPHA_Mask                   (((uint32_t)0x01) << 9)
#define USART_CR2_CPHA                        USART_CR2_CPHA_Mask
#define USART_CR2_LBCL_Pos                    ((uint32_t)8)                     /* Last bit clock pulse */
#define USART_CR2_LBCL_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR2_LBCL                        USART_CR2_LBCL_Mask
#define USART_CR2_LBDIE_Pos                   ((uint32_t)6)                     /* LIN break detection interrupt enable */
#define USART_CR2_LBDIE_Mask                  (((uint32_t)0x01) << 6)
#define USART_CR2_LBDIE                       USART_CR2_LBDIE_Mask
#define USART_CR2_LBDL_Pos                    ((uint32_t)5)                     /* LIN break detection length */
#define USART_CR2_LBDL_Mask                   (((uint32_t)0x01) << 5)
#define USART_CR2_LBDL                        USART_CR2_LBDL_Mask
#define USART_CR2_ADD_Pos                     ((uint32_t)0)                     /* Address of the USART node */
#define USART_CR2_ADD_Mask                    (((uint32_t)0x0F) << 0)
#define USART_CR2_ADD                         USART_CR2_ADD_Mask
#define USART_CR2_ADD_0                       (((uint32_t)0x1))
#define USART_CR2_ADD_1                       (((uint32_t)0x2))
#define USART_CR2_ADD_2                       (((uint32_t)0x4))
#define USART_CR2_ADD_3                       (((uint32_t)0x8))

/************************************* USART->CR3  **************************************/
#define USART_CR3_CTSIE_Pos                   ((uint32_t)10)                    /* CTS interrupt enable */
#define USART_CR3_CTSIE_Mask                  (((uint32_t)0x01) << 10)
#define USART_CR3_CTSIE                       USART_CR3_CTSIE_Mask
#define USART_CR3_CTSE_Pos                    ((uint32_t)9)                     /* CTS enable */
#define USART_CR3_CTSE_Mask                   (((uint32_t)0x01) << 9)
#define USART_CR3_CTSE                        USART_CR3_CTSE_Mask
#define USART_CR3_RTSE_Pos                    ((uint32_t)8)                     /* RTS enable */
#define USART_CR3_RTSE_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR3_RTSE                        USART_CR3_RTSE_Mask
#define USART_CR3_DMAT_Pos                    ((uint32_t)7)                     /* DMA enable transmitter */
#define USART_CR3_DMAT_Mask                   (((uint32_t)0x01) << 7)
#define USART_CR3_DMAT                        USART_CR3_DMAT_Mask
#define USART_CR3_DMAR_Pos                    ((uint32_t)6)                     /* DMA enable receiver */
#define USART_CR3_DMAR_Mask                   (((uint32_t)0x01) << 6)
#define USART_CR3_DMAR                        USART_CR3_DMAR_Mask
#define USART_CR3_SCEN_Pos                    ((uint32_t)5)                     /* Smartcard mode enable */
#define USART_CR3_SCEN_Mask                   (((uint32_t)0x01) << 5)
#define USART_CR3_SCEN                        USART_CR3_SCEN_Mask
#define USART_CR3_NACK_Pos                    ((uint32_t)4)                     /* Smartcard NACK enable */
#define USART_CR3_NACK_Mask                   (((uint32_t)0x01) << 4)
#define USART_CR3_NACK                        USART_CR3_NACK_Mask
#define USART_CR3_HDSEL_Pos                   ((uint32_t)3)                     /* Half-duplex selection */
#define USART_CR3_HDSEL_Mask                  (((uint32_t)0x01) << 3)
#define USART_CR3_HDSEL                       USART_CR3_HDSEL_Mask
#define USART_CR3_IRLP_Pos                    ((uint32_t)2)                     /* IrDA low-power */
#define USART_CR3_IRLP_Mask                   (((uint32_t)0x01) << 2)
#define USART_CR3_IRLP                        USART_CR3_IRLP_Mask
#define USART_CR3_IREN_Pos                    ((uint32_t)1)                     /* IrDA mode enable */
#define USART_CR3_IREN_Mask                   (((uint32_t)0x01) << 1)
#define USART_CR3_IREN                        USART_CR3_IREN_Mask
#define USART_CR3_EIE_Pos                     ((uint32_t)0)                     /* Error interrupt enable */
#define USART_CR3_EIE_Mask                    (((uint32_t)0x01) << 0)
#define USART_CR3_EIE                         USART_CR3_EIE_Mask

/************************************ USART->GTPR  **************************************/
#define USART_GTPR_GT_Pos                     ((uint32_t)8)                     /* Guard time value */
#define USART_GTPR_GT_Mask                    (((uint32_t)0xFF) << 8)
#define USART_GTPR_GT                         USART_GTPR_GT_Mask
#define USART_GTPR_GT_0                       (((uint32_t)0x1 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_1                       (((uint32_t)0x2 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_2                       (((uint32_t)0x4 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_3                       (((uint32_t)0x8 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_4                       (((uint32_t)0x10 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_5                       (((uint32_t)0x20 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_6                       (((uint32_t)0x40 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_7                       (((uint32_t)0x80 << USART_GTPR_GT_Pos))
#define USART_GTPR_PSC_Pos                    ((uint32_t)0)                     /* Prescaler value */
#define USART_GTPR_PSC_Mask                   (((uint32_t)0xFF) << 0)
#define USART_GTPR_PSC                        USART_GTPR_PSC_Mask
#define USART_GTPR_PSC_0                      (((uint32_t)0x1))
#define USART_GTPR_PSC_1                      (((uint32_t)0x2))
#define USART_GTPR_PSC_2                      (((uint32_t)0x4))
#define USART_GTPR_PSC_3                      (((uint32_t)0x8))
#define USART_GTPR_PSC_4                      (((uint32_t)0x10))
#define USART_GTPR_PSC_5                      (((uint32_t)0x20))
#define USART_GTPR_PSC_6                      (((uint32_t)0x40))
#define USART_GTPR_PSC_7                      (((uint32_t)0x80))

/*****************************************************************************************
*                                     Peripheral SDIO                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t POWER;                  /* POWER */
  __IO uint32_t CLKCR;                  /* CLKCR */
  __IO uint32_t ARG;                    /* ARG */
  __IO uint32_t CMD;                    /* CMD */
  __I  uint32_t RESPCMD;                /* RESPCMD */
  __I  uint32_t RESP1;                  /* RESP1 */
  __I  uint32_t RESP2;                  /* RESP2 */
  __I  uint32_t RESP3;                  /* RESP3 */
  __I  uint32_t RESP4;                  /* RESP4 */
  __IO uint32_t DTIMER;                 /* DTIMER */
  __IO uint32_t DLEN;                   /* DLEN */
  __IO uint32_t DCTRL;                  /* DCTRL */
  __I  uint32_t DCOUNT;                 /* DCOUNT */
  __I  uint32_t STA;                    /* STA */
  __IO uint32_t ICR;                    /* ICR */
  __IO uint32_t MASK;                   /* MASK */
       uint16_t RESERVED1[4];
  __I  uint32_t FIFOCNT;                /* FIFOCNT */
       uint16_t RESERVED2[26];
  __IO uint32_t FIFO;                   /* FIFO */
}SDIO_TypeDef;

/************************************ SDIO->POWER  **************************************/
#define SDIO_POWER_PWRCTRL_Pos                ((uint32_t)0)                     /* Power control */
#define SDIO_POWER_PWRCTRL_Mask               (((uint32_t)0x03) << 0)
#define SDIO_POWER_PWRCTRL                    SDIO_POWER_PWRCTRL_Mask
#define SDIO_POWER_PWRCTRL_0                  (((uint32_t)0x1))
#define SDIO_POWER_PWRCTRL_1                  (((uint32_t)0x2))

/************************************ SDIO->CLKCR  **************************************/
#define SDIO_CLKCR_HWFC_EN_Pos                ((uint32_t)14)                    /* HW flow control enable */
#define SDIO_CLKCR_HWFC_EN_Mask               (((uint32_t)0x01) << 14)
#define SDIO_CLKCR_HWFC_EN                    SDIO_CLKCR_HWFC_EN_Mask
#define SDIO_CLKCR_NEGEDGE_Pos                ((uint32_t)13)                    /* SDIO_CK dephasing selection bit */
#define SDIO_CLKCR_NEGEDGE_Mask               (((uint32_t)0x01) << 13)
#define SDIO_CLKCR_NEGEDGE                    SDIO_CLKCR_NEGEDGE_Mask
#define SDIO_CLKCR_WIDBUS_Pos                 ((uint32_t)11)                    /* Wide bus mode enable bit */
#define SDIO_CLKCR_WIDBUS_Mask                (((uint32_t)0x03) << 11)
#define SDIO_CLKCR_WIDBUS                     SDIO_CLKCR_WIDBUS_Mask
#define SDIO_CLKCR_WIDBUS_0                   (((uint32_t)0x1 << SDIO_CLKCR_WIDBUS_Pos))
#define SDIO_CLKCR_WIDBUS_1                   (((uint32_t)0x2 << SDIO_CLKCR_WIDBUS_Pos))
#define SDIO_CLKCR_BYPASS_Pos                 ((uint32_t)10)                    /* Clock divider bypass enable bit */
#define SDIO_CLKCR_BYPASS_Mask                (((uint32_t)0x01) << 10)
#define SDIO_CLKCR_BYPASS                     SDIO_CLKCR_BYPASS_Mask
#define SDIO_CLKCR_PWRSAV_Pos                 ((uint32_t)9)                     /* Power saving configuration bit */
#define SDIO_CLKCR_PWRSAV_Mask                (((uint32_t)0x01) << 9)
#define SDIO_CLKCR_PWRSAV                     SDIO_CLKCR_PWRSAV_Mask
#define SDIO_CLKCR_CLKEN_Pos                  ((uint32_t)8)                     /* Clock enable bit */
#define SDIO_CLKCR_CLKEN_Mask                 (((uint32_t)0x01) << 8)
#define SDIO_CLKCR_CLKEN                      SDIO_CLKCR_CLKEN_Mask
#define SDIO_CLKCR_CLKDIV_Pos                 ((uint32_t)0)                     /* Clock divide factor */
#define SDIO_CLKCR_CLKDIV_Mask                (((uint32_t)0xFF) << 0)
#define SDIO_CLKCR_CLKDIV                     SDIO_CLKCR_CLKDIV_Mask
#define SDIO_CLKCR_CLKDIV_0                   (((uint32_t)0x1))
#define SDIO_CLKCR_CLKDIV_1                   (((uint32_t)0x2))
#define SDIO_CLKCR_CLKDIV_2                   (((uint32_t)0x4))
#define SDIO_CLKCR_CLKDIV_3                   (((uint32_t)0x8))
#define SDIO_CLKCR_CLKDIV_4                   (((uint32_t)0x10))
#define SDIO_CLKCR_CLKDIV_5                   (((uint32_t)0x20))
#define SDIO_CLKCR_CLKDIV_6                   (((uint32_t)0x40))
#define SDIO_CLKCR_CLKDIV_7                   (((uint32_t)0x80))

/************************************* SDIO->ARG  ***************************************/
#define SDIO_ARG_CMDARG_Pos                   ((uint32_t)3)                     /* Command argument */
#define SDIO_ARG_CMDARG_Mask                  (((uint32_t)0x1FFFFFFF) << 3)
#define SDIO_ARG_CMDARG                       SDIO_ARG_CMDARG_Mask

/************************************* SDIO->CMD  ***************************************/
#define SDIO_CMD_ATACMD_Pos                   ((uint32_t)14)                    /* CE-ATA command */
#define SDIO_CMD_ATACMD_Mask                  (((uint32_t)0x01) << 14)
#define SDIO_CMD_ATACMD                       SDIO_CMD_ATACMD_Mask
#define SDIO_CMD_NIEN_Pos                     ((uint32_t)13)                    /* Interrupt not enabled */
#define SDIO_CMD_NIEN_Mask                    (((uint32_t)0x01) << 13)
#define SDIO_CMD_NIEN                         SDIO_CMD_NIEN_Mask
#define SDIO_CMD_ENCMDCOMPL_Pos               ((uint32_t)12)                    /* Enable CMD completion */
#define SDIO_CMD_ENCMDCOMPL_Mask              (((uint32_t)0x01) << 12)
#define SDIO_CMD_ENCMDCOMPL                   SDIO_CMD_ENCMDCOMPL_Mask
#define SDIO_CMD_SDIOSUSPEND_Pos              ((uint32_t)11)                    /* SDI/O suspend command */
#define SDIO_CMD_SDIOSUSPEND_Mask             (((uint32_t)0x01) << 11)
#define SDIO_CMD_SDIOSUSPEND                  SDIO_CMD_SDIOSUSPEND_Mask
#define SDIO_CMD_CPSMEN_Pos                   ((uint32_t)10)                    /* Command path state machine, CPSM Enable bit */
#define SDIO_CMD_CPSMEN_Mask                  (((uint32_t)0x01) << 10)
#define SDIO_CMD_CPSMEN                       SDIO_CMD_CPSMEN_Mask
#define SDIO_CMD_WAITPEND_Pos                 ((uint32_t)9)                     /* Cmd Pend internal signal, CPSM Waits for ends of data transfer */
#define SDIO_CMD_WAITPEND_Mask                (((uint32_t)0x01) << 9)
#define SDIO_CMD_WAITPEND                     SDIO_CMD_WAITPEND_Mask
#define SDIO_CMD_WAITINT_Pos                  ((uint32_t)8)                     /* CPSM waits for interrupt request */
#define SDIO_CMD_WAITINT_Mask                 (((uint32_t)0x01) << 8)
#define SDIO_CMD_WAITINT                      SDIO_CMD_WAITINT_Mask
#define SDIO_CMD_WAITRESP_Pos                 ((uint32_t)6)                     /* Wait for response bits */
#define SDIO_CMD_WAITRESP_Mask                (((uint32_t)0x03) << 6)
#define SDIO_CMD_WAITRESP                     SDIO_CMD_WAITRESP_Mask
#define SDIO_CMD_WAITRESP_0                   (((uint32_t)0x1 << SDIO_CMD_WAITRESP_Pos))
#define SDIO_CMD_WAITRESP_1                   (((uint32_t)0x2 << SDIO_CMD_WAITRESP_Pos))
#define SDIO_CMD_CMDINDEX_Pos                 ((uint32_t)0)                     /* Command index */
#define SDIO_CMD_CMDINDEX_Mask                (((uint32_t)0x3F) << 0)
#define SDIO_CMD_CMDINDEX                     SDIO_CMD_CMDINDEX_Mask
#define SDIO_CMD_CMDINDEX_0                   (((uint32_t)0x1))
#define SDIO_CMD_CMDINDEX_1                   (((uint32_t)0x2))
#define SDIO_CMD_CMDINDEX_2                   (((uint32_t)0x4))
#define SDIO_CMD_CMDINDEX_3                   (((uint32_t)0x8))
#define SDIO_CMD_CMDINDEX_4                   (((uint32_t)0x10))
#define SDIO_CMD_CMDINDEX_5                   (((uint32_t)0x20))

/*********************************** SDIO->RESPCMD  *************************************/
#define SDIO_RESPCMD_RESPCMD_Pos              ((uint32_t)0)                     /* Response command index */
#define SDIO_RESPCMD_RESPCMD_Mask             (((uint32_t)0x3F) << 0)
#define SDIO_RESPCMD_RESPCMD                  SDIO_RESPCMD_RESPCMD_Mask
#define SDIO_RESPCMD_RESPCMD_0                (((uint32_t)0x1))
#define SDIO_RESPCMD_RESPCMD_1                (((uint32_t)0x2))
#define SDIO_RESPCMD_RESPCMD_2                (((uint32_t)0x4))
#define SDIO_RESPCMD_RESPCMD_3                (((uint32_t)0x8))
#define SDIO_RESPCMD_RESPCMD_4                (((uint32_t)0x10))
#define SDIO_RESPCMD_RESPCMD_5                (((uint32_t)0x20))

/************************************ SDIO->RESP1  **************************************/
#define SDIO_RESP1_CARDSTATUSx_Pos            ((uint32_t)0)                     /* Card state */
#define SDIO_RESP1_CARDSTATUSx_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_RESP1_CARDSTATUSx                SDIO_RESP1_CARDSTATUSx_Mask

/************************************ SDIO->RESP2  **************************************/
#define SDIO_RESP2_CARDSTATUSx_Pos            ((uint32_t)0)                     /* Card state */
#define SDIO_RESP2_CARDSTATUSx_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_RESP2_CARDSTATUSx                SDIO_RESP2_CARDSTATUSx_Mask

/************************************ SDIO->RESP3  **************************************/
#define SDIO_RESP3_CARDSTATUSx_Pos            ((uint32_t)0)                     /* Card state */
#define SDIO_RESP3_CARDSTATUSx_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_RESP3_CARDSTATUSx                SDIO_RESP3_CARDSTATUSx_Mask

/************************************ SDIO->RESP4  **************************************/
#define SDIO_RESP4_CARDSTATUSx_Pos            ((uint32_t)0)                     /* Card state */
#define SDIO_RESP4_CARDSTATUSx_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_RESP4_CARDSTATUSx                SDIO_RESP4_CARDSTATUSx_Mask

/************************************ SDIO->DTIMER  *************************************/
#define SDIO_DTIMER_DATATIME_Pos              ((uint32_t)0)                     /* Data timeout time */
#define SDIO_DTIMER_DATATIME_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_DTIMER_DATATIME                  SDIO_DTIMER_DATATIME_Mask

/************************************* SDIO->DLEN  **************************************/
#define SDIO_DLEN_DATALENGTH_Pos              ((uint32_t)0)                     /* Data length value */
#define SDIO_DLEN_DATALENGTH_Mask             (((uint32_t)0x01FFFFFF) << 0)
#define SDIO_DLEN_DATALENGTH                  SDIO_DLEN_DATALENGTH_Mask

/************************************ SDIO->DCTRL  **************************************/
#define SDIO_DCTRL_SDIOEN_Pos                 ((uint32_t)11)                    /* SDI/O enable functions */
#define SDIO_DCTRL_SDIOEN_Mask                (((uint32_t)0x01) << 11)
#define SDIO_DCTRL_SDIOEN                     SDIO_DCTRL_SDIOEN_Mask
#define SDIO_DCTRL_RWMOD_Pos                  ((uint32_t)10)                    /* Read wait mode */
#define SDIO_DCTRL_RWMOD_Mask                 (((uint32_t)0x01) << 10)
#define SDIO_DCTRL_RWMOD                      SDIO_DCTRL_RWMOD_Mask
#define SDIO_DCTRL_RWSTOP_Pos                 ((uint32_t)9)                     /* Read wait stop */
#define SDIO_DCTRL_RWSTOP_Mask                (((uint32_t)0x01) << 9)
#define SDIO_DCTRL_RWSTOP                     SDIO_DCTRL_RWSTOP_Mask
#define SDIO_DCTRL_RWSTART_Pos                ((uint32_t)8)                     /* Read wait start */
#define SDIO_DCTRL_RWSTART_Mask               (((uint32_t)0x01) << 8)
#define SDIO_DCTRL_RWSTART                    SDIO_DCTRL_RWSTART_Mask
#define SDIO_DCTRL_DBLOCKSIZE_Pos             ((uint32_t)4)                     /* Data block size */
#define SDIO_DCTRL_DBLOCKSIZE_Mask            (((uint32_t)0x0F) << 4)
#define SDIO_DCTRL_DBLOCKSIZE                 SDIO_DCTRL_DBLOCKSIZE_Mask
#define SDIO_DCTRL_DBLOCKSIZE_0               (((uint32_t)0x1 << SDIO_DCTRL_DBLOCKSIZE_Pos))
#define SDIO_DCTRL_DBLOCKSIZE_1               (((uint32_t)0x2 << SDIO_DCTRL_DBLOCKSIZE_Pos))
#define SDIO_DCTRL_DBLOCKSIZE_2               (((uint32_t)0x4 << SDIO_DCTRL_DBLOCKSIZE_Pos))
#define SDIO_DCTRL_DBLOCKSIZE_3               (((uint32_t)0x8 << SDIO_DCTRL_DBLOCKSIZE_Pos))
#define SDIO_DCTRL_DMAEN_Pos                  ((uint32_t)3)                     /* DMA enable bit */
#define SDIO_DCTRL_DMAEN_Mask                 (((uint32_t)0x01) << 3)
#define SDIO_DCTRL_DMAEN                      SDIO_DCTRL_DMAEN_Mask
#define SDIO_DCTRL_DTMODE_Pos                 ((uint32_t)2)                     /* Data transfer mode selection */
#define SDIO_DCTRL_DTMODE_Mask                (((uint32_t)0x01) << 2)
#define SDIO_DCTRL_DTMODE                     SDIO_DCTRL_DTMODE_Mask
#define SDIO_DCTRL_DTDIR_Pos                  ((uint32_t)1)                     /* Data transfer direction selection */
#define SDIO_DCTRL_DTDIR_Mask                 (((uint32_t)0x01) << 1)
#define SDIO_DCTRL_DTDIR                      SDIO_DCTRL_DTDIR_Mask
#define SDIO_DCTRL_DTEN_Pos                   ((uint32_t)0)                     /* Data transfer enable bit */
#define SDIO_DCTRL_DTEN_Mask                  (((uint32_t)0x01) << 0)
#define SDIO_DCTRL_DTEN                       SDIO_DCTRL_DTEN_Mask

/************************************ SDIO->DCOUNT  *************************************/
#define SDIO_DCOUNT_DATACOUNT_Pos             ((uint32_t)0)                     /* Data count value */
#define SDIO_DCOUNT_DATACOUNT_Mask            (((uint32_t)0x01FFFFFF) << 0)
#define SDIO_DCOUNT_DATACOUNT                 SDIO_DCOUNT_DATACOUNT_Mask

/************************************* SDIO->STA  ***************************************/
#define SDIO_STA_CEATAEND_Pos                 ((uint32_t)23)                    /* CE-ATA command completion signal received for CMD61 */
#define SDIO_STA_CEATAEND_Mask                (((uint32_t)0x01) << 23)
#define SDIO_STA_CEATAEND                     SDIO_STA_CEATAEND_Mask
#define SDIO_STA_SDIOIT_Pos                   ((uint32_t)22)                    /* SDIO interrupt received */
#define SDIO_STA_SDIOIT_Mask                  (((uint32_t)0x01) << 22)
#define SDIO_STA_SDIOIT                       SDIO_STA_SDIOIT_Mask
#define SDIO_STA_RXDVAL_Pos                   ((uint32_t)21)                    /* Data available in receive FIFO */
#define SDIO_STA_RXDVAL_Mask                  (((uint32_t)0x01) << 21)
#define SDIO_STA_RXDVAL                       SDIO_STA_RXDVAL_Mask
#define SDIO_STA_TXDVAL_Pos                   ((uint32_t)20)                    /* Data available in transmit FIFO */
#define SDIO_STA_TXDVAL_Mask                  (((uint32_t)0x01) << 20)
#define SDIO_STA_TXDVAL                       SDIO_STA_TXDVAL_Mask
#define SDIO_STA_RXFIFOE_Pos                  ((uint32_t)19)                    /* Receive FIFO empty */
#define SDIO_STA_RXFIFOE_Mask                 (((uint32_t)0x01) << 19)
#define SDIO_STA_RXFIFOE                      SDIO_STA_RXFIFOE_Mask
#define SDIO_STA_TXFIFOE_Pos                  ((uint32_t)18)                    /* Transmit FIFO empty */
#define SDIO_STA_TXFIFOE_Mask                 (((uint32_t)0x01) << 18)
#define SDIO_STA_TXFIFOE                      SDIO_STA_TXFIFOE_Mask
#define SDIO_STA_RXFIFOF_Pos                  ((uint32_t)17)                    /* Receive FIFO full */
#define SDIO_STA_RXFIFOF_Mask                 (((uint32_t)0x01) << 17)
#define SDIO_STA_RXFIFOF                      SDIO_STA_RXFIFOF_Mask
#define SDIO_STA_TXFIFOF_Pos                  ((uint32_t)16)                    /* Transmit FIFO full */
#define SDIO_STA_TXFIFOF_Mask                 (((uint32_t)0x01) << 16)
#define SDIO_STA_TXFIFOF                      SDIO_STA_TXFIFOF_Mask
#define SDIO_STA_RXFIFOHF_Pos                 ((uint32_t)15)                    /* Receive FIFO half full */
#define SDIO_STA_RXFIFOHF_Mask                (((uint32_t)0x01) << 15)
#define SDIO_STA_RXFIFOHF                     SDIO_STA_RXFIFOHF_Mask
#define SDIO_STA_TXFIFOHE_Pos                 ((uint32_t)14)                    /* Transmit FIFO half empty */
#define SDIO_STA_TXFIFOHE_Mask                (((uint32_t)0x01) << 14)
#define SDIO_STA_TXFIFOHE                     SDIO_STA_TXFIFOHE_Mask
#define SDIO_STA_RXACT_Pos                    ((uint32_t)13)                    /* Data receive in progress */
#define SDIO_STA_RXACT_Mask                   (((uint32_t)0x01) << 13)
#define SDIO_STA_RXACT                        SDIO_STA_RXACT_Mask
#define SDIO_STA_TXACT_Pos                    ((uint32_t)12)                    /* Data transmit in progress */
#define SDIO_STA_TXACT_Mask                   (((uint32_t)0x01) << 12)
#define SDIO_STA_TXACT                        SDIO_STA_TXACT_Mask
#define SDIO_STA_CMDACT_Pos                   ((uint32_t)11)                    /* Command transfer in progress */
#define SDIO_STA_CMDACT_Mask                  (((uint32_t)0x01) << 11)
#define SDIO_STA_CMDACT                       SDIO_STA_CMDACT_Mask
#define SDIO_STA_DBCKEND_Pos                  ((uint32_t)10)                    /* Data block sent/received, CRC check passed */
#define SDIO_STA_DBCKEND_Mask                 (((uint32_t)0x01) << 10)
#define SDIO_STA_DBCKEND                      SDIO_STA_DBCKEND_Mask
#define SDIO_STA_STBITERR_Pos                 ((uint32_t)9)                     /* Start bit not detected on all data signals in wide bus mode */
#define SDIO_STA_STBITERR_Mask                (((uint32_t)0x01) << 9)
#define SDIO_STA_STBITERR                     SDIO_STA_STBITERR_Mask
#define SDIO_STA_DATAEND_Pos                  ((uint32_t)8)                     /* Data counter, SDIDCOUNT is zero */
#define SDIO_STA_DATAEND_Mask                 (((uint32_t)0x01) << 8)
#define SDIO_STA_DATAEND                      SDIO_STA_DATAEND_Mask
#define SDIO_STA_CMDSENT_Pos                  ((uint32_t)7)                     /* Command sent, no response required */
#define SDIO_STA_CMDSENT_Mask                 (((uint32_t)0x01) << 7)
#define SDIO_STA_CMDSENT                      SDIO_STA_CMDSENT_Mask
#define SDIO_STA_CMDREND_Pos                  ((uint32_t)6)                     /* Command response */
#define SDIO_STA_CMDREND_Mask                 (((uint32_t)0x01) << 6)
#define SDIO_STA_CMDREND                      SDIO_STA_CMDREND_Mask
#define SDIO_STA_RXOVERR_Pos                  ((uint32_t)5)                     /* Received FIFO overrun error */
#define SDIO_STA_RXOVERR_Mask                 (((uint32_t)0x01) << 5)
#define SDIO_STA_RXOVERR                      SDIO_STA_RXOVERR_Mask
#define SDIO_STA_TXUNDERR_Pos                 ((uint32_t)4)                     /* Transmit FIFO underrun error */
#define SDIO_STA_TXUNDERR_Mask                (((uint32_t)0x01) << 4)
#define SDIO_STA_TXUNDERR                     SDIO_STA_TXUNDERR_Mask
#define SDIO_STA_DTIMEOUT_Pos                 ((uint32_t)3)                     /* Data time out */
#define SDIO_STA_DTIMEOUT_Mask                (((uint32_t)0x01) << 3)
#define SDIO_STA_DTIMEOUT                     SDIO_STA_DTIMEOUT_Mask
#define SDIO_STA_CTIMEOUT_Pos                 ((uint32_t)2)                     /* Command response time out */
#define SDIO_STA_CTIMEOUT_Mask                (((uint32_t)0x01) << 2)
#define SDIO_STA_CTIMEOUT                     SDIO_STA_CTIMEOUT_Mask
#define SDIO_STA_DCRCFAIL_Pos                 ((uint32_t)1)                     /* Data block sent/received */
#define SDIO_STA_DCRCFAIL_Mask                (((uint32_t)0x01) << 1)
#define SDIO_STA_DCRCFAIL                     SDIO_STA_DCRCFAIL_Mask
#define SDIO_STA_CCRCFAIL_Pos                 ((uint32_t)0)                     /* Command response received */
#define SDIO_STA_CCRCFAIL_Mask                (((uint32_t)0x01) << 0)
#define SDIO_STA_CCRCFAIL                     SDIO_STA_CCRCFAIL_Mask

/************************************* SDIO->ICR  ***************************************/
#define SDIO_ICR_CEATAENDC_Pos                ((uint32_t)23)                    /* CEATAEND flag clear bit */
#define SDIO_ICR_CEATAENDC_Mask               (((uint32_t)0x01) << 23)
#define SDIO_ICR_CEATAENDC                    SDIO_ICR_CEATAENDC_Mask
#define SDIO_ICR_SDIOITC_Pos                  ((uint32_t)22)                    /* SDIOIT flag clear bit */
#define SDIO_ICR_SDIOITC_Mask                 (((uint32_t)0x01) << 22)
#define SDIO_ICR_SDIOITC                      SDIO_ICR_SDIOITC_Mask
#define SDIO_ICR_DBCKENDC_Pos                 ((uint32_t)10)                    /* DBCKEND flag clear bit */
#define SDIO_ICR_DBCKENDC_Mask                (((uint32_t)0x01) << 10)
#define SDIO_ICR_DBCKENDC                     SDIO_ICR_DBCKENDC_Mask
#define SDIO_ICR_STBITERRC_Pos                ((uint32_t)9)                     /* STBITERR flag clear bit */
#define SDIO_ICR_STBITERRC_Mask               (((uint32_t)0x01) << 9)
#define SDIO_ICR_STBITERRC                    SDIO_ICR_STBITERRC_Mask
#define SDIO_ICR_DATAENDC_Pos                 ((uint32_t)8)                     /* DATAEND flag clear bit */
#define SDIO_ICR_DATAENDC_Mask                (((uint32_t)0x01) << 8)
#define SDIO_ICR_DATAENDC                     SDIO_ICR_DATAENDC_Mask
#define SDIO_ICR_CMDSENTC_Pos                 ((uint32_t)7)                     /* CMDSENT flag clear bit */
#define SDIO_ICR_CMDSENTC_Mask                (((uint32_t)0x01) << 7)
#define SDIO_ICR_CMDSENTC                     SDIO_ICR_CMDSENTC_Mask
#define SDIO_ICR_CMDRENDC_Pos                 ((uint32_t)6)                     /* CMDREND flag clear bit */
#define SDIO_ICR_CMDRENDC_Mask                (((uint32_t)0x01) << 6)
#define SDIO_ICR_CMDRENDC                     SDIO_ICR_CMDRENDC_Mask
#define SDIO_ICR_RXOVERRC_Pos                 ((uint32_t)5)                     /* RXOVERR flag clear bit */
#define SDIO_ICR_RXOVERRC_Mask                (((uint32_t)0x01) << 5)
#define SDIO_ICR_RXOVERRC                     SDIO_ICR_RXOVERRC_Mask
#define SDIO_ICR_TXUNDERRC_Pos                ((uint32_t)4)                     /* TXUNDERR flag clear bit */
#define SDIO_ICR_TXUNDERRC_Mask               (((uint32_t)0x01) << 4)
#define SDIO_ICR_TXUNDERRC                    SDIO_ICR_TXUNDERRC_Mask
#define SDIO_ICR_DTIMEOUTC_Pos                ((uint32_t)3)                     /* DTIMEOUT flag clear bit */
#define SDIO_ICR_DTIMEOUTC_Mask               (((uint32_t)0x01) << 3)
#define SDIO_ICR_DTIMEOUTC                    SDIO_ICR_DTIMEOUTC_Mask
#define SDIO_ICR_CTIMEOUTC_Pos                ((uint32_t)2)                     /* CTIMEOUT flag clear bit */
#define SDIO_ICR_CTIMEOUTC_Mask               (((uint32_t)0x01) << 2)
#define SDIO_ICR_CTIMEOUTC                    SDIO_ICR_CTIMEOUTC_Mask
#define SDIO_ICR_DCRCFAILC_Pos                ((uint32_t)1)                     /* DCRC FAIL flag clear bit */
#define SDIO_ICR_DCRCFAILC_Mask               (((uint32_t)0x01) << 1)
#define SDIO_ICR_DCRCFAILC                    SDIO_ICR_DCRCFAILC_Mask
#define SDIO_ICR_CCRCFAILC_Pos                ((uint32_t)0)                     /* CCRC FAIL flag clear bit */
#define SDIO_ICR_CCRCFAILC_Mask               (((uint32_t)0x01) << 0)
#define SDIO_ICR_CCRCFAILC                    SDIO_ICR_CCRCFAILC_Mask

/************************************* SDIO->MASK  **************************************/
#define SDIO_MASK_CEATAENDIE_Pos              ((uint32_t)23)                    /* CE-ATA command completion signal received interrupt enable */
#define SDIO_MASK_CEATAENDIE_Mask             (((uint32_t)0x01) << 23)
#define SDIO_MASK_CEATAENDIE                  SDIO_MASK_CEATAENDIE_Mask
#define SDIO_MASK_SDIOITIE_Pos                ((uint32_t)22)                    /* SDIO mode interrupt received interrupt enable */
#define SDIO_MASK_SDIOITIE_Mask               (((uint32_t)0x01) << 22)
#define SDIO_MASK_SDIOITIE                    SDIO_MASK_SDIOITIE_Mask
#define SDIO_MASK_RXDVALIE_Pos                ((uint32_t)21)                    /* Data available in RxFIFO interrupt enable */
#define SDIO_MASK_RXDVALIE_Mask               (((uint32_t)0x01) << 21)
#define SDIO_MASK_RXDVALIE                    SDIO_MASK_RXDVALIE_Mask
#define SDIO_MASK_TXDVALIE_Pos                ((uint32_t)20)                    /* Data available in RxFIFO interrupt enable */
#define SDIO_MASK_TXDVALIE_Mask               (((uint32_t)0x01) << 20)
#define SDIO_MASK_TXDVALIE                    SDIO_MASK_TXDVALIE_Mask
#define SDIO_MASK_RXFIFOEIE_Pos               ((uint32_t)19)                    /* RxFIFO empty interrupt enable */
#define SDIO_MASK_RXFIFOEIE_Mask              (((uint32_t)0x01) << 19)
#define SDIO_MASK_RXFIFOEIE                   SDIO_MASK_RXFIFOEIE_Mask
#define SDIO_MASK_TXFIFOEIE_Pos               ((uint32_t)18)                    /* TxFIFO empty interrupt enable */
#define SDIO_MASK_TXFIFOEIE_Mask              (((uint32_t)0x01) << 18)
#define SDIO_MASK_TXFIFOEIE                   SDIO_MASK_TXFIFOEIE_Mask
#define SDIO_MASK_RXFIFOFIE_Pos               ((uint32_t)17)                    /* RxFIFO full interrupt enable */
#define SDIO_MASK_RXFIFOFIE_Mask              (((uint32_t)0x01) << 17)
#define SDIO_MASK_RXFIFOFIE                   SDIO_MASK_RXFIFOFIE_Mask
#define SDIO_MASK_TXFIFOFIE_Pos               ((uint32_t)16)                    /* TxFIFO full interrupt enable */
#define SDIO_MASK_TXFIFOFIE_Mask              (((uint32_t)0x01) << 16)
#define SDIO_MASK_TXFIFOFIE                   SDIO_MASK_TXFIFOFIE_Mask
#define SDIO_MASK_RXFIFOHFIE_Pos              ((uint32_t)15)                    /* RxFIFO half full interrupt enable */
#define SDIO_MASK_RXFIFOHFIE_Mask             (((uint32_t)0x01) << 15)
#define SDIO_MASK_RXFIFOHFIE                  SDIO_MASK_RXFIFOHFIE_Mask
#define SDIO_MASK_TXFIFOHE_Pos                ((uint32_t)14)                    /* TxFIFO half empty interrupt enable */
#define SDIO_MASK_TXFIFOHE_Mask               (((uint32_t)0x01) << 14)
#define SDIO_MASK_TXFIFOHE                    SDIO_MASK_TXFIFOHE_Mask
#define SDIO_MASK_RXACTIE_Pos                 ((uint32_t)13)                    /* Datareceive acting interrupt enable */
#define SDIO_MASK_RXACTIE_Mask                (((uint32_t)0x01) << 13)
#define SDIO_MASK_RXACTIE                     SDIO_MASK_RXACTIE_Mask
#define SDIO_MASK_TXACTIE_Pos                 ((uint32_t)12)                    /* Datatransmit acting interrupt enable */
#define SDIO_MASK_TXACTIE_Mask                (((uint32_t)0x01) << 12)
#define SDIO_MASK_TXACTIE                     SDIO_MASK_TXACTIE_Mask
#define SDIO_MASK_CMDACTIE_Pos                ((uint32_t)11)                    /* Command acting interrupt enable */
#define SDIO_MASK_CMDACTIE_Mask               (((uint32_t)0x01) << 11)
#define SDIO_MASK_CMDACTIE                    SDIO_MASK_CMDACTIE_Mask
#define SDIO_MASK_DBCKENDIE_Pos               ((uint32_t)10)                    /* Data block end interrupt enable */
#define SDIO_MASK_DBCKENDIE_Mask              (((uint32_t)0x01) << 10)
#define SDIO_MASK_DBCKENDIE                   SDIO_MASK_DBCKENDIE_Mask
#define SDIO_MASK_STBITERRIE_Pos              ((uint32_t)9)                     /* Start bit error interrupt enable */
#define SDIO_MASK_STBITERRIE_Mask             (((uint32_t)0x01) << 9)
#define SDIO_MASK_STBITERRIE                  SDIO_MASK_STBITERRIE_Mask
#define SDIO_MASK_DATAENDIE_Pos               ((uint32_t)8)                     /* Data end interrupt enable */
#define SDIO_MASK_DATAENDIE_Mask              (((uint32_t)0x01) << 8)
#define SDIO_MASK_DATAENDIE                   SDIO_MASK_DATAENDIE_Mask
#define SDIO_MASK_CMDSENTIE_Pos               ((uint32_t)7)                     /* Command sent interrupt enable */
#define SDIO_MASK_CMDSENTIE_Mask              (((uint32_t)0x01) << 7)
#define SDIO_MASK_CMDSENTIE                   SDIO_MASK_CMDSENTIE_Mask
#define SDIO_MASK_CMDRENDIE_Pos               ((uint32_t)6)                     /* Command response received interrupt enable */
#define SDIO_MASK_CMDRENDIE_Mask              (((uint32_t)0x01) << 6)
#define SDIO_MASK_CMDRENDIE                   SDIO_MASK_CMDRENDIE_Mask
#define SDIO_MASK_RXOVERRIE_Pos               ((uint32_t)5)                     /* RxFIFO overrun error interrupt enable */
#define SDIO_MASK_RXOVERRIE_Mask              (((uint32_t)0x01) << 5)
#define SDIO_MASK_RXOVERRIE                   SDIO_MASK_RXOVERRIE_Mask
#define SDIO_MASK_TXUNDERRIE_Pos              ((uint32_t)4)                     /* TxFIFO underrun error interrupt enable */
#define SDIO_MASK_TXUNDERRIE_Mask             (((uint32_t)0x01) << 4)
#define SDIO_MASK_TXUNDERRIE                  SDIO_MASK_TXUNDERRIE_Mask
#define SDIO_MASK_DTIMEOUTIE_Pos              ((uint32_t)3)                     /* Data timeout interrupt enable */
#define SDIO_MASK_DTIMEOUTIE_Mask             (((uint32_t)0x01) << 3)
#define SDIO_MASK_DTIMEOUTIE                  SDIO_MASK_DTIMEOUTIE_Mask
#define SDIO_MASK_CTIMEOUTIE_Pos              ((uint32_t)2)                     /* Command timeout interrupt enable */
#define SDIO_MASK_CTIMEOUTIE_Mask             (((uint32_t)0x01) << 2)
#define SDIO_MASK_CTIMEOUTIE                  SDIO_MASK_CTIMEOUTIE_Mask
#define SDIO_MASK_DCRCFAILIE_Pos              ((uint32_t)1)                     /* Data CRC fail interrupt enable */
#define SDIO_MASK_DCRCFAILIE_Mask             (((uint32_t)0x01) << 1)
#define SDIO_MASK_DCRCFAILIE                  SDIO_MASK_DCRCFAILIE_Mask
#define SDIO_MASK_CCRCFAILIE_Pos              ((uint32_t)0)                     /* Command CRC fail interrupt enable */
#define SDIO_MASK_CCRCFAILIE_Mask             (((uint32_t)0x01) << 0)
#define SDIO_MASK_CCRCFAILIE                  SDIO_MASK_CCRCFAILIE_Mask

/*********************************** SDIO->FIFOCNT  *************************************/
#define SDIO_FIFOCNT_FIFOCOUNT_Pos            ((uint32_t)0)                     /* Data count value */
#define SDIO_FIFOCNT_FIFOCOUNT_Mask           (((uint32_t)0x01FFFFFF) << 0)
#define SDIO_FIFOCNT_FIFOCOUNT                SDIO_FIFOCNT_FIFOCOUNT_Mask

/************************************* SDIO->FIFO  **************************************/
#define SDIO_FIFO_FIFODATA_Pos                ((uint32_t)0)                     /* Receive and transmit FIFO data */
#define SDIO_FIFO_FIFODATA_Mask               (((uint32_t)0xFFFFFFFF) << 0)
#define SDIO_FIFO_FIFODATA                    SDIO_FIFO_FIFODATA_Mask

/*****************************************************************************************
*                                    Peripheral DBGMCU                                   *
*****************************************************************************************/
typedef struct{
  __I  uint32_t IDCODE;                 /* IDCODE */
  __IO uint32_t CR;                     /* CR */
}DBGMCU_TypeDef;

/*********************************** DBGMCU->IDCODE  ************************************/
#define DBGMCU_IDCODE_REV_ID_Pos              ((uint32_t)16)                    /* Revision identifier */
#define DBGMCU_IDCODE_REV_ID_Mask             (((uint32_t)0xFFFF) << 16)
#define DBGMCU_IDCODE_REV_ID                  DBGMCU_IDCODE_REV_ID_Mask
#define DBGMCU_IDCODE_DEV_ID_Pos              ((uint32_t)0)                     /* Device identifier */
#define DBGMCU_IDCODE_DEV_ID_Mask             (((uint32_t)0xFFFF) << 0)
#define DBGMCU_IDCODE_DEV_ID                  DBGMCU_IDCODE_DEV_ID_Mask

/************************************* DBGMCU->CR  **************************************/
#define DBGMCU_CR_DBG_TIM7_STOP_Pos           ((uint32_t)20)                    /* Debug TIM17 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM7_STOP_Mask          (((uint32_t)0x01) << 20)
#define DBGMCU_CR_DBG_TIM7_STOP               DBGMCU_CR_DBG_TIM7_STOP_Mask
#define DBGMCU_CR_DBG_TIM6_STOP_Pos           ((uint32_t)19)                    /* Debug TIM6 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM6_STOP_Mask          (((uint32_t)0x01) << 19)
#define DBGMCU_CR_DBG_TIM6_STOP               DBGMCU_CR_DBG_TIM6_STOP_Mask
#define DBGMCU_CR_DBG_TIM5_STOP_Pos           ((uint32_t)18)                    /* Debug TIM5 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM5_STOP_Mask          (((uint32_t)0x01) << 18)
#define DBGMCU_CR_DBG_TIM5_STOP               DBGMCU_CR_DBG_TIM5_STOP_Mask
#define DBGMCU_CR_DBG_TIM8_STOP_Pos           ((uint32_t)17)                    /* Debug TIM8 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM8_STOP_Mask          (((uint32_t)0x01) << 17)
#define DBGMCU_CR_DBG_TIM8_STOP               DBGMCU_CR_DBG_TIM8_STOP_Mask
#define DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos  ((uint32_t)16)                    /* I2C2 SMBUS timeout mode stopped when core is halted */
#define DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Mask  (((uint32_t)0x01) << 16)
#define DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT      DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Mask
#define DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos  ((uint32_t)15)                    /* I2C1 SMBUS timeout mode stopped when core is halted */
#define DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Mask  (((uint32_t)0x01) << 15)
#define DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT      DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Mask
#define DBGMCU_CR_DBG_CAN1_STOP_Pos           ((uint32_t)14)                    /* Debug CAN stopped when core is halted */
#define DBGMCU_CR_DBG_CAN1_STOP_Mask          (((uint32_t)0x01) << 14)
#define DBGMCU_CR_DBG_CAN1_STOP               DBGMCU_CR_DBG_CAN1_STOP_Mask
#define DBGMCU_CR_DBG_TIM4_STOP_Pos           ((uint32_t)13)                    /* Debug TIM4 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM4_STOP_Mask          (((uint32_t)0x01) << 13)
#define DBGMCU_CR_DBG_TIM4_STOP               DBGMCU_CR_DBG_TIM4_STOP_Mask
#define DBGMCU_CR_DBG_TIM3_STOP_Pos           ((uint32_t)12)                    /* Debug TIM3 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM3_STOP_Mask          (((uint32_t)0x01) << 12)
#define DBGMCU_CR_DBG_TIM3_STOP               DBGMCU_CR_DBG_TIM3_STOP_Mask
#define DBGMCU_CR_DBG_TIM2_STOP_Pos           ((uint32_t)11)                    /* Debug TIM2 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM2_STOP_Mask          (((uint32_t)0x01) << 11)
#define DBGMCU_CR_DBG_TIM2_STOP               DBGMCU_CR_DBG_TIM2_STOP_Mask
#define DBGMCU_CR_DBG_TIM1_STOP_Pos           ((uint32_t)10)                    /* Debug TIM1 stopped when core is halted */
#define DBGMCU_CR_DBG_TIM1_STOP_Mask          (((uint32_t)0x01) << 10)
#define DBGMCU_CR_DBG_TIM1_STOP               DBGMCU_CR_DBG_TIM1_STOP_Mask
#define DBGMCU_CR_DBG_WWDG_STOP_Pos           ((uint32_t)9)                     /* Debug window watch dog stopped when core is halted  */
#define DBGMCU_CR_DBG_WWDG_STOP_Mask          (((uint32_t)0x01) << 9)
#define DBGMCU_CR_DBG_WWDG_STOP               DBGMCU_CR_DBG_WWDG_STOP_Mask
#define DBGMCU_CR_DBG_IWDG_STOP_Pos           ((uint32_t)8)                     /* Debug independent watch dog stopped when core is halted */
#define DBGMCU_CR_DBG_IWDG_STOP_Mask          (((uint32_t)0x01) << 8)
#define DBGMCU_CR_DBG_IWDG_STOP               DBGMCU_CR_DBG_IWDG_STOP_Mask
#define DBGMCU_CR_TRACE_MODE_Pos              ((uint32_t)6)                     /* Trace pin assignment control */
#define DBGMCU_CR_TRACE_MODE_Mask             (((uint32_t)0x03) << 6)
#define DBGMCU_CR_TRACE_MODE                  DBGMCU_CR_TRACE_MODE_Mask
#define DBGMCU_CR_TRACE_MODE_0                (((uint32_t)0x1 << DBGMCU_CR_TRACE_MODE_Pos))
#define DBGMCU_CR_TRACE_MODE_1                (((uint32_t)0x2 << DBGMCU_CR_TRACE_MODE_Pos))
#define DBGMCU_CR_TRACE_IOEN_Pos              ((uint32_t)5)                     /* Trace pin assignment enable */
#define DBGMCU_CR_TRACE_IOEN_Mask             (((uint32_t)0x01) << 5)
#define DBGMCU_CR_TRACE_IOEN                  DBGMCU_CR_TRACE_IOEN_Mask
#define DBGMCU_CR_DBG_STANDBY_Pos             ((uint32_t)2)                     /* Debug Standby mode */
#define DBGMCU_CR_DBG_STANDBY_Mask            (((uint32_t)0x01) << 2)
#define DBGMCU_CR_DBG_STANDBY                 DBGMCU_CR_DBG_STANDBY_Mask
#define DBGMCU_CR_DBG_STOP_Pos                ((uint32_t)1)                     /* Debug Stop mode */
#define DBGMCU_CR_DBG_STOP_Mask               (((uint32_t)0x01) << 1)
#define DBGMCU_CR_DBG_STOP                    DBGMCU_CR_DBG_STOP_Mask
#define DBGMCU_CR_DBG_SLEEP_Pos               ((uint32_t)0)                     /* Debug Sleep mode */
#define DBGMCU_CR_DBG_SLEEP_Mask              (((uint32_t)0x01) << 0)
#define DBGMCU_CR_DBG_SLEEP                   DBGMCU_CR_DBG_SLEEP_Mask

/*****************************************************************************************
*                     Peripheral Base Address and Peripheral Define                      *
*****************************************************************************************/
#define FLASH_RBASE                           ((uint32_t)0x40022000)
#define FLASH                                 ((FLASH_TypeDef *)FLASH_RBASE)

#define CACHE_BASE                            ((uint32_t)0x40022000)
#define CACHE                                 ((CACHE_TypeDef *)CACHE_BASE)

#define CRC_BASE                              ((uint32_t)0x40023000)
#define CRC                                   ((CRC_TypeDef *)CRC_BASE)

#define PWR_BASE                              ((uint32_t)0x40007000)
#define PWR                                   ((PWR_TypeDef *)PWR_BASE)

#define BKP_BASE                              ((uint32_t)0x40006C00)
#define BKP                                   ((BKP_TypeDef *)BKP_BASE)

#define RCC_BASE                              ((uint32_t)0x40021000)
#define RCC                                   ((RCC_TypeDef *)RCC_BASE)

#define EXTI_BASE                             ((uint32_t)0x40010400)
#define EXTI                                  ((EXTI_TypeDef *)EXTI_BASE)

#define GPIOA_BASE                            ((uint32_t)0x40010800)
#define GPIOA                                 ((GPIO_TypeDef *)GPIOA_BASE)

#define GPIOB_BASE                            ((uint32_t)0x40010C00)
#define GPIOB                                 ((GPIO_TypeDef *)GPIOB_BASE)

#define GPIOC_BASE                            ((uint32_t)0x40011000)
#define GPIOC                                 ((GPIO_TypeDef *)GPIOC_BASE)

#define GPIOD_BASE                            ((uint32_t)0x40011400)
#define GPIOD                                 ((GPIO_TypeDef *)GPIOD_BASE)

#define GPIOE_BASE                            ((uint32_t)0x40011800)
#define GPIOE                                 ((GPIO_TypeDef *)GPIOE_BASE)

#define AFIO_BASE                             ((uint32_t)0x40010000)
#define AFIO                                  ((AFIO_TypeDef *)AFIO_BASE)

#define DMA1_BASE                             ((uint32_t)0x40020000)
#define DMA1                                  ((DMA_TypeDef *)DMA1_BASE)

#define DMA2_BASE                             ((uint32_t)0x40020400)
#define DMA2                                  ((DMA_TypeDef *)DMA2_BASE)

#define DMA1_Channel1_BASE                    ((uint32_t)0x40020008)
#define DMA1_Channel1                         ((DMA_Channel_TypeDef *)DMA1_Channel1_BASE)

#define DMA1_Channel2_BASE                    ((uint32_t)0x4002001C)
#define DMA1_Channel2                         ((DMA_Channel_TypeDef *)DMA1_Channel2_BASE)

#define DMA1_Channel3_BASE                    ((uint32_t)0x40020030)
#define DMA1_Channel3                         ((DMA_Channel_TypeDef *)DMA1_Channel3_BASE)

#define DMA1_Channel4_BASE                    ((uint32_t)0x40020044)
#define DMA1_Channel4                         ((DMA_Channel_TypeDef *)DMA1_Channel4_BASE)

#define DMA1_Channel5_BASE                    ((uint32_t)0x40020058)
#define DMA1_Channel5                         ((DMA_Channel_TypeDef *)DMA1_Channel5_BASE)

#define DMA1_Channel6_BASE                    ((uint32_t)0x4002006C)
#define DMA1_Channel6                         ((DMA_Channel_TypeDef *)DMA1_Channel6_BASE)

#define DMA1_Channel7_BASE                    ((uint32_t)0x40020080)
#define DMA1_Channel7                         ((DMA_Channel_TypeDef *)DMA1_Channel7_BASE)

#define DMA2_Channel1_BASE                    ((uint32_t)0x40020408)
#define DMA2_Channel1                         ((DMA_Channel_TypeDef *)DMA2_Channel1_BASE)

#define DMA2_Channel2_BASE                    ((uint32_t)0x4002041C)
#define DMA2_Channel2                         ((DMA_Channel_TypeDef *)DMA2_Channel2_BASE)

#define DMA2_Channel3_BASE                    ((uint32_t)0x40020430)
#define DMA2_Channel3                         ((DMA_Channel_TypeDef *)DMA2_Channel3_BASE)

#define DMA2_Channel4_BASE                    ((uint32_t)0x40020444)
#define DMA2_Channel4                         ((DMA_Channel_TypeDef *)DMA2_Channel4_BASE)

#define DMA2_Channel5_BASE                    ((uint32_t)0x40020458)
#define DMA2_Channel5                         ((DMA_Channel_TypeDef *)DMA2_Channel5_BASE)

#define ADC1_BASE                             ((uint32_t)0x40012400)
#define ADC1                                  ((ADC_TypeDef *)ADC1_BASE)

#define ADC2_BASE                             ((uint32_t)0x40012800)
#define ADC2                                  ((ADC_TypeDef *)ADC2_BASE)

#define ADC3_BASE                             ((uint32_t)0x40013C00)
#define ADC3                                  ((ADC_TypeDef *)ADC3_BASE)

#define DAC_BASE                              ((uint32_t)0x40007400)
#define DAC                                   ((DAC_TypeDef *)DAC_BASE)

#define FSMC_BASE                             ((uint32_t)0xA0000000)
#define FSMC                                  ((FSMC_TypeDef *)FSMC_BASE)

#define TIM1_BASE                             ((uint32_t)0x40012C00)
#define TIM1                                  ((TIM_TypeDef *)TIM1_BASE)

#define TIM8_BASE                             ((uint32_t)0x40013400)
#define TIM8                                  ((TIM_TypeDef *)TIM8_BASE)

#define TIM2_BASE                             ((uint32_t)0x40000000)
#define TIM2                                  ((TIM_TypeDef *)TIM2_BASE)

#define TIM3_BASE                             ((uint32_t)0x40000400)
#define TIM3                                  ((TIM_TypeDef *)TIM3_BASE)

#define TIM4_BASE                             ((uint32_t)0x40000800)
#define TIM4                                  ((TIM_TypeDef *)TIM4_BASE)

#define TIM5_BASE                             ((uint32_t)0x40000C00)
#define TIM5                                  ((TIM_TypeDef *)TIM5_BASE)

#define TIM6_BASE                             ((uint32_t)0x40001000)
#define TIM6                                  ((TIM_TypeDef *)TIM6_BASE)

#define TIM7_BASE                             ((uint32_t)0x40001400)
#define TIM7                                  ((TIM_TypeDef *)TIM7_BASE)

#define RTC_BASE                              ((uint32_t)0x40002800)
#define RTC                                   ((RTC_TypeDef *)RTC_BASE)

#define IWDG_BASE                             ((uint32_t)0x40003000)
#define IWDG                                  ((IWDG_TypeDef *)IWDG_BASE)

#define WWDG_BASE                             ((uint32_t)0x40002C00)
#define WWDG                                  ((WWDG_TypeDef *)WWDG_BASE)

#define USB_BASE                              ((uint32_t)0x40005C00)
#define USB                                   ((USB_TypeDef *)USB_BASE)

#define CAN_BASE                              ((uint32_t)0x40006400)
#define CAN                                   ((CAN_TypeDef *)CAN_BASE)

#define SPI1_BASE                             ((uint32_t)0x40013000)
#define SPI1                                  ((SPI_TypeDef *)SPI1_BASE)

#define SPI2_BASE                             ((uint32_t)0x40003800)
#define SPI2                                  ((SPI_TypeDef *)SPI2_BASE)

#define SPI3_BASE                             ((uint32_t)0x40003C00)
#define SPI3                                  ((SPI_TypeDef *)SPI3_BASE)

#define I2C1_BASE                             ((uint32_t)0x40005400)
#define I2C1                                  ((I2C_TypeDef *)I2C1_BASE)

#define I2C2_BASE                             ((uint32_t)0x40005800)
#define I2C2                                  ((I2C_TypeDef *)I2C2_BASE)

#define USART1_BASE                           ((uint32_t)0x40013800)
#define USART1                                ((USART_TypeDef *)USART1_BASE)

#define USART2_BASE                           ((uint32_t)0x40004400)
#define USART2                                ((USART_TypeDef *)USART2_BASE)

#define USART3_BASE                           ((uint32_t)0x40004800)
#define USART3                                ((USART_TypeDef *)USART3_BASE)

#define UART4_BASE                            ((uint32_t)0x40004C00)
#define UART4                                 ((USART_TypeDef *)UART4_BASE)

#define UART5_BASE                            ((uint32_t)0x40005000)
#define UART5                                 ((USART_TypeDef *)UART5_BASE)

#define SDIO_BASE                             ((uint32_t)0x40018000)
#define SDIO                                  ((SDIO_TypeDef *)SDIO_BASE)

#define DBGMCU_BASE                           ((uint32_t)0xE0042000)
#define DBGMCU                                ((DBGMCU_TypeDef *)DBGMCU_BASE)

/*****************************************************************************************
*                         End of section using anonymous unions                          *
*****************************************************************************************/
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
/* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
/* anonymous unions are enabled by default */
#elif defined (__TMS470__)
/* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
/* anonymous unions are enabled by default */
#endif
/*****************************************************************************************
*                                     Exported macro                                     *
*****************************************************************************************/
#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
#define READ_BIT(REG, BIT)    ((REG) & (BIT))
#define CLEAR_REG(REG)        ((REG) = (0x0))
#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
#define READ_REG(REG)         ((REG))
#define POSITION_VAL(VAL)     (__CLZ(__RBIT(VAL)))
#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))


#include "hk32f103xxxxa_def.h"
#include "hk32f103xxxxa_conf.h"

#ifdef __cplusplus
}
#endif  /* End of __cplusplus */

#endif  /* End of __HK32F103xxxxA__ */

/***************************** (C) COPYRIGHT HKMicroChip  *******************************/
